(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{and-map*\ 16971}#
     (lambda (#{f\ 17135}# #{first\ 17136}# . #{rest\ 17137}#)
       (begin
         (let ((#{t\ 17143}# (null? #{first\ 17136}#)))
           (if #{t\ 17143}#
             #{t\ 17143}#
             (if (null? #{rest\ 17137}#)
               (letrec*
                 ((#{andmap\ 17147}#
                    (lambda (#{first\ 17148}#)
                      (begin
                        (let ((#{x\ 17151}# (car #{first\ 17148}#))
                              (#{first\ 17152}# (cdr #{first\ 17148}#)))
                          (if (null? #{first\ 17152}#)
                            (#{f\ 17135}# #{x\ 17151}#)
                            (if (#{f\ 17135}# #{x\ 17151}#)
                              (#{andmap\ 17147}# #{first\ 17152}#)
                              #f)))))))
                 (begin (#{andmap\ 17147}# #{first\ 17136}#)))
               (letrec*
                 ((#{andmap\ 17158}#
                    (lambda (#{first\ 17159}# #{rest\ 17160}#)
                      (begin
                        (let ((#{x\ 17165}# (car #{first\ 17159}#))
                              (#{xr\ 17166}# (map car #{rest\ 17160}#))
                              (#{first\ 17167}# (cdr #{first\ 17159}#))
                              (#{rest\ 17168}# (map cdr #{rest\ 17160}#)))
                          (if (null? #{first\ 17167}#)
                            (@apply
                              #{f\ 17135}#
                              (cons #{x\ 17165}# #{xr\ 17166}#))
                            (if (@apply
                                  #{f\ 17135}#
                                  (cons #{x\ 17165}# #{xr\ 17166}#))
                              (#{andmap\ 17158}#
                                #{first\ 17167}#
                                #{rest\ 17168}#)
                              #f)))))))
                 (begin
                   (#{andmap\ 17158}#
                     #{first\ 17136}#
                     #{rest\ 17137}#))))))))))
  (begin
    (let ((#{make-primitive-ref\ 17177}# (if #f #f))
          (#{fx+\ 17216}# (if #f #f))
          (#{fx-\ 17218}# (if #f #f))
          (#{fx=\ 17220}# (if #f #f))
          (#{fx<\ 17222}# (if #f #f))
          (#{set-syntax-object-expression!\ 17287}#
            (if #f #f))
          (#{set-syntax-object-wrap!\ 17289}# (if #f #f))
          (#{set-syntax-object-module!\ 17291}# (if #f #f))
          (#{binding-type\ 17298}# (if #f #f))
          (#{binding-value\ 17300}# (if #f #f))
          (#{make-wrap\ 17320}# (if #f #f))
          (#{wrap-marks\ 17322}# (if #f #f))
          (#{wrap-subst\ 17324}# (if #f #f))
          (#{ribcage?\ 17338}# (if #f #f)))
      (letrec*
        ((#{make-void\ 17173}#
           (lambda (#{src\ 17633}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 0)
               #{src\ 17633}#)))
         (#{make-const\ 17175}#
           (lambda (#{src\ 17635}# #{exp\ 17636}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 1)
               #{src\ 17635}#
               #{exp\ 17636}#)))
         (#{make-lexical-ref\ 17179}#
           (lambda (#{src\ 17643}#
                    #{name\ 17644}#
                    #{gensym\ 17645}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 3)
               #{src\ 17643}#
               #{name\ 17644}#
               #{gensym\ 17645}#)))
         (#{make-lexical-set\ 17181}#
           (lambda (#{src\ 17649}#
                    #{name\ 17650}#
                    #{gensym\ 17651}#
                    #{exp\ 17652}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 4)
               #{src\ 17649}#
               #{name\ 17650}#
               #{gensym\ 17651}#
               #{exp\ 17652}#)))
         (#{make-module-ref\ 17183}#
           (lambda (#{src\ 17657}#
                    #{mod\ 17658}#
                    #{name\ 17659}#
                    #{public?\ 17660}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{src\ 17657}#
               #{mod\ 17658}#
               #{name\ 17659}#
               #{public?\ 17660}#)))
         (#{make-module-set\ 17185}#
           (lambda (#{src\ 17665}#
                    #{mod\ 17666}#
                    #{name\ 17667}#
                    #{public?\ 17668}#
                    #{exp\ 17669}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{src\ 17665}#
               #{mod\ 17666}#
               #{name\ 17667}#
               #{public?\ 17668}#
               #{exp\ 17669}#)))
         (#{make-toplevel-ref\ 17187}#
           (lambda (#{src\ 17675}# #{name\ 17676}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{src\ 17675}#
               #{name\ 17676}#)))
         (#{make-toplevel-set\ 17189}#
           (lambda (#{src\ 17679}# #{name\ 17680}# #{exp\ 17681}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{src\ 17679}#
               #{name\ 17680}#
               #{exp\ 17681}#)))
         (#{make-toplevel-define\ 17191}#
           (lambda (#{src\ 17685}# #{name\ 17686}# #{exp\ 17687}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #{src\ 17685}#
               #{name\ 17686}#
               #{exp\ 17687}#)))
         (#{make-conditional\ 17193}#
           (lambda (#{src\ 17691}#
                    #{test\ 17692}#
                    #{consequent\ 17693}#
                    #{alternate\ 17694}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 10)
               #{src\ 17691}#
               #{test\ 17692}#
               #{consequent\ 17693}#
               #{alternate\ 17694}#)))
         (#{make-application\ 17195}#
           (lambda (#{src\ 17699}# #{proc\ 17700}# #{args\ 17701}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 11)
               #{src\ 17699}#
               #{proc\ 17700}#
               #{args\ 17701}#)))
         (#{make-sequence\ 17197}#
           (lambda (#{src\ 17705}# #{exps\ 17706}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 12)
               #{src\ 17705}#
               #{exps\ 17706}#)))
         (#{make-lambda\ 17199}#
           (lambda (#{src\ 17709}# #{meta\ 17710}# #{body\ 17711}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 13)
               #{src\ 17709}#
               #{meta\ 17710}#
               #{body\ 17711}#)))
         (#{make-lambda-case\ 17201}#
           (lambda (#{src\ 17715}#
                    #{req\ 17716}#
                    #{opt\ 17717}#
                    #{rest\ 17718}#
                    #{kw\ 17719}#
                    #{inits\ 17720}#
                    #{gensyms\ 17721}#
                    #{body\ 17722}#
                    #{alternate\ 17723}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 14)
               #{src\ 17715}#
               #{req\ 17716}#
               #{opt\ 17717}#
               #{rest\ 17718}#
               #{kw\ 17719}#
               #{inits\ 17720}#
               #{gensyms\ 17721}#
               #{body\ 17722}#
               #{alternate\ 17723}#)))
         (#{make-let\ 17203}#
           (lambda (#{src\ 17733}#
                    #{names\ 17734}#
                    #{gensyms\ 17735}#
                    #{vals\ 17736}#
                    #{body\ 17737}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src\ 17733}#
               #{names\ 17734}#
               #{gensyms\ 17735}#
               #{vals\ 17736}#
               #{body\ 17737}#)))
         (#{make-letrec\ 17205}#
           (lambda (#{src\ 17743}#
                    #{in-order?\ 17744}#
                    #{names\ 17745}#
                    #{gensyms\ 17746}#
                    #{vals\ 17747}#
                    #{body\ 17748}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src\ 17743}#
               #{in-order?\ 17744}#
               #{names\ 17745}#
               #{gensyms\ 17746}#
               #{vals\ 17747}#
               #{body\ 17748}#)))
         (#{make-dynlet\ 17207}#
           (lambda (#{src\ 17755}#
                    #{fluids\ 17756}#
                    #{vals\ 17757}#
                    #{body\ 17758}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 17)
               #{src\ 17755}#
               #{fluids\ 17756}#
               #{vals\ 17757}#
               #{body\ 17758}#)))
         (#{lambda?\ 17210}#
           (lambda (#{x\ 17763}#)
             (if (struct? #{x\ 17763}#)
               (eq? (struct-vtable #{x\ 17763}#)
                    (vector-ref %expanded-vtables 13))
               #f)))
         (#{lambda-meta\ 17212}#
           (lambda (#{x\ 17767}#)
             (struct-ref #{x\ 17767}# 1)))
         (#{set-lambda-meta!\ 17214}#
           (lambda (#{x\ 17769}# #{v\ 17770}#)
             (struct-set! #{x\ 17769}# 1 #{v\ 17770}#)))
         (#{top-level-eval-hook\ 17224}#
           (lambda (#{x\ 17773}# #{mod\ 17774}#)
             (primitive-eval #{x\ 17773}#)))
         (#{local-eval-hook\ 17226}#
           (lambda (#{x\ 17777}# #{mod\ 17778}#)
             (primitive-eval #{x\ 17777}#)))
         (#{put-global-definition-hook\ 17229}#
           (lambda (#{symbol\ 17781}#
                    #{type\ 17782}#
                    #{val\ 17783}#)
             (module-define!
               (current-module)
               #{symbol\ 17781}#
               (make-syntax-transformer
                 #{symbol\ 17781}#
                 #{type\ 17782}#
                 #{val\ 17783}#))))
         (#{get-global-definition-hook\ 17231}#
           (lambda (#{symbol\ 17787}# #{module\ 17788}#)
             (begin
               (if (if (not #{module\ 17788}#) (current-module) #f)
                 (warn "module system is booted, we should have a module"
                       #{symbol\ 17787}#))
               (begin
                 (let ((#{v\ 17794}#
                         (module-variable
                           (if #{module\ 17788}#
                             (resolve-module (cdr #{module\ 17788}#))
                             (current-module))
                           #{symbol\ 17787}#)))
                   (if #{v\ 17794}#
                     (if (variable-bound? #{v\ 17794}#)
                       (begin
                         (let ((#{val\ 17799}# (variable-ref #{v\ 17794}#)))
                           (if (macro? #{val\ 17799}#)
                             (if (macro-type #{val\ 17799}#)
                               (cons (macro-type #{val\ 17799}#)
                                     (macro-binding #{val\ 17799}#))
                               #f)
                             #f)))
                       #f)
                     #f))))))
         (#{decorate-source\ 17233}#
           (lambda (#{e\ 17803}# #{s\ 17804}#)
             (begin
               (if (if (pair? #{e\ 17803}#) #{s\ 17804}# #f)
                 (set-source-properties!
                   #{e\ 17803}#
                   #{s\ 17804}#))
               #{e\ 17803}#)))
         (#{maybe-name-value!\ 17235}#
           (lambda (#{name\ 17809}# #{val\ 17810}#)
             (if (#{lambda?\ 17210}# #{val\ 17810}#)
               (begin
                 (let ((#{meta\ 17814}#
                         (#{lambda-meta\ 17212}# #{val\ 17810}#)))
                   (if (not (assq (quote name) #{meta\ 17814}#))
                     (#{set-lambda-meta!\ 17214}#
                       #{val\ 17810}#
                       (cons (cons (quote name) #{name\ 17809}#)
                             #{meta\ 17814}#))))))))
         (#{build-void\ 17237}#
           (lambda (#{source\ 17815}#)
             (#{make-void\ 17173}# #{source\ 17815}#)))
         (#{build-application\ 17239}#
           (lambda (#{source\ 17817}#
                    #{fun-exp\ 17818}#
                    #{arg-exps\ 17819}#)
             (#{make-application\ 17195}#
               #{source\ 17817}#
               #{fun-exp\ 17818}#
               #{arg-exps\ 17819}#)))
         (#{build-conditional\ 17241}#
           (lambda (#{source\ 17823}#
                    #{test-exp\ 17824}#
                    #{then-exp\ 17825}#
                    #{else-exp\ 17826}#)
             (#{make-conditional\ 17193}#
               #{source\ 17823}#
               #{test-exp\ 17824}#
               #{then-exp\ 17825}#
               #{else-exp\ 17826}#)))
         (#{build-dynlet\ 17243}#
           (lambda (#{source\ 17831}#
                    #{fluids\ 17832}#
                    #{vals\ 17833}#
                    #{body\ 17834}#)
             (#{make-dynlet\ 17207}#
               #{source\ 17831}#
               #{fluids\ 17832}#
               #{vals\ 17833}#
               #{body\ 17834}#)))
         (#{build-lexical-reference\ 17245}#
           (lambda (#{type\ 17839}#
                    #{source\ 17840}#
                    #{name\ 17841}#
                    #{var\ 17842}#)
             (#{make-lexical-ref\ 17179}#
               #{source\ 17840}#
               #{name\ 17841}#
               #{var\ 17842}#)))
         (#{build-lexical-assignment\ 17247}#
           (lambda (#{source\ 17847}#
                    #{name\ 17848}#
                    #{var\ 17849}#
                    #{exp\ 17850}#)
             (begin
               (#{maybe-name-value!\ 17235}#
                 #{name\ 17848}#
                 #{exp\ 17850}#)
               (#{make-lexical-set\ 17181}#
                 #{source\ 17847}#
                 #{name\ 17848}#
                 #{var\ 17849}#
                 #{exp\ 17850}#))))
         (#{analyze-variable\ 17249}#
           (lambda (#{mod\ 17855}#
                    #{var\ 17856}#
                    #{modref-cont\ 17857}#
                    #{bare-cont\ 17858}#)
             (if (not #{mod\ 17855}#)
               (#{bare-cont\ 17858}# #{var\ 17856}#)
               (begin
                 (let ((#{kind\ 17865}# (car #{mod\ 17855}#))
                       (#{mod\ 17866}# (cdr #{mod\ 17855}#)))
                   (if (eqv? #{kind\ 17865}# (quote public))
                     (#{modref-cont\ 17857}#
                       #{mod\ 17866}#
                       #{var\ 17856}#
                       #t)
                     (if (eqv? #{kind\ 17865}# (quote private))
                       (if (not (equal?
                                  #{mod\ 17866}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 17857}#
                           #{mod\ 17866}#
                           #{var\ 17856}#
                           #f)
                         (#{bare-cont\ 17858}# #{var\ 17856}#))
                       (if (eqv? #{kind\ 17865}# (quote bare))
                         (#{bare-cont\ 17858}# #{var\ 17856}#)
                         (if (eqv? #{kind\ 17865}# (quote hygiene))
                           (if (if (not (equal?
                                          #{mod\ 17866}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 17866}#)
                                   #{var\ 17856}#)
                                 #f)
                             (#{modref-cont\ 17857}#
                               #{mod\ 17866}#
                               #{var\ 17856}#
                               #f)
                             (#{bare-cont\ 17858}# #{var\ 17856}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 17856}#
                             #{mod\ 17866}#))))))))))
         (#{build-global-reference\ 17251}#
           (lambda (#{source\ 17874}# #{var\ 17875}# #{mod\ 17876}#)
             (#{analyze-variable\ 17249}#
               #{mod\ 17876}#
               #{var\ 17875}#
               (lambda (#{mod\ 17880}#
                        #{var\ 17881}#
                        #{public?\ 17882}#)
                 (#{make-module-ref\ 17183}#
                   #{source\ 17874}#
                   #{mod\ 17880}#
                   #{var\ 17881}#
                   #{public?\ 17882}#))
               (lambda (#{var\ 17886}#)
                 (#{make-toplevel-ref\ 17187}#
                   #{source\ 17874}#
                   #{var\ 17886}#)))))
         (#{build-global-assignment\ 17253}#
           (lambda (#{source\ 17888}#
                    #{var\ 17889}#
                    #{exp\ 17890}#
                    #{mod\ 17891}#)
             (begin
               (#{maybe-name-value!\ 17235}#
                 #{var\ 17889}#
                 #{exp\ 17890}#)
               (#{analyze-variable\ 17249}#
                 #{mod\ 17891}#
                 #{var\ 17889}#
                 (lambda (#{mod\ 17896}#
                          #{var\ 17897}#
                          #{public?\ 17898}#)
                   (#{make-module-set\ 17185}#
                     #{source\ 17888}#
                     #{mod\ 17896}#
                     #{var\ 17897}#
                     #{public?\ 17898}#
                     #{exp\ 17890}#))
                 (lambda (#{var\ 17902}#)
                   (#{make-toplevel-set\ 17189}#
                     #{source\ 17888}#
                     #{var\ 17902}#
                     #{exp\ 17890}#))))))
         (#{build-global-definition\ 17255}#
           (lambda (#{source\ 17904}# #{var\ 17905}# #{exp\ 17906}#)
             (begin
               (#{maybe-name-value!\ 17235}#
                 #{var\ 17905}#
                 #{exp\ 17906}#)
               (#{make-toplevel-define\ 17191}#
                 #{source\ 17904}#
                 #{var\ 17905}#
                 #{exp\ 17906}#))))
         (#{build-simple-lambda\ 17257}#
           (lambda (#{src\ 17910}#
                    #{req\ 17911}#
                    #{rest\ 17912}#
                    #{vars\ 17913}#
                    #{meta\ 17914}#
                    #{exp\ 17915}#)
             (#{make-lambda\ 17199}#
               #{src\ 17910}#
               #{meta\ 17914}#
               (#{make-lambda-case\ 17201}#
                 #{src\ 17910}#
                 #{req\ 17911}#
                 #f
                 #{rest\ 17912}#
                 #f
                 '()
                 #{vars\ 17913}#
                 #{exp\ 17915}#
                 #f))))
         (#{build-case-lambda\ 17259}#
           (lambda (#{src\ 17922}# #{meta\ 17923}# #{body\ 17924}#)
             (#{make-lambda\ 17199}#
               #{src\ 17922}#
               #{meta\ 17923}#
               #{body\ 17924}#)))
         (#{build-lambda-case\ 17261}#
           (lambda (#{src\ 17928}#
                    #{req\ 17929}#
                    #{opt\ 17930}#
                    #{rest\ 17931}#
                    #{kw\ 17932}#
                    #{inits\ 17933}#
                    #{vars\ 17934}#
                    #{body\ 17935}#
                    #{else-case\ 17936}#)
             (#{make-lambda-case\ 17201}#
               #{src\ 17928}#
               #{req\ 17929}#
               #{opt\ 17930}#
               #{rest\ 17931}#
               #{kw\ 17932}#
               #{inits\ 17933}#
               #{vars\ 17934}#
               #{body\ 17935}#
               #{else-case\ 17936}#)))
         (#{build-primref\ 17263}#
           (lambda (#{src\ 17946}# #{name\ 17947}#)
             (if (equal?
                   (module-name (current-module))
                   '(guile))
               (#{make-toplevel-ref\ 17187}#
                 #{src\ 17946}#
                 #{name\ 17947}#)
               (#{make-module-ref\ 17183}#
                 #{src\ 17946}#
                 '(guile)
                 #{name\ 17947}#
                 #f))))
         (#{build-data\ 17265}#
           (lambda (#{src\ 17950}# #{exp\ 17951}#)
             (#{make-const\ 17175}#
               #{src\ 17950}#
               #{exp\ 17951}#)))
         (#{build-sequence\ 17267}#
           (lambda (#{src\ 17954}# #{exps\ 17955}#)
             (if (null? (cdr #{exps\ 17955}#))
               (car #{exps\ 17955}#)
               (#{make-sequence\ 17197}#
                 #{src\ 17954}#
                 #{exps\ 17955}#))))
         (#{build-let\ 17269}#
           (lambda (#{src\ 17958}#
                    #{ids\ 17959}#
                    #{vars\ 17960}#
                    #{val-exps\ 17961}#
                    #{body-exp\ 17962}#)
             (begin
               (for-each
                 #{maybe-name-value!\ 17235}#
                 #{ids\ 17959}#
                 #{val-exps\ 17961}#)
               (if (null? #{vars\ 17960}#)
                 #{body-exp\ 17962}#
                 (#{make-let\ 17203}#
                   #{src\ 17958}#
                   #{ids\ 17959}#
                   #{vars\ 17960}#
                   #{val-exps\ 17961}#
                   #{body-exp\ 17962}#)))))
         (#{build-named-let\ 17271}#
           (lambda (#{src\ 17968}#
                    #{ids\ 17969}#
                    #{vars\ 17970}#
                    #{val-exps\ 17971}#
                    #{body-exp\ 17972}#)
             (begin
               (let ((#{f\ 17982}# (car #{vars\ 17970}#))
                     (#{f-name\ 17983}# (car #{ids\ 17969}#))
                     (#{vars\ 17984}# (cdr #{vars\ 17970}#))
                     (#{ids\ 17985}# (cdr #{ids\ 17969}#)))
                 (begin
                   (let ((#{proc\ 17987}#
                           (#{build-simple-lambda\ 17257}#
                             #{src\ 17968}#
                             #{ids\ 17985}#
                             #f
                             #{vars\ 17984}#
                             '()
                             #{body-exp\ 17972}#)))
                     (begin
                       (#{maybe-name-value!\ 17235}#
                         #{f-name\ 17983}#
                         #{proc\ 17987}#)
                       (for-each
                         #{maybe-name-value!\ 17235}#
                         #{ids\ 17985}#
                         #{val-exps\ 17971}#)
                       (#{make-letrec\ 17205}#
                         #{src\ 17968}#
                         #f
                         (list #{f-name\ 17983}#)
                         (list #{f\ 17982}#)
                         (list #{proc\ 17987}#)
                         (#{build-application\ 17239}#
                           #{src\ 17968}#
                           (#{build-lexical-reference\ 17245}#
                             'fun
                             #{src\ 17968}#
                             #{f-name\ 17983}#
                             #{f\ 17982}#)
                           #{val-exps\ 17971}#)))))))))
         (#{build-letrec\ 17273}#
           (lambda (#{src\ 17988}#
                    #{in-order?\ 17989}#
                    #{ids\ 17990}#
                    #{vars\ 17991}#
                    #{val-exps\ 17992}#
                    #{body-exp\ 17993}#)
             (if (null? #{vars\ 17991}#)
               #{body-exp\ 17993}#
               (begin
                 (for-each
                   #{maybe-name-value!\ 17235}#
                   #{ids\ 17990}#
                   #{val-exps\ 17992}#)
                 (#{make-letrec\ 17205}#
                   #{src\ 17988}#
                   #{in-order?\ 17989}#
                   #{ids\ 17990}#
                   #{vars\ 17991}#
                   #{val-exps\ 17992}#
                   #{body-exp\ 17993}#)))))
         (#{make-syntax-object\ 17277}#
           (lambda (#{expression\ 18000}#
                    #{wrap\ 18001}#
                    #{module\ 18002}#)
             (vector
               'syntax-object
               #{expression\ 18000}#
               #{wrap\ 18001}#
               #{module\ 18002}#)))
         (#{syntax-object?\ 17279}#
           (lambda (#{x\ 18006}#)
             (if (vector? #{x\ 18006}#)
               (if (= (vector-length #{x\ 18006}#) 4)
                 (eq? (vector-ref #{x\ 18006}# 0)
                      'syntax-object)
                 #f)
               #f)))
         (#{syntax-object-expression\ 17281}#
           (lambda (#{x\ 18011}#)
             (vector-ref #{x\ 18011}# 1)))
         (#{syntax-object-wrap\ 17283}#
           (lambda (#{x\ 18013}#)
             (vector-ref #{x\ 18013}# 2)))
         (#{syntax-object-module\ 17285}#
           (lambda (#{x\ 18015}#)
             (vector-ref #{x\ 18015}# 3)))
         (#{source-annotation\ 17294}#
           (lambda (#{x\ 18029}#)
             (if (#{syntax-object?\ 17279}# #{x\ 18029}#)
               (#{source-annotation\ 17294}#
                 (#{syntax-object-expression\ 17281}#
                   #{x\ 18029}#))
               (if (pair? #{x\ 18029}#)
                 (begin
                   (let ((#{props\ 18036}#
                           (source-properties #{x\ 18029}#)))
                     (if (pair? #{props\ 18036}#) #{props\ 18036}# #f)))
                 #f))))
         (#{extend-env\ 17303}#
           (lambda (#{labels\ 18038}#
                    #{bindings\ 18039}#
                    #{r\ 18040}#)
             (if (null? #{labels\ 18038}#)
               #{r\ 18040}#
               (#{extend-env\ 17303}#
                 (cdr #{labels\ 18038}#)
                 (cdr #{bindings\ 18039}#)
                 (cons (cons (car #{labels\ 18038}#)
                             (car #{bindings\ 18039}#))
                       #{r\ 18040}#)))))
         (#{extend-var-env\ 17305}#
           (lambda (#{labels\ 18044}# #{vars\ 18045}# #{r\ 18046}#)
             (if (null? #{labels\ 18044}#)
               #{r\ 18046}#
               (#{extend-var-env\ 17305}#
                 (cdr #{labels\ 18044}#)
                 (cdr #{vars\ 18045}#)
                 (cons (cons (car #{labels\ 18044}#)
                             (cons (quote lexical) (car #{vars\ 18045}#)))
                       #{r\ 18046}#)))))
         (#{macros-only-env\ 17307}#
           (lambda (#{r\ 18051}#)
             (if (null? #{r\ 18051}#)
               '()
               (begin
                 (let ((#{a\ 18054}# (car #{r\ 18051}#)))
                   (if (eq? (car (cdr #{a\ 18054}#)) (quote macro))
                     (cons #{a\ 18054}#
                           (#{macros-only-env\ 17307}# (cdr #{r\ 18051}#)))
                     (#{macros-only-env\ 17307}# (cdr #{r\ 18051}#))))))))
         (#{lookup\ 17309}#
           (lambda (#{x\ 18055}# #{r\ 18056}# #{mod\ 18057}#)
             (begin
               (let ((#{t\ 18063}# (assq #{x\ 18055}# #{r\ 18056}#)))
                 (if #{t\ 18063}#
                   (cdr #{t\ 18063}#)
                   (if (symbol? #{x\ 18055}#)
                     (begin
                       (let ((#{t\ 18069}#
                               (#{get-global-definition-hook\ 17231}#
                                 #{x\ 18055}#
                                 #{mod\ 18057}#)))
                         (if #{t\ 18069}# #{t\ 18069}# (quote (global)))))
                     '(displaced-lexical)))))))
         (#{global-extend\ 17311}#
           (lambda (#{type\ 18074}# #{sym\ 18075}# #{val\ 18076}#)
             (#{put-global-definition-hook\ 17229}#
               #{sym\ 18075}#
               #{type\ 18074}#
               #{val\ 18076}#)))
         (#{nonsymbol-id?\ 17313}#
           (lambda (#{x\ 18080}#)
             (if (#{syntax-object?\ 17279}# #{x\ 18080}#)
               (symbol?
                 (#{syntax-object-expression\ 17281}#
                   #{x\ 18080}#))
               #f)))
         (#{id?\ 17315}#
           (lambda (#{x\ 18084}#)
             (if (symbol? #{x\ 18084}#)
               #t
               (if (#{syntax-object?\ 17279}# #{x\ 18084}#)
                 (symbol?
                   (#{syntax-object-expression\ 17281}#
                     #{x\ 18084}#))
                 #f))))
         (#{id-sym-name&marks\ 17318}#
           (lambda (#{x\ 18091}# #{w\ 18092}#)
             (if (#{syntax-object?\ 17279}# #{x\ 18091}#)
               (values
                 (#{syntax-object-expression\ 17281}#
                   #{x\ 18091}#)
                 (#{join-marks\ 17368}#
                   (#{wrap-marks\ 17322}# #{w\ 18092}#)
                   (#{wrap-marks\ 17322}#
                     (#{syntax-object-wrap\ 17283}# #{x\ 18091}#))))
               (values
                 #{x\ 18091}#
                 (#{wrap-marks\ 17322}# #{w\ 18092}#)))))
         (#{gen-label\ 17331}#
           (lambda () (symbol->string (gensym "i"))))
         (#{gen-labels\ 17333}#
           (lambda (#{ls\ 18095}#)
             (if (null? #{ls\ 18095}#)
               '()
               (cons (#{gen-label\ 17331}#)
                     (#{gen-labels\ 17333}# (cdr #{ls\ 18095}#))))))
         (#{make-ribcage\ 17336}#
           (lambda (#{symnames\ 18097}#
                    #{marks\ 18098}#
                    #{labels\ 18099}#)
             (vector
               'ribcage
               #{symnames\ 18097}#
               #{marks\ 18098}#
               #{labels\ 18099}#)))
         (#{ribcage-symnames\ 17340}#
           (lambda (#{x\ 18108}#)
             (vector-ref #{x\ 18108}# 1)))
         (#{ribcage-marks\ 17342}#
           (lambda (#{x\ 18110}#)
             (vector-ref #{x\ 18110}# 2)))
         (#{ribcage-labels\ 17344}#
           (lambda (#{x\ 18112}#)
             (vector-ref #{x\ 18112}# 3)))
         (#{set-ribcage-symnames!\ 17346}#
           (lambda (#{x\ 18114}# #{update\ 18115}#)
             (vector-set! #{x\ 18114}# 1 #{update\ 18115}#)))
         (#{set-ribcage-marks!\ 17348}#
           (lambda (#{x\ 18118}# #{update\ 18119}#)
             (vector-set! #{x\ 18118}# 2 #{update\ 18119}#)))
         (#{set-ribcage-labels!\ 17350}#
           (lambda (#{x\ 18122}# #{update\ 18123}#)
             (vector-set! #{x\ 18122}# 3 #{update\ 18123}#)))
         (#{anti-mark\ 17356}#
           (lambda (#{w\ 18126}#)
             (#{make-wrap\ 17320}#
               (cons #f (#{wrap-marks\ 17322}# #{w\ 18126}#))
               (cons 'shift
                     (#{wrap-subst\ 17324}# #{w\ 18126}#)))))
         (#{extend-ribcage!\ 17360}#
           (lambda (#{ribcage\ 18129}#
                    #{id\ 18130}#
                    #{label\ 18131}#)
             (begin
               (#{set-ribcage-symnames!\ 17346}#
                 #{ribcage\ 18129}#
                 (cons (#{syntax-object-expression\ 17281}#
                         #{id\ 18130}#)
                       (#{ribcage-symnames\ 17340}# #{ribcage\ 18129}#)))
               (#{set-ribcage-marks!\ 17348}#
                 #{ribcage\ 18129}#
                 (cons (#{wrap-marks\ 17322}#
                         (#{syntax-object-wrap\ 17283}# #{id\ 18130}#))
                       (#{ribcage-marks\ 17342}# #{ribcage\ 18129}#)))
               (#{set-ribcage-labels!\ 17350}#
                 #{ribcage\ 18129}#
                 (cons #{label\ 18131}#
                       (#{ribcage-labels\ 17344}# #{ribcage\ 18129}#))))))
         (#{make-binding-wrap\ 17362}#
           (lambda (#{ids\ 18135}# #{labels\ 18136}# #{w\ 18137}#)
             (if (null? #{ids\ 18135}#)
               #{w\ 18137}#
               (#{make-wrap\ 17320}#
                 (#{wrap-marks\ 17322}# #{w\ 18137}#)
                 (cons (begin
                         (let ((#{labelvec\ 18142}#
                                 (list->vector #{labels\ 18136}#)))
                           (begin
                             (let ((#{n\ 18144}#
                                     (vector-length #{labelvec\ 18142}#)))
                               (begin
                                 (let ((#{symnamevec\ 18147}#
                                         (make-vector #{n\ 18144}#))
                                       (#{marksvec\ 18148}#
                                         (make-vector #{n\ 18144}#)))
                                   (begin
                                     (letrec*
                                       ((#{f\ 18152}#
                                          (lambda (#{ids\ 18153}# #{i\ 18154}#)
                                            (if (not (null? #{ids\ 18153}#))
                                              (call-with-values
                                                (lambda ()
                                                  (#{id-sym-name&marks\ 17318}#
                                                    (car #{ids\ 18153}#)
                                                    #{w\ 18137}#))
                                                (lambda (#{symname\ 18155}#
                                                         #{marks\ 18156}#)
                                                  (begin
                                                    (vector-set!
                                                      #{symnamevec\ 18147}#
                                                      #{i\ 18154}#
                                                      #{symname\ 18155}#)
                                                    (vector-set!
                                                      #{marksvec\ 18148}#
                                                      #{i\ 18154}#
                                                      #{marks\ 18156}#)
                                                    (#{f\ 18152}#
                                                      (cdr #{ids\ 18153}#)
                                                      (#{fx+\ 17216}#
                                                        #{i\ 18154}#
                                                        1)))))))))
                                       (begin (#{f\ 18152}# #{ids\ 18135}# 0)))
                                     (#{make-ribcage\ 17336}#
                                       #{symnamevec\ 18147}#
                                       #{marksvec\ 18148}#
                                       #{labelvec\ 18142}#))))))))
                       (#{wrap-subst\ 17324}# #{w\ 18137}#))))))
         (#{smart-append\ 17364}#
           (lambda (#{m1\ 18159}# #{m2\ 18160}#)
             (if (null? #{m2\ 18160}#)
               #{m1\ 18159}#
               (append #{m1\ 18159}# #{m2\ 18160}#))))
         (#{join-wraps\ 17366}#
           (lambda (#{w1\ 18163}# #{w2\ 18164}#)
             (begin
               (let ((#{m1\ 18169}#
                       (#{wrap-marks\ 17322}# #{w1\ 18163}#))
                     (#{s1\ 18170}#
                       (#{wrap-subst\ 17324}# #{w1\ 18163}#)))
                 (if (null? #{m1\ 18169}#)
                   (if (null? #{s1\ 18170}#)
                     #{w2\ 18164}#
                     (#{make-wrap\ 17320}#
                       (#{wrap-marks\ 17322}# #{w2\ 18164}#)
                       (#{smart-append\ 17364}#
                         #{s1\ 18170}#
                         (#{wrap-subst\ 17324}# #{w2\ 18164}#))))
                   (#{make-wrap\ 17320}#
                     (#{smart-append\ 17364}#
                       #{m1\ 18169}#
                       (#{wrap-marks\ 17322}# #{w2\ 18164}#))
                     (#{smart-append\ 17364}#
                       #{s1\ 18170}#
                       (#{wrap-subst\ 17324}# #{w2\ 18164}#))))))))
         (#{join-marks\ 17368}#
           (lambda (#{m1\ 18171}# #{m2\ 18172}#)
             (#{smart-append\ 17364}#
               #{m1\ 18171}#
               #{m2\ 18172}#)))
         (#{same-marks?\ 17370}#
           (lambda (#{x\ 18175}# #{y\ 18176}#)
             (begin
               (let ((#{t\ 18181}# (eq? #{x\ 18175}# #{y\ 18176}#)))
                 (if #{t\ 18181}#
                   #{t\ 18181}#
                   (if (not (null? #{x\ 18175}#))
                     (if (not (null? #{y\ 18176}#))
                       (if (eq? (car #{x\ 18175}#) (car #{y\ 18176}#))
                         (#{same-marks?\ 17370}#
                           (cdr #{x\ 18175}#)
                           (cdr #{y\ 18176}#))
                         #f)
                       #f)
                     #f))))))
         (#{id-var-name\ 17372}#
           (lambda (#{id\ 18187}# #{w\ 18188}#)
             (letrec*
               ((#{search\ 18193}#
                  (lambda (#{sym\ 18209}#
                           #{subst\ 18210}#
                           #{marks\ 18211}#)
                    (if (null? #{subst\ 18210}#)
                      (values #f #{marks\ 18211}#)
                      (begin
                        (let ((#{fst\ 18216}# (car #{subst\ 18210}#)))
                          (if (eq? #{fst\ 18216}# (quote shift))
                            (#{search\ 18193}#
                              #{sym\ 18209}#
                              (cdr #{subst\ 18210}#)
                              (cdr #{marks\ 18211}#))
                            (begin
                              (let ((#{symnames\ 18218}#
                                      (#{ribcage-symnames\ 17340}#
                                        #{fst\ 18216}#)))
                                (if (vector? #{symnames\ 18218}#)
                                  (#{search-vector-rib\ 18197}#
                                    #{sym\ 18209}#
                                    #{subst\ 18210}#
                                    #{marks\ 18211}#
                                    #{symnames\ 18218}#
                                    #{fst\ 18216}#)
                                  (#{search-list-rib\ 18195}#
                                    #{sym\ 18209}#
                                    #{subst\ 18210}#
                                    #{marks\ 18211}#
                                    #{symnames\ 18218}#
                                    #{fst\ 18216}#))))))))))
                (#{search-list-rib\ 18195}#
                  (lambda (#{sym\ 18219}#
                           #{subst\ 18220}#
                           #{marks\ 18221}#
                           #{symnames\ 18222}#
                           #{ribcage\ 18223}#)
                    (letrec*
                      ((#{f\ 18232}#
                         (lambda (#{symnames\ 18233}# #{i\ 18234}#)
                           (if (null? #{symnames\ 18233}#)
                             (#{search\ 18193}#
                               #{sym\ 18219}#
                               (cdr #{subst\ 18220}#)
                               #{marks\ 18221}#)
                             (if (if (eq? (car #{symnames\ 18233}#)
                                          #{sym\ 18219}#)
                                   (#{same-marks?\ 17370}#
                                     #{marks\ 18221}#
                                     (list-ref
                                       (#{ribcage-marks\ 17342}#
                                         #{ribcage\ 18223}#)
                                       #{i\ 18234}#))
                                   #f)
                               (values
                                 (list-ref
                                   (#{ribcage-labels\ 17344}#
                                     #{ribcage\ 18223}#)
                                   #{i\ 18234}#)
                                 #{marks\ 18221}#)
                               (#{f\ 18232}#
                                 (cdr #{symnames\ 18233}#)
                                 (#{fx+\ 17216}# #{i\ 18234}# 1)))))))
                      (begin (#{f\ 18232}# #{symnames\ 18222}# 0)))))
                (#{search-vector-rib\ 18197}#
                  (lambda (#{sym\ 18242}#
                           #{subst\ 18243}#
                           #{marks\ 18244}#
                           #{symnames\ 18245}#
                           #{ribcage\ 18246}#)
                    (begin
                      (let ((#{n\ 18253}#
                              (vector-length #{symnames\ 18245}#)))
                        (letrec*
                          ((#{f\ 18256}#
                             (lambda (#{i\ 18257}#)
                               (if (#{fx=\ 17220}# #{i\ 18257}# #{n\ 18253}#)
                                 (#{search\ 18193}#
                                   #{sym\ 18242}#
                                   (cdr #{subst\ 18243}#)
                                   #{marks\ 18244}#)
                                 (if (if (eq? (vector-ref
                                                #{symnames\ 18245}#
                                                #{i\ 18257}#)
                                              #{sym\ 18242}#)
                                       (#{same-marks?\ 17370}#
                                         #{marks\ 18244}#
                                         (vector-ref
                                           (#{ribcage-marks\ 17342}#
                                             #{ribcage\ 18246}#)
                                           #{i\ 18257}#))
                                       #f)
                                   (values
                                     (vector-ref
                                       (#{ribcage-labels\ 17344}#
                                         #{ribcage\ 18246}#)
                                       #{i\ 18257}#)
                                     #{marks\ 18244}#)
                                   (#{f\ 18256}#
                                     (#{fx+\ 17216}# #{i\ 18257}# 1)))))))
                          (begin (#{f\ 18256}# 0))))))))
               (begin
                 (if (symbol? #{id\ 18187}#)
                   (begin
                     (let ((#{t\ 18267}#
                             (call-with-values
                               (lambda ()
                                 (#{search\ 18193}#
                                   #{id\ 18187}#
                                   (#{wrap-subst\ 17324}# #{w\ 18188}#)
                                   (#{wrap-marks\ 17322}# #{w\ 18188}#)))
                               (lambda (#{x\ 18269}# . #{ignore\ 18270}#)
                                 #{x\ 18269}#))))
                       (if #{t\ 18267}# #{t\ 18267}# #{id\ 18187}#)))
                   (if (#{syntax-object?\ 17279}# #{id\ 18187}#)
                     (begin
                       (let ((#{id\ 18278}#
                               (#{syntax-object-expression\ 17281}#
                                 #{id\ 18187}#))
                             (#{w1\ 18279}#
                               (#{syntax-object-wrap\ 17283}# #{id\ 18187}#)))
                         (begin
                           (let ((#{marks\ 18281}#
                                   (#{join-marks\ 17368}#
                                     (#{wrap-marks\ 17322}# #{w\ 18188}#)
                                     (#{wrap-marks\ 17322}# #{w1\ 18279}#))))
                             (call-with-values
                               (lambda ()
                                 (#{search\ 18193}#
                                   #{id\ 18278}#
                                   (#{wrap-subst\ 17324}# #{w\ 18188}#)
                                   #{marks\ 18281}#))
                               (lambda (#{new-id\ 18282}# #{marks\ 18283}#)
                                 (begin
                                   (let ((#{t\ 18288}# #{new-id\ 18282}#))
                                     (if #{t\ 18288}#
                                       #{t\ 18288}#
                                       (begin
                                         (let ((#{t\ 18291}#
                                                 (call-with-values
                                                   (lambda ()
                                                     (#{search\ 18193}#
                                                       #{id\ 18278}#
                                                       (#{wrap-subst\ 17324}#
                                                         #{w1\ 18279}#)
                                                       #{marks\ 18283}#))
                                                   (lambda (#{x\ 18293}#
                                                            .
                                                            #{ignore\ 18294}#)
                                                     #{x\ 18293}#))))
                                           (if #{t\ 18291}#
                                             #{t\ 18291}#
                                             #{id\ 18278}#))))))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 18187}#)))))))
         (#{free-id=?\ 17374}#
           (lambda (#{i\ 18299}# #{j\ 18300}#)
             (if (eq? (begin
                        (let ((#{x\ 18306}# #{i\ 18299}#))
                          (if (#{syntax-object?\ 17279}# #{x\ 18306}#)
                            (#{syntax-object-expression\ 17281}#
                              #{x\ 18306}#)
                            #{x\ 18306}#)))
                      (begin
                        (let ((#{x\ 18309}# #{j\ 18300}#))
                          (if (#{syntax-object?\ 17279}# #{x\ 18309}#)
                            (#{syntax-object-expression\ 17281}#
                              #{x\ 18309}#)
                            #{x\ 18309}#))))
               (eq? (#{id-var-name\ 17372}#
                      #{i\ 18299}#
                      '(()))
                    (#{id-var-name\ 17372}#
                      #{j\ 18300}#
                      '(())))
               #f)))
         (#{bound-id=?\ 17376}#
           (lambda (#{i\ 18313}# #{j\ 18314}#)
             (if (if (#{syntax-object?\ 17279}# #{i\ 18313}#)
                   (#{syntax-object?\ 17279}# #{j\ 18314}#)
                   #f)
               (if (eq? (#{syntax-object-expression\ 17281}#
                          #{i\ 18313}#)
                        (#{syntax-object-expression\ 17281}#
                          #{j\ 18314}#))
                 (#{same-marks?\ 17370}#
                   (#{wrap-marks\ 17322}#
                     (#{syntax-object-wrap\ 17283}# #{i\ 18313}#))
                   (#{wrap-marks\ 17322}#
                     (#{syntax-object-wrap\ 17283}# #{j\ 18314}#)))
                 #f)
               (eq? #{i\ 18313}# #{j\ 18314}#))))
         (#{valid-bound-ids?\ 17378}#
           (lambda (#{ids\ 18321}#)
             (if (letrec*
                   ((#{all-ids?\ 18326}#
                      (lambda (#{ids\ 18327}#)
                        (begin
                          (let ((#{t\ 18330}# (null? #{ids\ 18327}#)))
                            (if #{t\ 18330}#
                              #{t\ 18330}#
                              (if (#{id?\ 17315}# (car #{ids\ 18327}#))
                                (#{all-ids?\ 18326}# (cdr #{ids\ 18327}#))
                                #f)))))))
                   (begin (#{all-ids?\ 18326}# #{ids\ 18321}#)))
               (#{distinct-bound-ids?\ 17380}# #{ids\ 18321}#)
               #f)))
         (#{distinct-bound-ids?\ 17380}#
           (lambda (#{ids\ 18335}#)
             (letrec*
               ((#{distinct?\ 18339}#
                  (lambda (#{ids\ 18340}#)
                    (begin
                      (let ((#{t\ 18343}# (null? #{ids\ 18340}#)))
                        (if #{t\ 18343}#
                          #{t\ 18343}#
                          (if (not (#{bound-id-member?\ 17382}#
                                     (car #{ids\ 18340}#)
                                     (cdr #{ids\ 18340}#)))
                            (#{distinct?\ 18339}# (cdr #{ids\ 18340}#))
                            #f)))))))
               (begin (#{distinct?\ 18339}# #{ids\ 18335}#)))))
         (#{bound-id-member?\ 17382}#
           (lambda (#{x\ 18347}# #{list\ 18348}#)
             (if (not (null? #{list\ 18348}#))
               (begin
                 (let ((#{t\ 18355}#
                         (#{bound-id=?\ 17376}#
                           #{x\ 18347}#
                           (car #{list\ 18348}#))))
                   (if #{t\ 18355}#
                     #{t\ 18355}#
                     (#{bound-id-member?\ 17382}#
                       #{x\ 18347}#
                       (cdr #{list\ 18348}#)))))
               #f)))
         (#{wrap\ 17384}#
           (lambda (#{x\ 18357}# #{w\ 18358}# #{defmod\ 18359}#)
             (if (if (null? (#{wrap-marks\ 17322}# #{w\ 18358}#))
                   (null? (#{wrap-subst\ 17324}# #{w\ 18358}#))
                   #f)
               #{x\ 18357}#
               (if (#{syntax-object?\ 17279}# #{x\ 18357}#)
                 (#{make-syntax-object\ 17277}#
                   (#{syntax-object-expression\ 17281}#
                     #{x\ 18357}#)
                   (#{join-wraps\ 17366}#
                     #{w\ 18358}#
                     (#{syntax-object-wrap\ 17283}# #{x\ 18357}#))
                   (#{syntax-object-module\ 17285}# #{x\ 18357}#))
                 (if (null? #{x\ 18357}#)
                   #{x\ 18357}#
                   (#{make-syntax-object\ 17277}#
                     #{x\ 18357}#
                     #{w\ 18358}#
                     #{defmod\ 18359}#))))))
         (#{source-wrap\ 17386}#
           (lambda (#{x\ 18372}#
                    #{w\ 18373}#
                    #{s\ 18374}#
                    #{defmod\ 18375}#)
             (#{wrap\ 17384}#
               (#{decorate-source\ 17233}#
                 #{x\ 18372}#
                 #{s\ 18374}#)
               #{w\ 18373}#
               #{defmod\ 18375}#)))
         (#{chi-sequence\ 17388}#
           (lambda (#{body\ 18380}#
                    #{r\ 18381}#
                    #{w\ 18382}#
                    #{s\ 18383}#
                    #{mod\ 18384}#)
             (#{build-sequence\ 17267}#
               #{s\ 18383}#
               (letrec*
                 ((#{dobody\ 18395}#
                    (lambda (#{body\ 18396}#
                             #{r\ 18397}#
                             #{w\ 18398}#
                             #{mod\ 18399}#)
                      (if (null? #{body\ 18396}#)
                        '()
                        (begin
                          (let ((#{first\ 18401}#
                                  (#{chi\ 17400}#
                                    (car #{body\ 18396}#)
                                    #{r\ 18397}#
                                    #{w\ 18398}#
                                    #{mod\ 18399}#)))
                            (cons #{first\ 18401}#
                                  (#{dobody\ 18395}#
                                    (cdr #{body\ 18396}#)
                                    #{r\ 18397}#
                                    #{w\ 18398}#
                                    #{mod\ 18399}#))))))))
                 (begin
                   (#{dobody\ 18395}#
                     #{body\ 18380}#
                     #{r\ 18381}#
                     #{w\ 18382}#
                     #{mod\ 18384}#))))))
         (#{chi-top-sequence\ 17390}#
           (lambda (#{body\ 18402}#
                    #{r\ 18403}#
                    #{w\ 18404}#
                    #{s\ 18405}#
                    #{m\ 18406}#
                    #{esew\ 18407}#
                    #{mod\ 18408}#)
             (#{build-sequence\ 17267}#
               #{s\ 18405}#
               (letrec*
                 ((#{dobody\ 18424}#
                    (lambda (#{body\ 18425}#
                             #{r\ 18426}#
                             #{w\ 18427}#
                             #{m\ 18428}#
                             #{esew\ 18429}#
                             #{mod\ 18430}#
                             #{out\ 18431}#)
                      (if (null? #{body\ 18425}#)
                        (reverse #{out\ 18431}#)
                        (#{dobody\ 18424}#
                          (cdr #{body\ 18425}#)
                          #{r\ 18426}#
                          #{w\ 18427}#
                          #{m\ 18428}#
                          #{esew\ 18429}#
                          #{mod\ 18430}#
                          (cons (#{chi-top\ 17398}#
                                  (car #{body\ 18425}#)
                                  #{r\ 18426}#
                                  #{w\ 18427}#
                                  #{m\ 18428}#
                                  #{esew\ 18429}#
                                  #{mod\ 18430}#)
                                #{out\ 18431}#))))))
                 (begin
                   (#{dobody\ 18424}#
                     #{body\ 18402}#
                     #{r\ 18403}#
                     #{w\ 18404}#
                     #{m\ 18406}#
                     #{esew\ 18407}#
                     #{mod\ 18408}#
                     '()))))))
         (#{chi-install-global\ 17392}#
           (lambda (#{name\ 18432}# #{e\ 18433}#)
             (#{build-global-definition\ 17255}#
               #f
               #{name\ 18432}#
               (#{build-application\ 17239}#
                 #f
                 (#{build-primref\ 17263}#
                   #f
                   'make-syntax-transformer)
                 (list (#{build-data\ 17265}# #f #{name\ 18432}#)
                       (#{build-data\ 17265}# #f (quote macro))
                       #{e\ 18433}#)))))
         (#{chi-when-list\ 17394}#
           (lambda (#{e\ 18441}# #{when-list\ 18442}# #{w\ 18443}#)
             (letrec*
               ((#{f\ 18450}#
                  (lambda (#{when-list\ 18451}# #{situations\ 18452}#)
                    (if (null? #{when-list\ 18451}#)
                      #{situations\ 18452}#
                      (#{f\ 18450}#
                        (cdr #{when-list\ 18451}#)
                        (cons (begin
                                (let ((#{x\ 18454}#
                                        (car #{when-list\ 18451}#)))
                                  (if (#{free-id=?\ 17374}#
                                        #{x\ 18454}#
                                        '#(syntax-object
                                           compile
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i18453"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(f when-list situations)
                                              #((top) (top) (top))
                                              #("i18447" "i18448" "i18449"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(e when-list w)
                                              #((top) (top) (top))
                                              #("i18444" "i18445" "i18446"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-application
                                                chi-expr
                                                chi
                                                chi-top
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i17429"
                                               "i17427"
                                               "i17425"
                                               "i17423"
                                               "i17421"
                                               "i17419"
                                               "i17417"
                                               "i17415"
                                               "i17413"
                                               "i17411"
                                               "i17409"
                                               "i17407"
                                               "i17405"
                                               "i17403"
                                               "i17401"
                                               "i17399"
                                               "i17397"
                                               "i17395"
                                               "i17393"
                                               "i17391"
                                               "i17389"
                                               "i17387"
                                               "i17385"
                                               "i17383"
                                               "i17381"
                                               "i17379"
                                               "i17377"
                                               "i17375"
                                               "i17373"
                                               "i17371"
                                               "i17369"
                                               "i17367"
                                               "i17365"
                                               "i17363"
                                               "i17361"
                                               "i17359"
                                               "i17358"
                                               "i17357"
                                               "i17355"
                                               "i17354"
                                               "i17353"
                                               "i17352"
                                               "i17351"
                                               "i17349"
                                               "i17347"
                                               "i17345"
                                               "i17343"
                                               "i17341"
                                               "i17339"
                                               "i17337"
                                               "i17335"
                                               "i17332"
                                               "i17330"
                                               "i17329"
                                               "i17328"
                                               "i17327"
                                               "i17326"
                                               "i17325"
                                               "i17323"
                                               "i17321"
                                               "i17319"
                                               "i17317"
                                               "i17316"
                                               "i17314"
                                               "i17312"
                                               "i17310"
                                               "i17308"
                                               "i17306"
                                               "i17304"
                                               "i17302"
                                               "i17301"
                                               "i17299"
                                               "i17297"
                                               "i17296"
                                               "i17295"
                                               "i17293"
                                               "i17292"
                                               "i17290"
                                               "i17288"
                                               "i17286"
                                               "i17284"
                                               "i17282"
                                               "i17280"
                                               "i17278"
                                               "i17276"
                                               "i17274"
                                               "i17272"
                                               "i17270"
                                               "i17268"
                                               "i17266"
                                               "i17264"
                                               "i17262"
                                               "i17260"
                                               "i17258"
                                               "i17256"
                                               "i17254"
                                               "i17252"
                                               "i17250"
                                               "i17248"
                                               "i17246"
                                               "i17244"
                                               "i17242"
                                               "i17240"
                                               "i17238"
                                               "i17236"
                                               "i17234"
                                               "i17232"
                                               "i17230"
                                               "i17228"
                                               "i17227"
                                               "i17225"
                                               "i17223"
                                               "i17221"
                                               "i17219"
                                               "i17217"
                                               "i17215"
                                               "i17213"
                                               "i17211"
                                               "i17209"
                                               "i17206"
                                               "i17204"
                                               "i17202"
                                               "i17200"
                                               "i17198"
                                               "i17196"
                                               "i17194"
                                               "i17192"
                                               "i17190"
                                               "i17188"
                                               "i17186"
                                               "i17184"
                                               "i17182"
                                               "i17180"
                                               "i17178"
                                               "i17176"
                                               "i17174"
                                               "i17172"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors
                                                and-map*)
                                              ((top) (top) (top) (top))
                                              ("i16974"
                                               "i16973"
                                               "i16972"
                                               "i16970")))
                                           (hygiene guile)))
                                    'compile
                                    (if (#{free-id=?\ 17374}#
                                          #{x\ 18454}#
                                          '#(syntax-object
                                             load
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i18453"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(f when-list situations)
                                                #((top) (top) (top))
                                                #("i18447" "i18448" "i18449"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(e when-list w)
                                                #((top) (top) (top))
                                                #("i18444" "i18445" "i18446"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-application
                                                  chi-expr
                                                  chi
                                                  chi-top
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i17429"
                                                 "i17427"
                                                 "i17425"
                                                 "i17423"
                                                 "i17421"
                                                 "i17419"
                                                 "i17417"
                                                 "i17415"
                                                 "i17413"
                                                 "i17411"
                                                 "i17409"
                                                 "i17407"
                                                 "i17405"
                                                 "i17403"
                                                 "i17401"
                                                 "i17399"
                                                 "i17397"
                                                 "i17395"
                                                 "i17393"
                                                 "i17391"
                                                 "i17389"
                                                 "i17387"
                                                 "i17385"
                                                 "i17383"
                                                 "i17381"
                                                 "i17379"
                                                 "i17377"
                                                 "i17375"
                                                 "i17373"
                                                 "i17371"
                                                 "i17369"
                                                 "i17367"
                                                 "i17365"
                                                 "i17363"
                                                 "i17361"
                                                 "i17359"
                                                 "i17358"
                                                 "i17357"
                                                 "i17355"
                                                 "i17354"
                                                 "i17353"
                                                 "i17352"
                                                 "i17351"
                                                 "i17349"
                                                 "i17347"
                                                 "i17345"
                                                 "i17343"
                                                 "i17341"
                                                 "i17339"
                                                 "i17337"
                                                 "i17335"
                                                 "i17332"
                                                 "i17330"
                                                 "i17329"
                                                 "i17328"
                                                 "i17327"
                                                 "i17326"
                                                 "i17325"
                                                 "i17323"
                                                 "i17321"
                                                 "i17319"
                                                 "i17317"
                                                 "i17316"
                                                 "i17314"
                                                 "i17312"
                                                 "i17310"
                                                 "i17308"
                                                 "i17306"
                                                 "i17304"
                                                 "i17302"
                                                 "i17301"
                                                 "i17299"
                                                 "i17297"
                                                 "i17296"
                                                 "i17295"
                                                 "i17293"
                                                 "i17292"
                                                 "i17290"
                                                 "i17288"
                                                 "i17286"
                                                 "i17284"
                                                 "i17282"
                                                 "i17280"
                                                 "i17278"
                                                 "i17276"
                                                 "i17274"
                                                 "i17272"
                                                 "i17270"
                                                 "i17268"
                                                 "i17266"
                                                 "i17264"
                                                 "i17262"
                                                 "i17260"
                                                 "i17258"
                                                 "i17256"
                                                 "i17254"
                                                 "i17252"
                                                 "i17250"
                                                 "i17248"
                                                 "i17246"
                                                 "i17244"
                                                 "i17242"
                                                 "i17240"
                                                 "i17238"
                                                 "i17236"
                                                 "i17234"
                                                 "i17232"
                                                 "i17230"
                                                 "i17228"
                                                 "i17227"
                                                 "i17225"
                                                 "i17223"
                                                 "i17221"
                                                 "i17219"
                                                 "i17217"
                                                 "i17215"
                                                 "i17213"
                                                 "i17211"
                                                 "i17209"
                                                 "i17206"
                                                 "i17204"
                                                 "i17202"
                                                 "i17200"
                                                 "i17198"
                                                 "i17196"
                                                 "i17194"
                                                 "i17192"
                                                 "i17190"
                                                 "i17188"
                                                 "i17186"
                                                 "i17184"
                                                 "i17182"
                                                 "i17180"
                                                 "i17178"
                                                 "i17176"
                                                 "i17174"
                                                 "i17172"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors
                                                  and-map*)
                                                ((top) (top) (top) (top))
                                                ("i16974"
                                                 "i16973"
                                                 "i16972"
                                                 "i16970")))
                                             (hygiene guile)))
                                      'load
                                      (if (#{free-id=?\ 17374}#
                                            #{x\ 18454}#
                                            '#(syntax-object
                                               eval
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i18453"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f when-list situations)
                                                  #((top) (top) (top))
                                                  #("i18447"
                                                    "i18448"
                                                    "i18449"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e when-list w)
                                                  #((top) (top) (top))
                                                  #("i18444"
                                                    "i18445"
                                                    "i18446"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    chi-lambda-case
                                                    lambda*-formals
                                                    chi-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    chi-void
                                                    eval-local-transformer
                                                    chi-local-syntax
                                                    chi-body
                                                    chi-macro
                                                    chi-application
                                                    chi-expr
                                                    chi
                                                    chi-top
                                                    syntax-type
                                                    chi-when-list
                                                    chi-install-global
                                                    chi-top-sequence
                                                    chi-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i17429"
                                                   "i17427"
                                                   "i17425"
                                                   "i17423"
                                                   "i17421"
                                                   "i17419"
                                                   "i17417"
                                                   "i17415"
                                                   "i17413"
                                                   "i17411"
                                                   "i17409"
                                                   "i17407"
                                                   "i17405"
                                                   "i17403"
                                                   "i17401"
                                                   "i17399"
                                                   "i17397"
                                                   "i17395"
                                                   "i17393"
                                                   "i17391"
                                                   "i17389"
                                                   "i17387"
                                                   "i17385"
                                                   "i17383"
                                                   "i17381"
                                                   "i17379"
                                                   "i17377"
                                                   "i17375"
                                                   "i17373"
                                                   "i17371"
                                                   "i17369"
                                                   "i17367"
                                                   "i17365"
                                                   "i17363"
                                                   "i17361"
                                                   "i17359"
                                                   "i17358"
                                                   "i17357"
                                                   "i17355"
                                                   "i17354"
                                                   "i17353"
                                                   "i17352"
                                                   "i17351"
                                                   "i17349"
                                                   "i17347"
                                                   "i17345"
                                                   "i17343"
                                                   "i17341"
                                                   "i17339"
                                                   "i17337"
                                                   "i17335"
                                                   "i17332"
                                                   "i17330"
                                                   "i17329"
                                                   "i17328"
                                                   "i17327"
                                                   "i17326"
                                                   "i17325"
                                                   "i17323"
                                                   "i17321"
                                                   "i17319"
                                                   "i17317"
                                                   "i17316"
                                                   "i17314"
                                                   "i17312"
                                                   "i17310"
                                                   "i17308"
                                                   "i17306"
                                                   "i17304"
                                                   "i17302"
                                                   "i17301"
                                                   "i17299"
                                                   "i17297"
                                                   "i17296"
                                                   "i17295"
                                                   "i17293"
                                                   "i17292"
                                                   "i17290"
                                                   "i17288"
                                                   "i17286"
                                                   "i17284"
                                                   "i17282"
                                                   "i17280"
                                                   "i17278"
                                                   "i17276"
                                                   "i17274"
                                                   "i17272"
                                                   "i17270"
                                                   "i17268"
                                                   "i17266"
                                                   "i17264"
                                                   "i17262"
                                                   "i17260"
                                                   "i17258"
                                                   "i17256"
                                                   "i17254"
                                                   "i17252"
                                                   "i17250"
                                                   "i17248"
                                                   "i17246"
                                                   "i17244"
                                                   "i17242"
                                                   "i17240"
                                                   "i17238"
                                                   "i17236"
                                                   "i17234"
                                                   "i17232"
                                                   "i17230"
                                                   "i17228"
                                                   "i17227"
                                                   "i17225"
                                                   "i17223"
                                                   "i17221"
                                                   "i17219"
                                                   "i17217"
                                                   "i17215"
                                                   "i17213"
                                                   "i17211"
                                                   "i17209"
                                                   "i17206"
                                                   "i17204"
                                                   "i17202"
                                                   "i17200"
                                                   "i17198"
                                                   "i17196"
                                                   "i17194"
                                                   "i17192"
                                                   "i17190"
                                                   "i17188"
                                                   "i17186"
                                                   "i17184"
                                                   "i17182"
                                                   "i17180"
                                                   "i17178"
                                                   "i17176"
                                                   "i17174"
                                                   "i17172"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors
                                                    and-map*)
                                                  ((top) (top) (top) (top))
                                                  ("i16974"
                                                   "i16973"
                                                   "i16972"
                                                   "i16970")))
                                               (hygiene guile)))
                                        'eval
                                        (if (#{free-id=?\ 17374}#
                                              #{x\ 18454}#
                                              '#(syntax-object
                                                 expand
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i18453"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i18447"
                                                      "i18448"
                                                      "i18449"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i18444"
                                                      "i18445"
                                                      "i18446"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i17429"
                                                     "i17427"
                                                     "i17425"
                                                     "i17423"
                                                     "i17421"
                                                     "i17419"
                                                     "i17417"
                                                     "i17415"
                                                     "i17413"
                                                     "i17411"
                                                     "i17409"
                                                     "i17407"
                                                     "i17405"
                                                     "i17403"
                                                     "i17401"
                                                     "i17399"
                                                     "i17397"
                                                     "i17395"
                                                     "i17393"
                                                     "i17391"
                                                     "i17389"
                                                     "i17387"
                                                     "i17385"
                                                     "i17383"
                                                     "i17381"
                                                     "i17379"
                                                     "i17377"
                                                     "i17375"
                                                     "i17373"
                                                     "i17371"
                                                     "i17369"
                                                     "i17367"
                                                     "i17365"
                                                     "i17363"
                                                     "i17361"
                                                     "i17359"
                                                     "i17358"
                                                     "i17357"
                                                     "i17355"
                                                     "i17354"
                                                     "i17353"
                                                     "i17352"
                                                     "i17351"
                                                     "i17349"
                                                     "i17347"
                                                     "i17345"
                                                     "i17343"
                                                     "i17341"
                                                     "i17339"
                                                     "i17337"
                                                     "i17335"
                                                     "i17332"
                                                     "i17330"
                                                     "i17329"
                                                     "i17328"
                                                     "i17327"
                                                     "i17326"
                                                     "i17325"
                                                     "i17323"
                                                     "i17321"
                                                     "i17319"
                                                     "i17317"
                                                     "i17316"
                                                     "i17314"
                                                     "i17312"
                                                     "i17310"
                                                     "i17308"
                                                     "i17306"
                                                     "i17304"
                                                     "i17302"
                                                     "i17301"
                                                     "i17299"
                                                     "i17297"
                                                     "i17296"
                                                     "i17295"
                                                     "i17293"
                                                     "i17292"
                                                     "i17290"
                                                     "i17288"
                                                     "i17286"
                                                     "i17284"
                                                     "i17282"
                                                     "i17280"
                                                     "i17278"
                                                     "i17276"
                                                     "i17274"
                                                     "i17272"
                                                     "i17270"
                                                     "i17268"
                                                     "i17266"
                                                     "i17264"
                                                     "i17262"
                                                     "i17260"
                                                     "i17258"
                                                     "i17256"
                                                     "i17254"
                                                     "i17252"
                                                     "i17250"
                                                     "i17248"
                                                     "i17246"
                                                     "i17244"
                                                     "i17242"
                                                     "i17240"
                                                     "i17238"
                                                     "i17236"
                                                     "i17234"
                                                     "i17232"
                                                     "i17230"
                                                     "i17228"
                                                     "i17227"
                                                     "i17225"
                                                     "i17223"
                                                     "i17221"
                                                     "i17219"
                                                     "i17217"
                                                     "i17215"
                                                     "i17213"
                                                     "i17211"
                                                     "i17209"
                                                     "i17206"
                                                     "i17204"
                                                     "i17202"
                                                     "i17200"
                                                     "i17198"
                                                     "i17196"
                                                     "i17194"
                                                     "i17192"
                                                     "i17190"
                                                     "i17188"
                                                     "i17186"
                                                     "i17184"
                                                     "i17182"
                                                     "i17180"
                                                     "i17178"
                                                     "i17176"
                                                     "i17174"
                                                     "i17172"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i16974"
                                                     "i16973"
                                                     "i16972"
                                                     "i16970")))
                                                 (hygiene guile)))
                                          'expand
                                          (syntax-violation
                                            'eval-when
                                            "invalid situation"
                                            #{e\ 18441}#
                                            (#{wrap\ 17384}#
                                              #{x\ 18454}#
                                              #{w\ 18443}#
                                              #f))))))))
                              #{situations\ 18452}#))))))
               (begin
                 (#{f\ 18450}# #{when-list\ 18442}# (quote ()))))))
         (#{syntax-type\ 17396}#
           (lambda (#{e\ 18464}#
                    #{r\ 18465}#
                    #{w\ 18466}#
                    #{s\ 18467}#
                    #{rib\ 18468}#
                    #{mod\ 18469}#
                    #{for-car?\ 18470}#)
             (if (symbol? #{e\ 18464}#)
               (begin
                 (let ((#{n\ 18482}#
                         (#{id-var-name\ 17372}#
                           #{e\ 18464}#
                           #{w\ 18466}#)))
                   (begin
                     (let ((#{b\ 18484}#
                             (#{lookup\ 17309}#
                               #{n\ 18482}#
                               #{r\ 18465}#
                               #{mod\ 18469}#)))
                       (begin
                         (let ((#{type\ 18486}#
                                 (#{binding-type\ 17298}# #{b\ 18484}#)))
                           (if (eqv? #{type\ 18486}# (quote lexical))
                             (values
                               #{type\ 18486}#
                               (#{binding-value\ 17300}# #{b\ 18484}#)
                               #{e\ 18464}#
                               #{w\ 18466}#
                               #{s\ 18467}#
                               #{mod\ 18469}#)
                             (if (eqv? #{type\ 18486}# (quote global))
                               (values
                                 #{type\ 18486}#
                                 #{n\ 18482}#
                                 #{e\ 18464}#
                                 #{w\ 18466}#
                                 #{s\ 18467}#
                                 #{mod\ 18469}#)
                               (if (eqv? #{type\ 18486}# (quote macro))
                                 (if #{for-car?\ 18470}#
                                   (values
                                     #{type\ 18486}#
                                     (#{binding-value\ 17300}# #{b\ 18484}#)
                                     #{e\ 18464}#
                                     #{w\ 18466}#
                                     #{s\ 18467}#
                                     #{mod\ 18469}#)
                                   (#{syntax-type\ 17396}#
                                     (#{chi-macro\ 17406}#
                                       (#{binding-value\ 17300}# #{b\ 18484}#)
                                       #{e\ 18464}#
                                       #{r\ 18465}#
                                       #{w\ 18466}#
                                       #{s\ 18467}#
                                       #{rib\ 18468}#
                                       #{mod\ 18469}#)
                                     #{r\ 18465}#
                                     '(())
                                     #{s\ 18467}#
                                     #{rib\ 18468}#
                                     #{mod\ 18469}#
                                     #f))
                                 (values
                                   #{type\ 18486}#
                                   (#{binding-value\ 17300}# #{b\ 18484}#)
                                   #{e\ 18464}#
                                   #{w\ 18466}#
                                   #{s\ 18467}#
                                   #{mod\ 18469}#))))))))))
               (if (pair? #{e\ 18464}#)
                 (begin
                   (let ((#{first\ 18495}# (car #{e\ 18464}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 17396}#
                           #{first\ 18495}#
                           #{r\ 18465}#
                           #{w\ 18466}#
                           #{s\ 18467}#
                           #{rib\ 18468}#
                           #{mod\ 18469}#
                           #t))
                       (lambda (#{ftype\ 18496}#
                                #{fval\ 18497}#
                                #{fe\ 18498}#
                                #{fw\ 18499}#
                                #{fs\ 18500}#
                                #{fmod\ 18501}#)
                         (if (eqv? #{ftype\ 18496}# (quote lexical))
                           (values
                             'lexical-call
                             #{fval\ 18497}#
                             #{e\ 18464}#
                             #{w\ 18466}#
                             #{s\ 18467}#
                             #{mod\ 18469}#)
                           (if (eqv? #{ftype\ 18496}# (quote global))
                             (values
                               'global-call
                               (#{make-syntax-object\ 17277}#
                                 #{fval\ 18497}#
                                 #{w\ 18466}#
                                 #{fmod\ 18501}#)
                               #{e\ 18464}#
                               #{w\ 18466}#
                               #{s\ 18467}#
                               #{mod\ 18469}#)
                             (if (eqv? #{ftype\ 18496}# (quote macro))
                               (#{syntax-type\ 17396}#
                                 (#{chi-macro\ 17406}#
                                   #{fval\ 18497}#
                                   #{e\ 18464}#
                                   #{r\ 18465}#
                                   #{w\ 18466}#
                                   #{s\ 18467}#
                                   #{rib\ 18468}#
                                   #{mod\ 18469}#)
                                 #{r\ 18465}#
                                 '(())
                                 #{s\ 18467}#
                                 #{rib\ 18468}#
                                 #{mod\ 18469}#
                                 #{for-car?\ 18470}#)
                               (if (eqv? #{ftype\ 18496}# (quote module-ref))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 18497}#
                                       #{e\ 18464}#
                                       #{r\ 18465}#
                                       #{w\ 18466}#))
                                   (lambda (#{e\ 18513}#
                                            #{r\ 18514}#
                                            #{w\ 18515}#
                                            #{s\ 18516}#
                                            #{mod\ 18517}#)
                                     (#{syntax-type\ 17396}#
                                       #{e\ 18513}#
                                       #{r\ 18514}#
                                       #{w\ 18515}#
                                       #{s\ 18516}#
                                       #{rib\ 18468}#
                                       #{mod\ 18517}#
                                       #{for-car?\ 18470}#)))
                                 (if (eqv? #{ftype\ 18496}# (quote core))
                                   (values
                                     'core-form
                                     #{fval\ 18497}#
                                     #{e\ 18464}#
                                     #{w\ 18466}#
                                     #{s\ 18467}#
                                     #{mod\ 18469}#)
                                   (if (eqv? #{ftype\ 18496}#
                                             'local-syntax)
                                     (values
                                       'local-syntax-form
                                       #{fval\ 18497}#
                                       #{e\ 18464}#
                                       #{w\ 18466}#
                                       #{s\ 18467}#
                                       #{mod\ 18469}#)
                                     (if (eqv? #{ftype\ 18496}# (quote begin))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 18464}#
                                         #{w\ 18466}#
                                         #{s\ 18467}#
                                         #{mod\ 18469}#)
                                       (if (eqv? #{ftype\ 18496}#
                                                 'eval-when)
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 18464}#
                                           #{w\ 18466}#
                                           #{s\ 18467}#
                                           #{mod\ 18469}#)
                                         (if (eqv? #{ftype\ 18496}#
                                                   'define)
                                           (let ((#{tmp\ 18528}# #{e\ 18464}#))
                                             (let ((#{tmp\ 18529}#
                                                     ($sc-dispatch
                                                       #{tmp\ 18528}#
                                                       '(_ any any))))
                                               (if (if #{tmp\ 18529}#
                                                     (@apply
                                                       (lambda (#{name\ 18532}#
                                                                #{val\ 18533}#)
                                                         (#{id?\ 17315}#
                                                           #{name\ 18532}#))
                                                       #{tmp\ 18529}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name\ 18536}#
                                                            #{val\ 18537}#)
                                                     (values
                                                       'define-form
                                                       #{name\ 18536}#
                                                       #{val\ 18537}#
                                                       #{w\ 18466}#
                                                       #{s\ 18467}#
                                                       #{mod\ 18469}#))
                                                   #{tmp\ 18529}#)
                                                 (let ((#{tmp\ 18538}#
                                                         ($sc-dispatch
                                                           #{tmp\ 18528}#
                                                           '(_ (any . any)
                                                               any
                                                               .
                                                               each-any))))
                                                   (if (if #{tmp\ 18538}#
                                                         (@apply
                                                           (lambda (#{name\ 18543}#
                                                                    #{args\ 18544}#
                                                                    #{e1\ 18545}#
                                                                    #{e2\ 18546}#)
                                                             (if (#{id?\ 17315}#
                                                                   #{name\ 18543}#)
                                                               (#{valid-bound-ids?\ 17378}#
                                                                 (#{lambda-var-list\ 17430}#
                                                                   #{args\ 18544}#))
                                                               #f))
                                                           #{tmp\ 18538}#)
                                                         #f)
                                                     (@apply
                                                       (lambda (#{name\ 18553}#
                                                                #{args\ 18554}#
                                                                #{e1\ 18555}#
                                                                #{e2\ 18556}#)
                                                         (values
                                                           'define-form
                                                           (#{wrap\ 17384}#
                                                             #{name\ 18553}#
                                                             #{w\ 18466}#
                                                             #{mod\ 18469}#)
                                                           (#{decorate-source\ 17233}#
                                                             (cons '#(syntax-object
                                                                      lambda
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(name
                                                                           args
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i18549"
                                                                           "i18550"
                                                                           "i18551"
                                                                           "i18552"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(ftype
                                                                           fval
                                                                           fe
                                                                           fw
                                                                           fs
                                                                           fmod)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i18502"
                                                                           "i18503"
                                                                           "i18504"
                                                                           "i18505"
                                                                           "i18506"
                                                                           "i18507"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(first)
                                                                         #((top))
                                                                         #("i18494"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(e
                                                                           r
                                                                           w
                                                                           s
                                                                           rib
                                                                           mod
                                                                           for-car?)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i18471"
                                                                           "i18472"
                                                                           "i18473"
                                                                           "i18474"
                                                                           "i18475"
                                                                           "i18476"
                                                                           "i18477"))
                                                                       #(ribcage
                                                                         (lambda-var-list
                                                                           gen-var
                                                                           strip
                                                                           chi-lambda-case
                                                                           lambda*-formals
                                                                           chi-simple-lambda
                                                                           lambda-formals
                                                                           ellipsis?
                                                                           chi-void
                                                                           eval-local-transformer
                                                                           chi-local-syntax
                                                                           chi-body
                                                                           chi-macro
                                                                           chi-application
                                                                           chi-expr
                                                                           chi
                                                                           chi-top
                                                                           syntax-type
                                                                           chi-when-list
                                                                           chi-install-global
                                                                           chi-top-sequence
                                                                           chi-sequence
                                                                           source-wrap
                                                                           wrap
                                                                           bound-id-member?
                                                                           distinct-bound-ids?
                                                                           valid-bound-ids?
                                                                           bound-id=?
                                                                           free-id=?
                                                                           id-var-name
                                                                           same-marks?
                                                                           join-marks
                                                                           join-wraps
                                                                           smart-append
                                                                           make-binding-wrap
                                                                           extend-ribcage!
                                                                           make-empty-ribcage
                                                                           new-mark
                                                                           anti-mark
                                                                           the-anti-mark
                                                                           top-marked?
                                                                           top-wrap
                                                                           empty-wrap
                                                                           set-ribcage-labels!
                                                                           set-ribcage-marks!
                                                                           set-ribcage-symnames!
                                                                           ribcage-labels
                                                                           ribcage-marks
                                                                           ribcage-symnames
                                                                           ribcage?
                                                                           make-ribcage
                                                                           gen-labels
                                                                           gen-label
                                                                           make-rename
                                                                           rename-marks
                                                                           rename-new
                                                                           rename-old
                                                                           subst-rename?
                                                                           wrap-subst
                                                                           wrap-marks
                                                                           make-wrap
                                                                           id-sym-name&marks
                                                                           id-sym-name
                                                                           id?
                                                                           nonsymbol-id?
                                                                           global-extend
                                                                           lookup
                                                                           macros-only-env
                                                                           extend-var-env
                                                                           extend-env
                                                                           null-env
                                                                           binding-value
                                                                           binding-type
                                                                           make-binding
                                                                           arg-check
                                                                           source-annotation
                                                                           no-source
                                                                           set-syntax-object-module!
                                                                           set-syntax-object-wrap!
                                                                           set-syntax-object-expression!
                                                                           syntax-object-module
                                                                           syntax-object-wrap
                                                                           syntax-object-expression
                                                                           syntax-object?
                                                                           make-syntax-object
                                                                           build-lexical-var
                                                                           build-letrec
                                                                           build-named-let
                                                                           build-let
                                                                           build-sequence
                                                                           build-data
                                                                           build-primref
                                                                           build-lambda-case
                                                                           build-case-lambda
                                                                           build-simple-lambda
                                                                           build-global-definition
                                                                           build-global-assignment
                                                                           build-global-reference
                                                                           analyze-variable
                                                                           build-lexical-assignment
                                                                           build-lexical-reference
                                                                           build-dynlet
                                                                           build-conditional
                                                                           build-application
                                                                           build-void
                                                                           maybe-name-value!
                                                                           decorate-source
                                                                           get-global-definition-hook
                                                                           put-global-definition-hook
                                                                           gensym-hook
                                                                           local-eval-hook
                                                                           top-level-eval-hook
                                                                           fx<
                                                                           fx=
                                                                           fx-
                                                                           fx+
                                                                           set-lambda-meta!
                                                                           lambda-meta
                                                                           lambda?
                                                                           make-dynlet
                                                                           make-letrec
                                                                           make-let
                                                                           make-lambda-case
                                                                           make-lambda
                                                                           make-sequence
                                                                           make-application
                                                                           make-conditional
                                                                           make-toplevel-define
                                                                           make-toplevel-set
                                                                           make-toplevel-ref
                                                                           make-module-set
                                                                           make-module-ref
                                                                           make-lexical-set
                                                                           make-lexical-ref
                                                                           make-primitive-ref
                                                                           make-const
                                                                           make-void)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i17429"
                                                                          "i17427"
                                                                          "i17425"
                                                                          "i17423"
                                                                          "i17421"
                                                                          "i17419"
                                                                          "i17417"
                                                                          "i17415"
                                                                          "i17413"
                                                                          "i17411"
                                                                          "i17409"
                                                                          "i17407"
                                                                          "i17405"
                                                                          "i17403"
                                                                          "i17401"
                                                                          "i17399"
                                                                          "i17397"
                                                                          "i17395"
                                                                          "i17393"
                                                                          "i17391"
                                                                          "i17389"
                                                                          "i17387"
                                                                          "i17385"
                                                                          "i17383"
                                                                          "i17381"
                                                                          "i17379"
                                                                          "i17377"
                                                                          "i17375"
                                                                          "i17373"
                                                                          "i17371"
                                                                          "i17369"
                                                                          "i17367"
                                                                          "i17365"
                                                                          "i17363"
                                                                          "i17361"
                                                                          "i17359"
                                                                          "i17358"
                                                                          "i17357"
                                                                          "i17355"
                                                                          "i17354"
                                                                          "i17353"
                                                                          "i17352"
                                                                          "i17351"
                                                                          "i17349"
                                                                          "i17347"
                                                                          "i17345"
                                                                          "i17343"
                                                                          "i17341"
                                                                          "i17339"
                                                                          "i17337"
                                                                          "i17335"
                                                                          "i17332"
                                                                          "i17330"
                                                                          "i17329"
                                                                          "i17328"
                                                                          "i17327"
                                                                          "i17326"
                                                                          "i17325"
                                                                          "i17323"
                                                                          "i17321"
                                                                          "i17319"
                                                                          "i17317"
                                                                          "i17316"
                                                                          "i17314"
                                                                          "i17312"
                                                                          "i17310"
                                                                          "i17308"
                                                                          "i17306"
                                                                          "i17304"
                                                                          "i17302"
                                                                          "i17301"
                                                                          "i17299"
                                                                          "i17297"
                                                                          "i17296"
                                                                          "i17295"
                                                                          "i17293"
                                                                          "i17292"
                                                                          "i17290"
                                                                          "i17288"
                                                                          "i17286"
                                                                          "i17284"
                                                                          "i17282"
                                                                          "i17280"
                                                                          "i17278"
                                                                          "i17276"
                                                                          "i17274"
                                                                          "i17272"
                                                                          "i17270"
                                                                          "i17268"
                                                                          "i17266"
                                                                          "i17264"
                                                                          "i17262"
                                                                          "i17260"
                                                                          "i17258"
                                                                          "i17256"
                                                                          "i17254"
                                                                          "i17252"
                                                                          "i17250"
                                                                          "i17248"
                                                                          "i17246"
                                                                          "i17244"
                                                                          "i17242"
                                                                          "i17240"
                                                                          "i17238"
                                                                          "i17236"
                                                                          "i17234"
                                                                          "i17232"
                                                                          "i17230"
                                                                          "i17228"
                                                                          "i17227"
                                                                          "i17225"
                                                                          "i17223"
                                                                          "i17221"
                                                                          "i17219"
                                                                          "i17217"
                                                                          "i17215"
                                                                          "i17213"
                                                                          "i17211"
                                                                          "i17209"
                                                                          "i17206"
                                                                          "i17204"
                                                                          "i17202"
                                                                          "i17200"
                                                                          "i17198"
                                                                          "i17196"
                                                                          "i17194"
                                                                          "i17192"
                                                                          "i17190"
                                                                          "i17188"
                                                                          "i17186"
                                                                          "i17184"
                                                                          "i17182"
                                                                          "i17180"
                                                                          "i17178"
                                                                          "i17176"
                                                                          "i17174"
                                                                          "i17172"))
                                                                       #(ribcage
                                                                         (define-structure
                                                                           define-expansion-accessors
                                                                           define-expansion-constructors
                                                                           and-map*)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i16974"
                                                                          "i16973"
                                                                          "i16972"
                                                                          "i16970")))
                                                                      (hygiene
                                                                        guile))
                                                                   (#{wrap\ 17384}#
                                                                     (cons #{args\ 18554}#
                                                                           (cons #{e1\ 18555}#
                                                                                 #{e2\ 18556}#))
                                                                     #{w\ 18466}#
                                                                     #{mod\ 18469}#))
                                                             #{s\ 18467}#)
                                                           '(())
                                                           #{s\ 18467}#
                                                           #{mod\ 18469}#))
                                                       #{tmp\ 18538}#)
                                                     (let ((#{tmp\ 18559}#
                                                             ($sc-dispatch
                                                               #{tmp\ 18528}#
                                                               '(_ any))))
                                                       (if (if #{tmp\ 18559}#
                                                             (@apply
                                                               (lambda (#{name\ 18561}#)
                                                                 (#{id?\ 17315}#
                                                                   #{name\ 18561}#))
                                                               #{tmp\ 18559}#)
                                                             #f)
                                                         (@apply
                                                           (lambda (#{name\ 18563}#)
                                                             (values
                                                               'define-form
                                                               (#{wrap\ 17384}#
                                                                 #{name\ 18563}#
                                                                 #{w\ 18466}#
                                                                 #{mod\ 18469}#)
                                                               '(#(syntax-object
                                                                   if
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i18562"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i18502"
                                                                        "i18503"
                                                                        "i18504"
                                                                        "i18505"
                                                                        "i18506"
                                                                        "i18507"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i18494"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i18471"
                                                                        "i18472"
                                                                        "i18473"
                                                                        "i18474"
                                                                        "i18475"
                                                                        "i18476"
                                                                        "i18477"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        chi-top
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i17429"
                                                                       "i17427"
                                                                       "i17425"
                                                                       "i17423"
                                                                       "i17421"
                                                                       "i17419"
                                                                       "i17417"
                                                                       "i17415"
                                                                       "i17413"
                                                                       "i17411"
                                                                       "i17409"
                                                                       "i17407"
                                                                       "i17405"
                                                                       "i17403"
                                                                       "i17401"
                                                                       "i17399"
                                                                       "i17397"
                                                                       "i17395"
                                                                       "i17393"
                                                                       "i17391"
                                                                       "i17389"
                                                                       "i17387"
                                                                       "i17385"
                                                                       "i17383"
                                                                       "i17381"
                                                                       "i17379"
                                                                       "i17377"
                                                                       "i17375"
                                                                       "i17373"
                                                                       "i17371"
                                                                       "i17369"
                                                                       "i17367"
                                                                       "i17365"
                                                                       "i17363"
                                                                       "i17361"
                                                                       "i17359"
                                                                       "i17358"
                                                                       "i17357"
                                                                       "i17355"
                                                                       "i17354"
                                                                       "i17353"
                                                                       "i17352"
                                                                       "i17351"
                                                                       "i17349"
                                                                       "i17347"
                                                                       "i17345"
                                                                       "i17343"
                                                                       "i17341"
                                                                       "i17339"
                                                                       "i17337"
                                                                       "i17335"
                                                                       "i17332"
                                                                       "i17330"
                                                                       "i17329"
                                                                       "i17328"
                                                                       "i17327"
                                                                       "i17326"
                                                                       "i17325"
                                                                       "i17323"
                                                                       "i17321"
                                                                       "i17319"
                                                                       "i17317"
                                                                       "i17316"
                                                                       "i17314"
                                                                       "i17312"
                                                                       "i17310"
                                                                       "i17308"
                                                                       "i17306"
                                                                       "i17304"
                                                                       "i17302"
                                                                       "i17301"
                                                                       "i17299"
                                                                       "i17297"
                                                                       "i17296"
                                                                       "i17295"
                                                                       "i17293"
                                                                       "i17292"
                                                                       "i17290"
                                                                       "i17288"
                                                                       "i17286"
                                                                       "i17284"
                                                                       "i17282"
                                                                       "i17280"
                                                                       "i17278"
                                                                       "i17276"
                                                                       "i17274"
                                                                       "i17272"
                                                                       "i17270"
                                                                       "i17268"
                                                                       "i17266"
                                                                       "i17264"
                                                                       "i17262"
                                                                       "i17260"
                                                                       "i17258"
                                                                       "i17256"
                                                                       "i17254"
                                                                       "i17252"
                                                                       "i17250"
                                                                       "i17248"
                                                                       "i17246"
                                                                       "i17244"
                                                                       "i17242"
                                                                       "i17240"
                                                                       "i17238"
                                                                       "i17236"
                                                                       "i17234"
                                                                       "i17232"
                                                                       "i17230"
                                                                       "i17228"
                                                                       "i17227"
                                                                       "i17225"
                                                                       "i17223"
                                                                       "i17221"
                                                                       "i17219"
                                                                       "i17217"
                                                                       "i17215"
                                                                       "i17213"
                                                                       "i17211"
                                                                       "i17209"
                                                                       "i17206"
                                                                       "i17204"
                                                                       "i17202"
                                                                       "i17200"
                                                                       "i17198"
                                                                       "i17196"
                                                                       "i17194"
                                                                       "i17192"
                                                                       "i17190"
                                                                       "i17188"
                                                                       "i17186"
                                                                       "i17184"
                                                                       "i17182"
                                                                       "i17180"
                                                                       "i17178"
                                                                       "i17176"
                                                                       "i17174"
                                                                       "i17172"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i16974"
                                                                       "i16973"
                                                                       "i16972"
                                                                       "i16970")))
                                                                   (hygiene
                                                                     guile))
                                                                 #(syntax-object
                                                                   #f
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i18562"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i18502"
                                                                        "i18503"
                                                                        "i18504"
                                                                        "i18505"
                                                                        "i18506"
                                                                        "i18507"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i18494"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i18471"
                                                                        "i18472"
                                                                        "i18473"
                                                                        "i18474"
                                                                        "i18475"
                                                                        "i18476"
                                                                        "i18477"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        chi-top
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i17429"
                                                                       "i17427"
                                                                       "i17425"
                                                                       "i17423"
                                                                       "i17421"
                                                                       "i17419"
                                                                       "i17417"
                                                                       "i17415"
                                                                       "i17413"
                                                                       "i17411"
                                                                       "i17409"
                                                                       "i17407"
                                                                       "i17405"
                                                                       "i17403"
                                                                       "i17401"
                                                                       "i17399"
                                                                       "i17397"
                                                                       "i17395"
                                                                       "i17393"
                                                                       "i17391"
                                                                       "i17389"
                                                                       "i17387"
                                                                       "i17385"
                                                                       "i17383"
                                                                       "i17381"
                                                                       "i17379"
                                                                       "i17377"
                                                                       "i17375"
                                                                       "i17373"
                                                                       "i17371"
                                                                       "i17369"
                                                                       "i17367"
                                                                       "i17365"
                                                                       "i17363"
                                                                       "i17361"
                                                                       "i17359"
                                                                       "i17358"
                                                                       "i17357"
                                                                       "i17355"
                                                                       "i17354"
                                                                       "i17353"
                                                                       "i17352"
                                                                       "i17351"
                                                                       "i17349"
                                                                       "i17347"
                                                                       "i17345"
                                                                       "i17343"
                                                                       "i17341"
                                                                       "i17339"
                                                                       "i17337"
                                                                       "i17335"
                                                                       "i17332"
                                                                       "i17330"
                                                                       "i17329"
                                                                       "i17328"
                                                                       "i17327"
                                                                       "i17326"
                                                                       "i17325"
                                                                       "i17323"
                                                                       "i17321"
                                                                       "i17319"
                                                                       "i17317"
                                                                       "i17316"
                                                                       "i17314"
                                                                       "i17312"
                                                                       "i17310"
                                                                       "i17308"
                                                                       "i17306"
                                                                       "i17304"
                                                                       "i17302"
                                                                       "i17301"
                                                                       "i17299"
                                                                       "i17297"
                                                                       "i17296"
                                                                       "i17295"
                                                                       "i17293"
                                                                       "i17292"
                                                                       "i17290"
                                                                       "i17288"
                                                                       "i17286"
                                                                       "i17284"
                                                                       "i17282"
                                                                       "i17280"
                                                                       "i17278"
                                                                       "i17276"
                                                                       "i17274"
                                                                       "i17272"
                                                                       "i17270"
                                                                       "i17268"
                                                                       "i17266"
                                                                       "i17264"
                                                                       "i17262"
                                                                       "i17260"
                                                                       "i17258"
                                                                       "i17256"
                                                                       "i17254"
                                                                       "i17252"
                                                                       "i17250"
                                                                       "i17248"
                                                                       "i17246"
                                                                       "i17244"
                                                                       "i17242"
                                                                       "i17240"
                                                                       "i17238"
                                                                       "i17236"
                                                                       "i17234"
                                                                       "i17232"
                                                                       "i17230"
                                                                       "i17228"
                                                                       "i17227"
                                                                       "i17225"
                                                                       "i17223"
                                                                       "i17221"
                                                                       "i17219"
                                                                       "i17217"
                                                                       "i17215"
                                                                       "i17213"
                                                                       "i17211"
                                                                       "i17209"
                                                                       "i17206"
                                                                       "i17204"
                                                                       "i17202"
                                                                       "i17200"
                                                                       "i17198"
                                                                       "i17196"
                                                                       "i17194"
                                                                       "i17192"
                                                                       "i17190"
                                                                       "i17188"
                                                                       "i17186"
                                                                       "i17184"
                                                                       "i17182"
                                                                       "i17180"
                                                                       "i17178"
                                                                       "i17176"
                                                                       "i17174"
                                                                       "i17172"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i16974"
                                                                       "i16973"
                                                                       "i16972"
                                                                       "i16970")))
                                                                   (hygiene
                                                                     guile))
                                                                 #(syntax-object
                                                                   #f
                                                                   ((top)
                                                                    #(ribcage
                                                                      #(name)
                                                                      #((top))
                                                                      #("i18562"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(ftype
                                                                        fval
                                                                        fe
                                                                        fw
                                                                        fs
                                                                        fmod)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i18502"
                                                                        "i18503"
                                                                        "i18504"
                                                                        "i18505"
                                                                        "i18506"
                                                                        "i18507"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(first)
                                                                      #((top))
                                                                      #("i18494"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(e
                                                                        r
                                                                        w
                                                                        s
                                                                        rib
                                                                        mod
                                                                        for-car?)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i18471"
                                                                        "i18472"
                                                                        "i18473"
                                                                        "i18474"
                                                                        "i18475"
                                                                        "i18476"
                                                                        "i18477"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        chi-lambda-case
                                                                        lambda*-formals
                                                                        chi-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        chi-void
                                                                        eval-local-transformer
                                                                        chi-local-syntax
                                                                        chi-body
                                                                        chi-macro
                                                                        chi-application
                                                                        chi-expr
                                                                        chi
                                                                        chi-top
                                                                        syntax-type
                                                                        chi-when-list
                                                                        chi-install-global
                                                                        chi-top-sequence
                                                                        chi-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i17429"
                                                                       "i17427"
                                                                       "i17425"
                                                                       "i17423"
                                                                       "i17421"
                                                                       "i17419"
                                                                       "i17417"
                                                                       "i17415"
                                                                       "i17413"
                                                                       "i17411"
                                                                       "i17409"
                                                                       "i17407"
                                                                       "i17405"
                                                                       "i17403"
                                                                       "i17401"
                                                                       "i17399"
                                                                       "i17397"
                                                                       "i17395"
                                                                       "i17393"
                                                                       "i17391"
                                                                       "i17389"
                                                                       "i17387"
                                                                       "i17385"
                                                                       "i17383"
                                                                       "i17381"
                                                                       "i17379"
                                                                       "i17377"
                                                                       "i17375"
                                                                       "i17373"
                                                                       "i17371"
                                                                       "i17369"
                                                                       "i17367"
                                                                       "i17365"
                                                                       "i17363"
                                                                       "i17361"
                                                                       "i17359"
                                                                       "i17358"
                                                                       "i17357"
                                                                       "i17355"
                                                                       "i17354"
                                                                       "i17353"
                                                                       "i17352"
                                                                       "i17351"
                                                                       "i17349"
                                                                       "i17347"
                                                                       "i17345"
                                                                       "i17343"
                                                                       "i17341"
                                                                       "i17339"
                                                                       "i17337"
                                                                       "i17335"
                                                                       "i17332"
                                                                       "i17330"
                                                                       "i17329"
                                                                       "i17328"
                                                                       "i17327"
                                                                       "i17326"
                                                                       "i17325"
                                                                       "i17323"
                                                                       "i17321"
                                                                       "i17319"
                                                                       "i17317"
                                                                       "i17316"
                                                                       "i17314"
                                                                       "i17312"
                                                                       "i17310"
                                                                       "i17308"
                                                                       "i17306"
                                                                       "i17304"
                                                                       "i17302"
                                                                       "i17301"
                                                                       "i17299"
                                                                       "i17297"
                                                                       "i17296"
                                                                       "i17295"
                                                                       "i17293"
                                                                       "i17292"
                                                                       "i17290"
                                                                       "i17288"
                                                                       "i17286"
                                                                       "i17284"
                                                                       "i17282"
                                                                       "i17280"
                                                                       "i17278"
                                                                       "i17276"
                                                                       "i17274"
                                                                       "i17272"
                                                                       "i17270"
                                                                       "i17268"
                                                                       "i17266"
                                                                       "i17264"
                                                                       "i17262"
                                                                       "i17260"
                                                                       "i17258"
                                                                       "i17256"
                                                                       "i17254"
                                                                       "i17252"
                                                                       "i17250"
                                                                       "i17248"
                                                                       "i17246"
                                                                       "i17244"
                                                                       "i17242"
                                                                       "i17240"
                                                                       "i17238"
                                                                       "i17236"
                                                                       "i17234"
                                                                       "i17232"
                                                                       "i17230"
                                                                       "i17228"
                                                                       "i17227"
                                                                       "i17225"
                                                                       "i17223"
                                                                       "i17221"
                                                                       "i17219"
                                                                       "i17217"
                                                                       "i17215"
                                                                       "i17213"
                                                                       "i17211"
                                                                       "i17209"
                                                                       "i17206"
                                                                       "i17204"
                                                                       "i17202"
                                                                       "i17200"
                                                                       "i17198"
                                                                       "i17196"
                                                                       "i17194"
                                                                       "i17192"
                                                                       "i17190"
                                                                       "i17188"
                                                                       "i17186"
                                                                       "i17184"
                                                                       "i17182"
                                                                       "i17180"
                                                                       "i17178"
                                                                       "i17176"
                                                                       "i17174"
                                                                       "i17172"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors
                                                                        and-map*)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("i16974"
                                                                       "i16973"
                                                                       "i16972"
                                                                       "i16970")))
                                                                   (hygiene
                                                                     guile)))
                                                               '(())
                                                               #{s\ 18467}#
                                                               #{mod\ 18469}#))
                                                           #{tmp\ 18559}#)
                                                         (syntax-violation
                                                           #f
                                                           "source expression failed to match any pattern"
                                                           #{tmp\ 18528}#))))))))
                                           (if (eqv? #{ftype\ 18496}#
                                                     'define-syntax)
                                             (let ((#{tmp\ 18566}#
                                                     #{e\ 18464}#))
                                               (let ((#{tmp\ 18567}#
                                                       ($sc-dispatch
                                                         #{tmp\ 18566}#
                                                         '(_ any any))))
                                                 (if (if #{tmp\ 18567}#
                                                       (@apply
                                                         (lambda (#{name\ 18570}#
                                                                  #{val\ 18571}#)
                                                           (#{id?\ 17315}#
                                                             #{name\ 18570}#))
                                                         #{tmp\ 18567}#)
                                                       #f)
                                                   (@apply
                                                     (lambda (#{name\ 18574}#
                                                              #{val\ 18575}#)
                                                       (values
                                                         'define-syntax-form
                                                         #{name\ 18574}#
                                                         #{val\ 18575}#
                                                         #{w\ 18466}#
                                                         #{s\ 18467}#
                                                         #{mod\ 18469}#))
                                                     #{tmp\ 18567}#)
                                                   (syntax-violation
                                                     #f
                                                     "source expression failed to match any pattern"
                                                     #{tmp\ 18566}#))))
                                             (values
                                               'call
                                               #f
                                               #{e\ 18464}#
                                               #{w\ 18466}#
                                               #{s\ 18467}#
                                               #{mod\ 18469}#)))))))))))))))
                 (if (#{syntax-object?\ 17279}# #{e\ 18464}#)
                   (#{syntax-type\ 17396}#
                     (#{syntax-object-expression\ 17281}#
                       #{e\ 18464}#)
                     #{r\ 18465}#
                     (#{join-wraps\ 17366}#
                       #{w\ 18466}#
                       (#{syntax-object-wrap\ 17283}# #{e\ 18464}#))
                     (begin
                       (let ((#{t\ 18581}#
                               (#{source-annotation\ 17294}# #{e\ 18464}#)))
                         (if #{t\ 18581}# #{t\ 18581}# #{s\ 18467}#)))
                     #{rib\ 18468}#
                     (begin
                       (let ((#{t\ 18585}#
                               (#{syntax-object-module\ 17285}# #{e\ 18464}#)))
                         (if #{t\ 18585}# #{t\ 18585}# #{mod\ 18469}#)))
                     #{for-car?\ 18470}#)
                   (if (self-evaluating? #{e\ 18464}#)
                     (values
                       'constant
                       #f
                       #{e\ 18464}#
                       #{w\ 18466}#
                       #{s\ 18467}#
                       #{mod\ 18469}#)
                     (values
                       'other
                       #f
                       #{e\ 18464}#
                       #{w\ 18466}#
                       #{s\ 18467}#
                       #{mod\ 18469}#)))))))
         (#{chi-top\ 17398}#
           (lambda (#{e\ 18590}#
                    #{r\ 18591}#
                    #{w\ 18592}#
                    #{m\ 18593}#
                    #{esew\ 18594}#
                    #{mod\ 18595}#)
             (call-with-values
               (lambda ()
                 (#{syntax-type\ 17396}#
                   #{e\ 18590}#
                   #{r\ 18591}#
                   #{w\ 18592}#
                   (#{source-annotation\ 17294}# #{e\ 18590}#)
                   #f
                   #{mod\ 18595}#
                   #f))
               (lambda (#{type\ 18616}#
                        #{value\ 18617}#
                        #{e\ 18618}#
                        #{w\ 18619}#
                        #{s\ 18620}#
                        #{mod\ 18621}#)
                 (if (eqv? #{type\ 18616}# (quote begin-form))
                   (let ((#{tmp\ 18629}# #{e\ 18618}#))
                     (let ((#{tmp\ 18630}#
                             ($sc-dispatch #{tmp\ 18629}# (quote (_)))))
                       (if #{tmp\ 18630}#
                         (@apply
                           (lambda () (#{chi-void\ 17414}#))
                           #{tmp\ 18630}#)
                         (let ((#{tmp\ 18631}#
                                 ($sc-dispatch
                                   #{tmp\ 18629}#
                                   '(_ any . each-any))))
                           (if #{tmp\ 18631}#
                             (@apply
                               (lambda (#{e1\ 18634}# #{e2\ 18635}#)
                                 (#{chi-top-sequence\ 17390}#
                                   (cons #{e1\ 18634}# #{e2\ 18635}#)
                                   #{r\ 18591}#
                                   #{w\ 18619}#
                                   #{s\ 18620}#
                                   #{m\ 18593}#
                                   #{esew\ 18594}#
                                   #{mod\ 18621}#))
                               #{tmp\ 18631}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp\ 18629}#))))))
                   (if (eqv? #{type\ 18616}# (quote local-syntax-form))
                     (#{chi-local-syntax\ 17410}#
                       #{value\ 18617}#
                       #{e\ 18618}#
                       #{r\ 18591}#
                       #{w\ 18619}#
                       #{s\ 18620}#
                       #{mod\ 18621}#
                       (lambda (#{body\ 18638}#
                                #{r\ 18639}#
                                #{w\ 18640}#
                                #{s\ 18641}#
                                #{mod\ 18642}#)
                         (#{chi-top-sequence\ 17390}#
                           #{body\ 18638}#
                           #{r\ 18639}#
                           #{w\ 18640}#
                           #{s\ 18641}#
                           #{m\ 18593}#
                           #{esew\ 18594}#
                           #{mod\ 18642}#)))
                     (if (eqv? #{type\ 18616}# (quote eval-when-form))
                       (let ((#{tmp\ 18649}# #{e\ 18618}#))
                         (let ((#{tmp\ 18650}#
                                 ($sc-dispatch
                                   #{tmp\ 18649}#
                                   '(_ each-any any . each-any))))
                           (if #{tmp\ 18650}#
                             (@apply
                               (lambda (#{x\ 18654}#
                                        #{e1\ 18655}#
                                        #{e2\ 18656}#)
                                 (begin
                                   (let ((#{when-list\ 18659}#
                                           (#{chi-when-list\ 17394}#
                                             #{e\ 18618}#
                                             #{x\ 18654}#
                                             #{w\ 18619}#))
                                         (#{body\ 18660}#
                                           (cons #{e1\ 18655}# #{e2\ 18656}#)))
                                     (if (eq? #{m\ 18593}# (quote e))
                                       (if (memq 'eval
                                                 #{when-list\ 18659}#)
                                         (#{chi-top-sequence\ 17390}#
                                           #{body\ 18660}#
                                           #{r\ 18591}#
                                           #{w\ 18619}#
                                           #{s\ 18620}#
                                           (if (memq 'expand
                                                     #{when-list\ 18659}#)
                                             'c&e
                                             'e)
                                           '(eval)
                                           #{mod\ 18621}#)
                                         (begin
                                           (if (memq 'expand
                                                     #{when-list\ 18659}#)
                                             (#{top-level-eval-hook\ 17224}#
                                               (#{chi-top-sequence\ 17390}#
                                                 #{body\ 18660}#
                                                 #{r\ 18591}#
                                                 #{w\ 18619}#
                                                 #{s\ 18620}#
                                                 'e
                                                 '(eval)
                                                 #{mod\ 18621}#)
                                               #{mod\ 18621}#))
                                           (#{chi-void\ 17414}#)))
                                       (if (memq 'load
                                                 #{when-list\ 18659}#)
                                         (if (begin
                                               (let ((#{t\ 18669}#
                                                       (memq 'compile
                                                             #{when-list\ 18659}#)))
                                                 (if #{t\ 18669}#
                                                   #{t\ 18669}#
                                                   (begin
                                                     (let ((#{t\ 18672}#
                                                             (memq 'expand
                                                                   #{when-list\ 18659}#)))
                                                       (if #{t\ 18672}#
                                                         #{t\ 18672}#
                                                         (if (eq? #{m\ 18593}#
                                                                  'c&e)
                                                           (memq 'eval
                                                                 #{when-list\ 18659}#)
                                                           #f)))))))
                                           (#{chi-top-sequence\ 17390}#
                                             #{body\ 18660}#
                                             #{r\ 18591}#
                                             #{w\ 18619}#
                                             #{s\ 18620}#
                                             'c&e
                                             '(compile load)
                                             #{mod\ 18621}#)
                                           (if (if (eq? #{m\ 18593}# (quote c))
                                                 #t
                                                 (eq? #{m\ 18593}#
                                                      'c&e))
                                             (#{chi-top-sequence\ 17390}#
                                               #{body\ 18660}#
                                               #{r\ 18591}#
                                               #{w\ 18619}#
                                               #{s\ 18620}#
                                               'c
                                               '(load)
                                               #{mod\ 18621}#)
                                             (#{chi-void\ 17414}#)))
                                         (if (begin
                                               (let ((#{t\ 18680}#
                                                       (memq 'compile
                                                             #{when-list\ 18659}#)))
                                                 (if #{t\ 18680}#
                                                   #{t\ 18680}#
                                                   (begin
                                                     (let ((#{t\ 18683}#
                                                             (memq 'expand
                                                                   #{when-list\ 18659}#)))
                                                       (if #{t\ 18683}#
                                                         #{t\ 18683}#
                                                         (if (eq? #{m\ 18593}#
                                                                  'c&e)
                                                           (memq 'eval
                                                                 #{when-list\ 18659}#)
                                                           #f)))))))
                                           (begin
                                             (#{top-level-eval-hook\ 17224}#
                                               (#{chi-top-sequence\ 17390}#
                                                 #{body\ 18660}#
                                                 #{r\ 18591}#
                                                 #{w\ 18619}#
                                                 #{s\ 18620}#
                                                 'e
                                                 '(eval)
                                                 #{mod\ 18621}#)
                                               #{mod\ 18621}#)
                                             (#{chi-void\ 17414}#))
                                           (#{chi-void\ 17414}#)))))))
                               #{tmp\ 18650}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp\ 18649}#))))
                       (if (eqv? #{type\ 18616}# (quote define-syntax-form))
                         (begin
                           (let ((#{n\ 18691}#
                                   (#{id-var-name\ 17372}#
                                     #{value\ 18617}#
                                     #{w\ 18619}#))
                                 (#{r\ 18692}#
                                   (#{macros-only-env\ 17307}# #{r\ 18591}#)))
                             (if (eqv? #{m\ 18593}# (quote c))
                               (if (memq (quote compile) #{esew\ 18594}#)
                                 (begin
                                   (let ((#{e\ 18695}#
                                           (#{chi-install-global\ 17392}#
                                             #{n\ 18691}#
                                             (#{chi\ 17400}#
                                               #{e\ 18618}#
                                               #{r\ 18692}#
                                               #{w\ 18619}#
                                               #{mod\ 18621}#))))
                                     (begin
                                       (#{top-level-eval-hook\ 17224}#
                                         #{e\ 18695}#
                                         #{mod\ 18621}#)
                                       (if (memq (quote load) #{esew\ 18594}#)
                                         #{e\ 18695}#
                                         (#{chi-void\ 17414}#)))))
                                 (if (memq (quote load) #{esew\ 18594}#)
                                   (#{chi-install-global\ 17392}#
                                     #{n\ 18691}#
                                     (#{chi\ 17400}#
                                       #{e\ 18618}#
                                       #{r\ 18692}#
                                       #{w\ 18619}#
                                       #{mod\ 18621}#))
                                   (#{chi-void\ 17414}#)))
                               (if (eqv? #{m\ 18593}# (quote c&e))
                                 (begin
                                   (let ((#{e\ 18698}#
                                           (#{chi-install-global\ 17392}#
                                             #{n\ 18691}#
                                             (#{chi\ 17400}#
                                               #{e\ 18618}#
                                               #{r\ 18692}#
                                               #{w\ 18619}#
                                               #{mod\ 18621}#))))
                                     (begin
                                       (#{top-level-eval-hook\ 17224}#
                                         #{e\ 18698}#
                                         #{mod\ 18621}#)
                                       #{e\ 18698}#)))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 18594}#)
                                     (#{top-level-eval-hook\ 17224}#
                                       (#{chi-install-global\ 17392}#
                                         #{n\ 18691}#
                                         (#{chi\ 17400}#
                                           #{e\ 18618}#
                                           #{r\ 18692}#
                                           #{w\ 18619}#
                                           #{mod\ 18621}#))
                                       #{mod\ 18621}#))
                                   (#{chi-void\ 17414}#))))))
                         (if (eqv? #{type\ 18616}# (quote define-form))
                           (begin
                             (let ((#{n\ 18703}#
                                     (#{id-var-name\ 17372}#
                                       #{value\ 18617}#
                                       #{w\ 18619}#)))
                               (begin
                                 (let ((#{type\ 18705}#
                                         (#{binding-type\ 17298}#
                                           (#{lookup\ 17309}#
                                             #{n\ 18703}#
                                             #{r\ 18591}#
                                             #{mod\ 18621}#))))
                                   (if (if (eqv? #{type\ 18705}#
                                                 'global)
                                         #t
                                         (if (eqv? #{type\ 18705}#
                                                   'core)
                                           #t
                                           (if (eqv? #{type\ 18705}#
                                                     'macro)
                                             #t
                                             (eqv? #{type\ 18705}#
                                                   'module-ref))))
                                     (begin
                                       (if (if (if (eq? #{m\ 18593}# (quote c))
                                                 #t
                                                 (eq? #{m\ 18593}#
                                                      'c&e))
                                             (if (not (module-local-variable
                                                        (current-module)
                                                        #{n\ 18703}#))
                                               (current-module)
                                               #f)
                                             #f)
                                         (begin
                                           (let ((#{old\ 18711}#
                                                   (module-variable
                                                     (current-module)
                                                     #{n\ 18703}#)))
                                             (module-define!
                                               (current-module)
                                               #{n\ 18703}#
                                               (if (variable? #{old\ 18711}#)
                                                 (variable-ref #{old\ 18711}#)
                                                 #f)))))
                                       (begin
                                         (let ((#{x\ 18714}#
                                                 (#{build-global-definition\ 17255}#
                                                   #{s\ 18620}#
                                                   #{n\ 18703}#
                                                   (#{chi\ 17400}#
                                                     #{e\ 18618}#
                                                     #{r\ 18591}#
                                                     #{w\ 18619}#
                                                     #{mod\ 18621}#))))
                                           (begin
                                             (if (eq? #{m\ 18593}# (quote c&e))
                                               (#{top-level-eval-hook\ 17224}#
                                                 #{x\ 18714}#
                                                 #{mod\ 18621}#))
                                             #{x\ 18714}#))))
                                     (if (eqv? #{type\ 18705}#
                                               'displaced-lexical)
                                       (syntax-violation
                                         #f
                                         "identifier out of context"
                                         #{e\ 18618}#
                                         (#{wrap\ 17384}#
                                           #{value\ 18617}#
                                           #{w\ 18619}#
                                           #{mod\ 18621}#))
                                       (syntax-violation
                                         #f
                                         "cannot define keyword at top level"
                                         #{e\ 18618}#
                                         (#{wrap\ 17384}#
                                           #{value\ 18617}#
                                           #{w\ 18619}#
                                           #{mod\ 18621}#))))))))
                           (begin
                             (let ((#{x\ 18720}#
                                     (#{chi-expr\ 17402}#
                                       #{type\ 18616}#
                                       #{value\ 18617}#
                                       #{e\ 18618}#
                                       #{r\ 18591}#
                                       #{w\ 18619}#
                                       #{s\ 18620}#
                                       #{mod\ 18621}#)))
                               (begin
                                 (if (eq? #{m\ 18593}# (quote c&e))
                                   (#{top-level-eval-hook\ 17224}#
                                     #{x\ 18720}#
                                     #{mod\ 18621}#))
                                 #{x\ 18720}#))))))))))))
         (#{chi\ 17400}#
           (lambda (#{e\ 18721}#
                    #{r\ 18722}#
                    #{w\ 18723}#
                    #{mod\ 18724}#)
             (call-with-values
               (lambda ()
                 (#{syntax-type\ 17396}#
                   #{e\ 18721}#
                   #{r\ 18722}#
                   #{w\ 18723}#
                   (#{source-annotation\ 17294}# #{e\ 18721}#)
                   #f
                   #{mod\ 18724}#
                   #f))
               (lambda (#{type\ 18729}#
                        #{value\ 18730}#
                        #{e\ 18731}#
                        #{w\ 18732}#
                        #{s\ 18733}#
                        #{mod\ 18734}#)
                 (#{chi-expr\ 17402}#
                   #{type\ 18729}#
                   #{value\ 18730}#
                   #{e\ 18731}#
                   #{r\ 18722}#
                   #{w\ 18732}#
                   #{s\ 18733}#
                   #{mod\ 18734}#)))))
         (#{chi-expr\ 17402}#
           (lambda (#{type\ 18741}#
                    #{value\ 18742}#
                    #{e\ 18743}#
                    #{r\ 18744}#
                    #{w\ 18745}#
                    #{s\ 18746}#
                    #{mod\ 18747}#)
             (if (eqv? #{type\ 18741}# (quote lexical))
               (#{build-lexical-reference\ 17245}#
                 'value
                 #{s\ 18746}#
                 #{e\ 18743}#
                 #{value\ 18742}#)
               (if (if (eqv? #{type\ 18741}# (quote core))
                     #t
                     (eqv? #{type\ 18741}# (quote core-form)))
                 (#{value\ 18742}#
                   #{e\ 18743}#
                   #{r\ 18744}#
                   #{w\ 18745}#
                   #{s\ 18746}#
                   #{mod\ 18747}#)
                 (if (eqv? #{type\ 18741}# (quote module-ref))
                   (call-with-values
                     (lambda ()
                       (#{value\ 18742}#
                         #{e\ 18743}#
                         #{r\ 18744}#
                         #{w\ 18745}#))
                     (lambda (#{e\ 18758}#
                              #{r\ 18759}#
                              #{w\ 18760}#
                              #{s\ 18761}#
                              #{mod\ 18762}#)
                       (#{chi\ 17400}#
                         #{e\ 18758}#
                         #{r\ 18759}#
                         #{w\ 18760}#
                         #{mod\ 18762}#)))
                   (if (eqv? #{type\ 18741}# (quote lexical-call))
                     (#{chi-application\ 17404}#
                       (begin
                         (let ((#{id\ 18770}# (car #{e\ 18743}#)))
                           (#{build-lexical-reference\ 17245}#
                             'fun
                             (#{source-annotation\ 17294}# #{id\ 18770}#)
                             (if (#{syntax-object?\ 17279}# #{id\ 18770}#)
                               (syntax->datum #{id\ 18770}#)
                               #{id\ 18770}#)
                             #{value\ 18742}#)))
                       #{e\ 18743}#
                       #{r\ 18744}#
                       #{w\ 18745}#
                       #{s\ 18746}#
                       #{mod\ 18747}#)
                     (if (eqv? #{type\ 18741}# (quote global-call))
                       (#{chi-application\ 17404}#
                         (#{build-global-reference\ 17251}#
                           (#{source-annotation\ 17294}# (car #{e\ 18743}#))
                           (if (#{syntax-object?\ 17279}# #{value\ 18742}#)
                             (#{syntax-object-expression\ 17281}#
                               #{value\ 18742}#)
                             #{value\ 18742}#)
                           (if (#{syntax-object?\ 17279}# #{value\ 18742}#)
                             (#{syntax-object-module\ 17285}#
                               #{value\ 18742}#)
                             #{mod\ 18747}#))
                         #{e\ 18743}#
                         #{r\ 18744}#
                         #{w\ 18745}#
                         #{s\ 18746}#
                         #{mod\ 18747}#)
                       (if (eqv? #{type\ 18741}# (quote constant))
                         (#{build-data\ 17265}#
                           #{s\ 18746}#
                           (#{strip\ 17426}#
                             (#{source-wrap\ 17386}#
                               #{e\ 18743}#
                               #{w\ 18745}#
                               #{s\ 18746}#
                               #{mod\ 18747}#)
                             '(())))
                         (if (eqv? #{type\ 18741}# (quote global))
                           (#{build-global-reference\ 17251}#
                             #{s\ 18746}#
                             #{value\ 18742}#
                             #{mod\ 18747}#)
                           (if (eqv? #{type\ 18741}# (quote call))
                             (#{chi-application\ 17404}#
                               (#{chi\ 17400}#
                                 (car #{e\ 18743}#)
                                 #{r\ 18744}#
                                 #{w\ 18745}#
                                 #{mod\ 18747}#)
                               #{e\ 18743}#
                               #{r\ 18744}#
                               #{w\ 18745}#
                               #{s\ 18746}#
                               #{mod\ 18747}#)
                             (if (eqv? #{type\ 18741}# (quote begin-form))
                               (let ((#{tmp\ 18777}# #{e\ 18743}#))
                                 (let ((#{tmp\ 18778}#
                                         ($sc-dispatch
                                           #{tmp\ 18777}#
                                           '(_ any . each-any))))
                                   (if #{tmp\ 18778}#
                                     (@apply
                                       (lambda (#{e1\ 18781}# #{e2\ 18782}#)
                                         (#{chi-sequence\ 17388}#
                                           (cons #{e1\ 18781}# #{e2\ 18782}#)
                                           #{r\ 18744}#
                                           #{w\ 18745}#
                                           #{s\ 18746}#
                                           #{mod\ 18747}#))
                                       #{tmp\ 18778}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 18777}#))))
                               (if (eqv? #{type\ 18741}#
                                         'local-syntax-form)
                                 (#{chi-local-syntax\ 17410}#
                                   #{value\ 18742}#
                                   #{e\ 18743}#
                                   #{r\ 18744}#
                                   #{w\ 18745}#
                                   #{s\ 18746}#
                                   #{mod\ 18747}#
                                   #{chi-sequence\ 17388}#)
                                 (if (eqv? #{type\ 18741}#
                                           'eval-when-form)
                                   (let ((#{tmp\ 18786}# #{e\ 18743}#))
                                     (let ((#{tmp\ 18787}#
                                             ($sc-dispatch
                                               #{tmp\ 18786}#
                                               '(_ each-any any . each-any))))
                                       (if #{tmp\ 18787}#
                                         (@apply
                                           (lambda (#{x\ 18791}#
                                                    #{e1\ 18792}#
                                                    #{e2\ 18793}#)
                                             (begin
                                               (let ((#{when-list\ 18795}#
                                                       (#{chi-when-list\ 17394}#
                                                         #{e\ 18743}#
                                                         #{x\ 18791}#
                                                         #{w\ 18745}#)))
                                                 (if (memq 'eval
                                                           #{when-list\ 18795}#)
                                                   (#{chi-sequence\ 17388}#
                                                     (cons #{e1\ 18792}#
                                                           #{e2\ 18793}#)
                                                     #{r\ 18744}#
                                                     #{w\ 18745}#
                                                     #{s\ 18746}#
                                                     #{mod\ 18747}#)
                                                   (#{chi-void\ 17414}#)))))
                                           #{tmp\ 18787}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 18786}#))))
                                   (if (if (eqv? #{type\ 18741}#
                                                 'define-form)
                                         #t
                                         (eqv? #{type\ 18741}#
                                               'define-syntax-form))
                                     (syntax-violation
                                       #f
                                       "definition in expression context"
                                       #{e\ 18743}#
                                       (#{wrap\ 17384}#
                                         #{value\ 18742}#
                                         #{w\ 18745}#
                                         #{mod\ 18747}#))
                                     (if (eqv? #{type\ 18741}# (quote syntax))
                                       (syntax-violation
                                         #f
                                         "reference to pattern variable outside syntax form"
                                         (#{source-wrap\ 17386}#
                                           #{e\ 18743}#
                                           #{w\ 18745}#
                                           #{s\ 18746}#
                                           #{mod\ 18747}#))
                                       (if (eqv? #{type\ 18741}#
                                                 'displaced-lexical)
                                         (syntax-violation
                                           #f
                                           "reference to identifier outside its scope"
                                           (#{source-wrap\ 17386}#
                                             #{e\ 18743}#
                                             #{w\ 18745}#
                                             #{s\ 18746}#
                                             #{mod\ 18747}#))
                                         (syntax-violation
                                           #f
                                           "unexpected syntax"
                                           (#{source-wrap\ 17386}#
                                             #{e\ 18743}#
                                             #{w\ 18745}#
                                             #{s\ 18746}#
                                             #{mod\ 18747}#))))))))))))))))))
         (#{chi-application\ 17404}#
           (lambda (#{x\ 18802}#
                    #{e\ 18803}#
                    #{r\ 18804}#
                    #{w\ 18805}#
                    #{s\ 18806}#
                    #{mod\ 18807}#)
             (let ((#{tmp\ 18814}# #{e\ 18803}#))
               (let ((#{tmp\ 18815}#
                       ($sc-dispatch
                         #{tmp\ 18814}#
                         '(any . each-any))))
                 (if #{tmp\ 18815}#
                   (@apply
                     (lambda (#{e0\ 18818}# #{e1\ 18819}#)
                       (#{build-application\ 17239}#
                         #{s\ 18806}#
                         #{x\ 18802}#
                         (map (lambda (#{e\ 18820}#)
                                (#{chi\ 17400}#
                                  #{e\ 18820}#
                                  #{r\ 18804}#
                                  #{w\ 18805}#
                                  #{mod\ 18807}#))
                              #{e1\ 18819}#)))
                     #{tmp\ 18815}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{tmp\ 18814}#))))))
         (#{chi-macro\ 17406}#
           (lambda (#{p\ 18823}#
                    #{e\ 18824}#
                    #{r\ 18825}#
                    #{w\ 18826}#
                    #{s\ 18827}#
                    #{rib\ 18828}#
                    #{mod\ 18829}#)
             (letrec*
               ((#{rebuild-macro-output\ 18838}#
                  (lambda (#{x\ 18839}# #{m\ 18840}#)
                    (if (pair? #{x\ 18839}#)
                      (#{decorate-source\ 17233}#
                        (cons (#{rebuild-macro-output\ 18838}#
                                (car #{x\ 18839}#)
                                #{m\ 18840}#)
                              (#{rebuild-macro-output\ 18838}#
                                (cdr #{x\ 18839}#)
                                #{m\ 18840}#))
                        #{s\ 18827}#)
                      (if (#{syntax-object?\ 17279}# #{x\ 18839}#)
                        (begin
                          (let ((#{w\ 18848}#
                                  (#{syntax-object-wrap\ 17283}#
                                    #{x\ 18839}#)))
                            (begin
                              (let ((#{ms\ 18851}#
                                      (#{wrap-marks\ 17322}# #{w\ 18848}#))
                                    (#{s\ 18852}#
                                      (#{wrap-subst\ 17324}# #{w\ 18848}#)))
                                (if (if (pair? #{ms\ 18851}#)
                                      (eq? (car #{ms\ 18851}#) #f)
                                      #f)
                                  (#{make-syntax-object\ 17277}#
                                    (#{syntax-object-expression\ 17281}#
                                      #{x\ 18839}#)
                                    (#{make-wrap\ 17320}#
                                      (cdr #{ms\ 18851}#)
                                      (if #{rib\ 18828}#
                                        (cons #{rib\ 18828}#
                                              (cdr #{s\ 18852}#))
                                        (cdr #{s\ 18852}#)))
                                    (#{syntax-object-module\ 17285}#
                                      #{x\ 18839}#))
                                  (#{make-syntax-object\ 17277}#
                                    (#{decorate-source\ 17233}#
                                      (#{syntax-object-expression\ 17281}#
                                        #{x\ 18839}#)
                                      #{s\ 18852}#)
                                    (#{make-wrap\ 17320}#
                                      (cons #{m\ 18840}# #{ms\ 18851}#)
                                      (if #{rib\ 18828}#
                                        (cons #{rib\ 18828}#
                                              (cons 'shift
                                                    #{s\ 18852}#))
                                        (cons (quote shift) #{s\ 18852}#)))
                                    (#{syntax-object-module\ 17285}#
                                      #{x\ 18839}#)))))))
                        (if (vector? #{x\ 18839}#)
                          (begin
                            (let ((#{n\ 18860}# (vector-length #{x\ 18839}#)))
                              (begin
                                (let ((#{v\ 18862}#
                                        (#{decorate-source\ 17233}#
                                          (make-vector #{n\ 18860}#)
                                          #{x\ 18839}#)))
                                  (letrec*
                                    ((#{loop\ 18865}#
                                       (lambda (#{i\ 18866}#)
                                         (if (#{fx=\ 17220}#
                                               #{i\ 18866}#
                                               #{n\ 18860}#)
                                           (begin (if #f #f) #{v\ 18862}#)
                                           (begin
                                             (vector-set!
                                               #{v\ 18862}#
                                               #{i\ 18866}#
                                               (#{rebuild-macro-output\ 18838}#
                                                 (vector-ref
                                                   #{x\ 18839}#
                                                   #{i\ 18866}#)
                                                 #{m\ 18840}#))
                                             (#{loop\ 18865}#
                                               (#{fx+\ 17216}#
                                                 #{i\ 18866}#
                                                 1)))))))
                                    (begin (#{loop\ 18865}# 0)))))))
                          (if (symbol? #{x\ 18839}#)
                            (syntax-violation
                              #f
                              "encountered raw symbol in macro output"
                              (#{source-wrap\ 17386}#
                                #{e\ 18824}#
                                #{w\ 18826}#
                                (#{wrap-subst\ 17324}# #{w\ 18826}#)
                                #{mod\ 18829}#)
                              #{x\ 18839}#)
                            (#{decorate-source\ 17233}#
                              #{x\ 18839}#
                              #{s\ 18827}#))))))))
               (begin
                 (#{rebuild-macro-output\ 18838}#
                   (#{p\ 18823}#
                     (#{source-wrap\ 17386}#
                       #{e\ 18824}#
                       (#{anti-mark\ 17356}# #{w\ 18826}#)
                       #{s\ 18827}#
                       #{mod\ 18829}#))
                   (gensym "m"))))))
         (#{chi-body\ 17408}#
           (lambda (#{body\ 18873}#
                    #{outer-form\ 18874}#
                    #{r\ 18875}#
                    #{w\ 18876}#
                    #{mod\ 18877}#)
             (begin
               (let ((#{r\ 18885}#
                       (cons '("placeholder" placeholder)
                             #{r\ 18875}#)))
                 (begin
                   (let ((#{ribcage\ 18887}#
                           (#{make-ribcage\ 17336}#
                             '()
                             '()
                             '())))
                     (begin
                       (let ((#{w\ 18890}#
                               (#{make-wrap\ 17320}#
                                 (#{wrap-marks\ 17322}# #{w\ 18876}#)
                                 (cons #{ribcage\ 18887}#
                                       (#{wrap-subst\ 17324}# #{w\ 18876}#)))))
                         (letrec*
                           ((#{parse\ 18899}#
                              (lambda (#{body\ 18900}#
                                       #{ids\ 18901}#
                                       #{labels\ 18902}#
                                       #{var-ids\ 18903}#
                                       #{vars\ 18904}#
                                       #{vals\ 18905}#
                                       #{bindings\ 18906}#)
                                (if (null? #{body\ 18900}#)
                                  (syntax-violation
                                    #f
                                    "no expressions in body"
                                    #{outer-form\ 18874}#)
                                  (begin
                                    (let ((#{e\ 18911}#
                                            (cdr (car #{body\ 18900}#)))
                                          (#{er\ 18912}#
                                            (car (car #{body\ 18900}#))))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 17396}#
                                            #{e\ 18911}#
                                            #{er\ 18912}#
                                            '(())
                                            (#{source-annotation\ 17294}#
                                              #{er\ 18912}#)
                                            #{ribcage\ 18887}#
                                            #{mod\ 18877}#
                                            #f))
                                        (lambda (#{type\ 18914}#
                                                 #{value\ 18915}#
                                                 #{e\ 18916}#
                                                 #{w\ 18917}#
                                                 #{s\ 18918}#
                                                 #{mod\ 18919}#)
                                          (if (eqv? #{type\ 18914}#
                                                    'define-form)
                                            (begin
                                              (let ((#{id\ 18929}#
                                                      (#{wrap\ 17384}#
                                                        #{value\ 18915}#
                                                        #{w\ 18917}#
                                                        #{mod\ 18919}#))
                                                    (#{label\ 18930}#
                                                      (#{gen-label\ 17331}#)))
                                                (begin
                                                  (let ((#{var\ 18932}#
                                                          (#{gen-var\ 17428}#
                                                            #{id\ 18929}#)))
                                                    (begin
                                                      (#{extend-ribcage!\ 17360}#
                                                        #{ribcage\ 18887}#
                                                        #{id\ 18929}#
                                                        #{label\ 18930}#)
                                                      (#{parse\ 18899}#
                                                        (cdr #{body\ 18900}#)
                                                        (cons #{id\ 18929}#
                                                              #{ids\ 18901}#)
                                                        (cons #{label\ 18930}#
                                                              #{labels\ 18902}#)
                                                        (cons #{id\ 18929}#
                                                              #{var-ids\ 18903}#)
                                                        (cons #{var\ 18932}#
                                                              #{vars\ 18904}#)
                                                        (cons (cons #{er\ 18912}#
                                                                    (#{wrap\ 17384}#
                                                                      #{e\ 18916}#
                                                                      #{w\ 18917}#
                                                                      #{mod\ 18919}#))
                                                              #{vals\ 18905}#)
                                                        (cons (cons 'lexical
                                                                    #{var\ 18932}#)
                                                              #{bindings\ 18906}#)))))))
                                            (if (eqv? #{type\ 18914}#
                                                      'define-syntax-form)
                                              (begin
                                                (let ((#{id\ 18937}#
                                                        (#{wrap\ 17384}#
                                                          #{value\ 18915}#
                                                          #{w\ 18917}#
                                                          #{mod\ 18919}#))
                                                      (#{label\ 18938}#
                                                        (#{gen-label\ 17331}#)))
                                                  (begin
                                                    (#{extend-ribcage!\ 17360}#
                                                      #{ribcage\ 18887}#
                                                      #{id\ 18937}#
                                                      #{label\ 18938}#)
                                                    (#{parse\ 18899}#
                                                      (cdr #{body\ 18900}#)
                                                      (cons #{id\ 18937}#
                                                            #{ids\ 18901}#)
                                                      (cons #{label\ 18938}#
                                                            #{labels\ 18902}#)
                                                      #{var-ids\ 18903}#
                                                      #{vars\ 18904}#
                                                      #{vals\ 18905}#
                                                      (cons (cons 'macro
                                                                  (cons #{er\ 18912}#
                                                                        (#{wrap\ 17384}#
                                                                          #{e\ 18916}#
                                                                          #{w\ 18917}#
                                                                          #{mod\ 18919}#)))
                                                            #{bindings\ 18906}#)))))
                                              (if (eqv? #{type\ 18914}#
                                                        'begin-form)
                                                (let ((#{tmp\ 18941}#
                                                        #{e\ 18916}#))
                                                  (let ((#{tmp\ 18942}#
                                                          ($sc-dispatch
                                                            #{tmp\ 18941}#
                                                            '(_ . each-any))))
                                                    (if #{tmp\ 18942}#
                                                      (@apply
                                                        (lambda (#{e1\ 18944}#)
                                                          (#{parse\ 18899}#
                                                            (letrec*
                                                              ((#{f\ 18947}#
                                                                 (lambda (#{forms\ 18948}#)
                                                                   (if (null? #{forms\ 18948}#)
                                                                     (cdr #{body\ 18900}#)
                                                                     (cons (cons #{er\ 18912}#
                                                                                 (#{wrap\ 17384}#
                                                                                   (car #{forms\ 18948}#)
                                                                                   #{w\ 18917}#
                                                                                   #{mod\ 18919}#))
                                                                           (#{f\ 18947}#
                                                                             (cdr #{forms\ 18948}#)))))))
                                                              (begin
                                                                (#{f\ 18947}#
                                                                  #{e1\ 18944}#)))
                                                            #{ids\ 18901}#
                                                            #{labels\ 18902}#
                                                            #{var-ids\ 18903}#
                                                            #{vars\ 18904}#
                                                            #{vals\ 18905}#
                                                            #{bindings\ 18906}#))
                                                        #{tmp\ 18942}#)
                                                      (syntax-violation
                                                        #f
                                                        "source expression failed to match any pattern"
                                                        #{tmp\ 18941}#))))
                                                (if (eqv? #{type\ 18914}#
                                                          'local-syntax-form)
                                                  (#{chi-local-syntax\ 17410}#
                                                    #{value\ 18915}#
                                                    #{e\ 18916}#
                                                    #{er\ 18912}#
                                                    #{w\ 18917}#
                                                    #{s\ 18918}#
                                                    #{mod\ 18919}#
                                                    (lambda (#{forms\ 18951}#
                                                             #{er\ 18952}#
                                                             #{w\ 18953}#
                                                             #{s\ 18954}#
                                                             #{mod\ 18955}#)
                                                      (#{parse\ 18899}#
                                                        (letrec*
                                                          ((#{f\ 18963}#
                                                             (lambda (#{forms\ 18964}#)
                                                               (if (null? #{forms\ 18964}#)
                                                                 (cdr #{body\ 18900}#)
                                                                 (cons (cons #{er\ 18952}#
                                                                             (#{wrap\ 17384}#
                                                                               (car #{forms\ 18964}#)
                                                                               #{w\ 18953}#
                                                                               #{mod\ 18955}#))
                                                                       (#{f\ 18963}#
                                                                         (cdr #{forms\ 18964}#)))))))
                                                          (begin
                                                            (#{f\ 18963}#
                                                              #{forms\ 18951}#)))
                                                        #{ids\ 18901}#
                                                        #{labels\ 18902}#
                                                        #{var-ids\ 18903}#
                                                        #{vars\ 18904}#
                                                        #{vals\ 18905}#
                                                        #{bindings\ 18906}#)))
                                                  (if (null? #{ids\ 18901}#)
                                                    (#{build-sequence\ 17267}#
                                                      #f
                                                      (map (lambda (#{x\ 18967}#)
                                                             (#{chi\ 17400}#
                                                               (cdr #{x\ 18967}#)
                                                               (car #{x\ 18967}#)
                                                               '(())
                                                               #{mod\ 18919}#))
                                                           (cons (cons #{er\ 18912}#
                                                                       (#{source-wrap\ 17386}#
                                                                         #{e\ 18916}#
                                                                         #{w\ 18917}#
                                                                         #{s\ 18918}#
                                                                         #{mod\ 18919}#))
                                                                 (cdr #{body\ 18900}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 17378}#
                                                                 #{ids\ 18901}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 18874}#))
                                                      (letrec*
                                                        ((#{loop\ 18974}#
                                                           (lambda (#{bs\ 18975}#
                                                                    #{er-cache\ 18976}#
                                                                    #{r-cache\ 18977}#)
                                                             (if (not (null? #{bs\ 18975}#))
                                                               (begin
                                                                 (let ((#{b\ 18980}#
                                                                         (car #{bs\ 18975}#)))
                                                                   (if (eq? (car #{b\ 18980}#)
                                                                            'macro)
                                                                     (begin
                                                                       (let ((#{er\ 18983}#
                                                                               (car (cdr #{b\ 18980}#))))
                                                                         (begin
                                                                           (let ((#{r-cache\ 18985}#
                                                                                   (if (eq? #{er\ 18983}#
                                                                                            #{er-cache\ 18976}#)
                                                                                     #{r-cache\ 18977}#
                                                                                     (#{macros-only-env\ 17307}#
                                                                                       #{er\ 18983}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 18980}#
                                                                                 (#{eval-local-transformer\ 17412}#
                                                                                   (#{chi\ 17400}#
                                                                                     (cdr (cdr #{b\ 18980}#))
                                                                                     #{r-cache\ 18985}#
                                                                                     '(())
                                                                                     #{mod\ 18919}#)
                                                                                   #{mod\ 18919}#))
                                                                               (#{loop\ 18974}#
                                                                                 (cdr #{bs\ 18975}#)
                                                                                 #{er\ 18983}#
                                                                                 #{r-cache\ 18985}#))))))
                                                                     (#{loop\ 18974}#
                                                                       (cdr #{bs\ 18975}#)
                                                                       #{er-cache\ 18976}#
                                                                       #{r-cache\ 18977}#))))))))
                                                        (begin
                                                          (#{loop\ 18974}#
                                                            #{bindings\ 18906}#
                                                            #f
                                                            #f)))
                                                      (set-cdr!
                                                        #{r\ 18885}#
                                                        (#{extend-env\ 17303}#
                                                          #{labels\ 18902}#
                                                          #{bindings\ 18906}#
                                                          (cdr #{r\ 18885}#)))
                                                      (#{build-letrec\ 17273}#
                                                        #f
                                                        #t
                                                        (reverse
                                                          (map syntax->datum
                                                               #{var-ids\ 18903}#))
                                                        (reverse
                                                          #{vars\ 18904}#)
                                                        (map (lambda (#{x\ 18988}#)
                                                               (#{chi\ 17400}#
                                                                 (cdr #{x\ 18988}#)
                                                                 (car #{x\ 18988}#)
                                                                 '(())
                                                                 #{mod\ 18919}#))
                                                             (reverse
                                                               #{vals\ 18905}#))
                                                        (#{build-sequence\ 17267}#
                                                          #f
                                                          (map (lambda (#{x\ 18992}#)
                                                                 (#{chi\ 17400}#
                                                                   (cdr #{x\ 18992}#)
                                                                   (car #{x\ 18992}#)
                                                                   '(())
                                                                   #{mod\ 18919}#))
                                                               (cons (cons #{er\ 18912}#
                                                                           (#{source-wrap\ 17386}#
                                                                             #{e\ 18916}#
                                                                             #{w\ 18917}#
                                                                             #{s\ 18918}#
                                                                             #{mod\ 18919}#))
                                                                     (cdr #{body\ 18900}#)))))))))))))))))))
                           (begin
                             (#{parse\ 18899}#
                               (map (lambda (#{x\ 18907}#)
                                      (cons #{r\ 18885}#
                                            (#{wrap\ 17384}#
                                              #{x\ 18907}#
                                              #{w\ 18890}#
                                              #{mod\ 18877}#)))
                                    #{body\ 18873}#)
                               '()
                               '()
                               '()
                               '()
                               '()
                               '())))))))))))
         (#{chi-local-syntax\ 17410}#
           (lambda (#{rec?\ 18995}#
                    #{e\ 18996}#
                    #{r\ 18997}#
                    #{w\ 18998}#
                    #{s\ 18999}#
                    #{mod\ 19000}#
                    #{k\ 19001}#)
             (let ((#{tmp\ 19009}# #{e\ 18996}#))
               (let ((#{tmp\ 19010}#
                       ($sc-dispatch
                         #{tmp\ 19009}#
                         '(_ #(each (any any)) any . each-any))))
                 (if #{tmp\ 19010}#
                   (@apply
                     (lambda (#{id\ 19015}#
                              #{val\ 19016}#
                              #{e1\ 19017}#
                              #{e2\ 19018}#)
                       (begin
                         (let ((#{ids\ 19020}# #{id\ 19015}#))
                           (if (not (#{valid-bound-ids?\ 17378}#
                                      #{ids\ 19020}#))
                             (syntax-violation
                               #f
                               "duplicate bound keyword"
                               #{e\ 18996}#)
                             (begin
                               (let ((#{labels\ 19023}#
                                       (#{gen-labels\ 17333}# #{ids\ 19020}#)))
                                 (begin
                                   (let ((#{new-w\ 19025}#
                                           (#{make-binding-wrap\ 17362}#
                                             #{ids\ 19020}#
                                             #{labels\ 19023}#
                                             #{w\ 18998}#)))
                                     (#{k\ 19001}#
                                       (cons #{e1\ 19017}# #{e2\ 19018}#)
                                       (#{extend-env\ 17303}#
                                         #{labels\ 19023}#
                                         (begin
                                           (let ((#{w\ 19029}#
                                                   (if #{rec?\ 18995}#
                                                     #{new-w\ 19025}#
                                                     #{w\ 18998}#))
                                                 (#{trans-r\ 19030}#
                                                   (#{macros-only-env\ 17307}#
                                                     #{r\ 18997}#)))
                                             (map (lambda (#{x\ 19031}#)
                                                    (cons 'macro
                                                          (#{eval-local-transformer\ 17412}#
                                                            (#{chi\ 17400}#
                                                              #{x\ 19031}#
                                                              #{trans-r\ 19030}#
                                                              #{w\ 19029}#
                                                              #{mod\ 19000}#)
                                                            #{mod\ 19000}#)))
                                                  #{val\ 19016}#)))
                                         #{r\ 18997}#)
                                       #{new-w\ 19025}#
                                       #{s\ 18999}#
                                       #{mod\ 19000}#)))))))))
                     #{tmp\ 19010}#)
                   (let ((#{_\ 19036}# #{tmp\ 19009}#))
                     (syntax-violation
                       #f
                       "bad local syntax definition"
                       (#{source-wrap\ 17386}#
                         #{e\ 18996}#
                         #{w\ 18998}#
                         #{s\ 18999}#
                         #{mod\ 19000}#))))))))
         (#{eval-local-transformer\ 17412}#
           (lambda (#{expanded\ 19037}# #{mod\ 19038}#)
             (begin
               (let ((#{p\ 19042}#
                       (#{local-eval-hook\ 17226}#
                         #{expanded\ 19037}#
                         #{mod\ 19038}#)))
                 (if (procedure? #{p\ 19042}#)
                   #{p\ 19042}#
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 19042}#))))))
         (#{chi-void\ 17414}#
           (lambda () (#{build-void\ 17237}# #f)))
         (#{ellipsis?\ 17416}#
           (lambda (#{x\ 19044}#)
             (if (#{nonsymbol-id?\ 17313}# #{x\ 19044}#)
               (#{free-id=?\ 17374}#
                 #{x\ 19044}#
                 '#(syntax-object
                    ...
                    ((top)
                     #(ribcage () () ())
                     #(ribcage () () ())
                     #(ribcage #(x) #((top)) #("i19045"))
                     #(ribcage
                       (lambda-var-list
                         gen-var
                         strip
                         chi-lambda-case
                         lambda*-formals
                         chi-simple-lambda
                         lambda-formals
                         ellipsis?
                         chi-void
                         eval-local-transformer
                         chi-local-syntax
                         chi-body
                         chi-macro
                         chi-application
                         chi-expr
                         chi
                         chi-top
                         syntax-type
                         chi-when-list
                         chi-install-global
                         chi-top-sequence
                         chi-sequence
                         source-wrap
                         wrap
                         bound-id-member?
                         distinct-bound-ids?
                         valid-bound-ids?
                         bound-id=?
                         free-id=?
                         id-var-name
                         same-marks?
                         join-marks
                         join-wraps
                         smart-append
                         make-binding-wrap
                         extend-ribcage!
                         make-empty-ribcage
                         new-mark
                         anti-mark
                         the-anti-mark
                         top-marked?
                         top-wrap
                         empty-wrap
                         set-ribcage-labels!
                         set-ribcage-marks!
                         set-ribcage-symnames!
                         ribcage-labels
                         ribcage-marks
                         ribcage-symnames
                         ribcage?
                         make-ribcage
                         gen-labels
                         gen-label
                         make-rename
                         rename-marks
                         rename-new
                         rename-old
                         subst-rename?
                         wrap-subst
                         wrap-marks
                         make-wrap
                         id-sym-name&marks
                         id-sym-name
                         id?
                         nonsymbol-id?
                         global-extend
                         lookup
                         macros-only-env
                         extend-var-env
                         extend-env
                         null-env
                         binding-value
                         binding-type
                         make-binding
                         arg-check
                         source-annotation
                         no-source
                         set-syntax-object-module!
                         set-syntax-object-wrap!
                         set-syntax-object-expression!
                         syntax-object-module
                         syntax-object-wrap
                         syntax-object-expression
                         syntax-object?
                         make-syntax-object
                         build-lexical-var
                         build-letrec
                         build-named-let
                         build-let
                         build-sequence
                         build-data
                         build-primref
                         build-lambda-case
                         build-case-lambda
                         build-simple-lambda
                         build-global-definition
                         build-global-assignment
                         build-global-reference
                         analyze-variable
                         build-lexical-assignment
                         build-lexical-reference
                         build-dynlet
                         build-conditional
                         build-application
                         build-void
                         maybe-name-value!
                         decorate-source
                         get-global-definition-hook
                         put-global-definition-hook
                         gensym-hook
                         local-eval-hook
                         top-level-eval-hook
                         fx<
                         fx=
                         fx-
                         fx+
                         set-lambda-meta!
                         lambda-meta
                         lambda?
                         make-dynlet
                         make-letrec
                         make-let
                         make-lambda-case
                         make-lambda
                         make-sequence
                         make-application
                         make-conditional
                         make-toplevel-define
                         make-toplevel-set
                         make-toplevel-ref
                         make-module-set
                         make-module-ref
                         make-lexical-set
                         make-lexical-ref
                         make-primitive-ref
                         make-const
                         make-void)
                       ((top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top)
                        (top))
                       ("i17429"
                        "i17427"
                        "i17425"
                        "i17423"
                        "i17421"
                        "i17419"
                        "i17417"
                        "i17415"
                        "i17413"
                        "i17411"
                        "i17409"
                        "i17407"
                        "i17405"
                        "i17403"
                        "i17401"
                        "i17399"
                        "i17397"
                        "i17395"
                        "i17393"
                        "i17391"
                        "i17389"
                        "i17387"
                        "i17385"
                        "i17383"
                        "i17381"
                        "i17379"
                        "i17377"
                        "i17375"
                        "i17373"
                        "i17371"
                        "i17369"
                        "i17367"
                        "i17365"
                        "i17363"
                        "i17361"
                        "i17359"
                        "i17358"
                        "i17357"
                        "i17355"
                        "i17354"
                        "i17353"
                        "i17352"
                        "i17351"
                        "i17349"
                        "i17347"
                        "i17345"
                        "i17343"
                        "i17341"
                        "i17339"
                        "i17337"
                        "i17335"
                        "i17332"
                        "i17330"
                        "i17329"
                        "i17328"
                        "i17327"
                        "i17326"
                        "i17325"
                        "i17323"
                        "i17321"
                        "i17319"
                        "i17317"
                        "i17316"
                        "i17314"
                        "i17312"
                        "i17310"
                        "i17308"
                        "i17306"
                        "i17304"
                        "i17302"
                        "i17301"
                        "i17299"
                        "i17297"
                        "i17296"
                        "i17295"
                        "i17293"
                        "i17292"
                        "i17290"
                        "i17288"
                        "i17286"
                        "i17284"
                        "i17282"
                        "i17280"
                        "i17278"
                        "i17276"
                        "i17274"
                        "i17272"
                        "i17270"
                        "i17268"
                        "i17266"
                        "i17264"
                        "i17262"
                        "i17260"
                        "i17258"
                        "i17256"
                        "i17254"
                        "i17252"
                        "i17250"
                        "i17248"
                        "i17246"
                        "i17244"
                        "i17242"
                        "i17240"
                        "i17238"
                        "i17236"
                        "i17234"
                        "i17232"
                        "i17230"
                        "i17228"
                        "i17227"
                        "i17225"
                        "i17223"
                        "i17221"
                        "i17219"
                        "i17217"
                        "i17215"
                        "i17213"
                        "i17211"
                        "i17209"
                        "i17206"
                        "i17204"
                        "i17202"
                        "i17200"
                        "i17198"
                        "i17196"
                        "i17194"
                        "i17192"
                        "i17190"
                        "i17188"
                        "i17186"
                        "i17184"
                        "i17182"
                        "i17180"
                        "i17178"
                        "i17176"
                        "i17174"
                        "i17172"))
                     #(ribcage
                       (define-structure
                         define-expansion-accessors
                         define-expansion-constructors
                         and-map*)
                       ((top) (top) (top) (top))
                       ("i16974" "i16973" "i16972" "i16970")))
                    (hygiene guile)))
               #f)))
         (#{lambda-formals\ 17418}#
           (lambda (#{orig-args\ 19048}#)
             (letrec*
               ((#{req\ 19051}#
                  (lambda (#{args\ 19054}# #{rreq\ 19055}#)
                    (let ((#{tmp\ 19058}# #{args\ 19054}#))
                      (let ((#{tmp\ 19059}#
                              ($sc-dispatch #{tmp\ 19058}# (quote ()))))
                        (if #{tmp\ 19059}#
                          (@apply
                            (lambda ()
                              (#{check\ 19053}# (reverse #{rreq\ 19055}#) #f))
                            #{tmp\ 19059}#)
                          (let ((#{tmp\ 19060}#
                                  ($sc-dispatch
                                    #{tmp\ 19058}#
                                    '(any . any))))
                            (if (if #{tmp\ 19060}#
                                  (@apply
                                    (lambda (#{a\ 19063}# #{b\ 19064}#)
                                      (#{id?\ 17315}# #{a\ 19063}#))
                                    #{tmp\ 19060}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 19067}# #{b\ 19068}#)
                                  (#{req\ 19051}#
                                    #{b\ 19068}#
                                    (cons #{a\ 19067}# #{rreq\ 19055}#)))
                                #{tmp\ 19060}#)
                              (let ((#{tmp\ 19069}# (list #{tmp\ 19058}#)))
                                (if (if #{tmp\ 19069}#
                                      (@apply
                                        (lambda (#{r\ 19071}#)
                                          (#{id?\ 17315}# #{r\ 19071}#))
                                        #{tmp\ 19069}#)
                                      #f)
                                  (@apply
                                    (lambda (#{r\ 19073}#)
                                      (#{check\ 19053}#
                                        (reverse #{rreq\ 19055}#)
                                        #{r\ 19073}#))
                                    #{tmp\ 19069}#)
                                  (let ((#{else\ 19075}# #{tmp\ 19058}#))
                                    (syntax-violation
                                      'lambda
                                      "invalid argument list"
                                      #{orig-args\ 19048}#
                                      #{args\ 19054}#)))))))))))
                (#{check\ 19053}#
                  (lambda (#{req\ 19076}# #{rest\ 19077}#)
                    (if (#{distinct-bound-ids?\ 17380}#
                          (if #{rest\ 19077}#
                            (cons #{rest\ 19077}# #{req\ 19076}#)
                            #{req\ 19076}#))
                      (values #{req\ 19076}# #f #{rest\ 19077}# #f)
                      (syntax-violation
                        'lambda
                        "duplicate identifier in argument list"
                        #{orig-args\ 19048}#)))))
               (begin
                 (#{req\ 19051}# #{orig-args\ 19048}# (quote ()))))))
         (#{chi-simple-lambda\ 17420}#
           (lambda (#{e\ 19083}#
                    #{r\ 19084}#
                    #{w\ 19085}#
                    #{s\ 19086}#
                    #{mod\ 19087}#
                    #{req\ 19088}#
                    #{rest\ 19089}#
                    #{meta\ 19090}#
                    #{body\ 19091}#)
             (begin
               (let ((#{ids\ 19103}#
                       (if #{rest\ 19089}#
                         (append #{req\ 19088}# (list #{rest\ 19089}#))
                         #{req\ 19088}#)))
                 (begin
                   (let ((#{vars\ 19105}#
                           (map #{gen-var\ 17428}# #{ids\ 19103}#)))
                     (begin
                       (let ((#{labels\ 19107}#
                               (#{gen-labels\ 17333}# #{ids\ 19103}#)))
                         (#{build-simple-lambda\ 17257}#
                           #{s\ 19086}#
                           (map syntax->datum #{req\ 19088}#)
                           (if #{rest\ 19089}#
                             (syntax->datum #{rest\ 19089}#)
                             #f)
                           #{vars\ 19105}#
                           #{meta\ 19090}#
                           (#{chi-body\ 17408}#
                             #{body\ 19091}#
                             (#{source-wrap\ 17386}#
                               #{e\ 19083}#
                               #{w\ 19085}#
                               #{s\ 19086}#
                               #{mod\ 19087}#)
                             (#{extend-var-env\ 17305}#
                               #{labels\ 19107}#
                               #{vars\ 19105}#
                               #{r\ 19084}#)
                             (#{make-binding-wrap\ 17362}#
                               #{ids\ 19103}#
                               #{labels\ 19107}#
                               #{w\ 19085}#)
                             #{mod\ 19087}#))))))))))
         (#{lambda*-formals\ 17422}#
           (lambda (#{orig-args\ 19110}#)
             (letrec*
               ((#{req\ 19113}#
                  (lambda (#{args\ 19122}# #{rreq\ 19123}#)
                    (let ((#{tmp\ 19126}# #{args\ 19122}#))
                      (let ((#{tmp\ 19127}#
                              ($sc-dispatch #{tmp\ 19126}# (quote ()))))
                        (if #{tmp\ 19127}#
                          (@apply
                            (lambda ()
                              (#{check\ 19121}#
                                (reverse #{rreq\ 19123}#)
                                '()
                                #f
                                '()))
                            #{tmp\ 19127}#)
                          (let ((#{tmp\ 19128}#
                                  ($sc-dispatch
                                    #{tmp\ 19126}#
                                    '(any . any))))
                            (if (if #{tmp\ 19128}#
                                  (@apply
                                    (lambda (#{a\ 19131}# #{b\ 19132}#)
                                      (#{id?\ 17315}# #{a\ 19131}#))
                                    #{tmp\ 19128}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 19135}# #{b\ 19136}#)
                                  (#{req\ 19113}#
                                    #{b\ 19136}#
                                    (cons #{a\ 19135}# #{rreq\ 19123}#)))
                                #{tmp\ 19128}#)
                              (let ((#{tmp\ 19137}#
                                      ($sc-dispatch
                                        #{tmp\ 19126}#
                                        '(any . any))))
                                (if (if #{tmp\ 19137}#
                                      (@apply
                                        (lambda (#{a\ 19140}# #{b\ 19141}#)
                                          (eq? (syntax->datum #{a\ 19140}#)
                                               #:optional))
                                        #{tmp\ 19137}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 19144}# #{b\ 19145}#)
                                      (#{opt\ 19115}#
                                        #{b\ 19145}#
                                        (reverse #{rreq\ 19123}#)
                                        '()))
                                    #{tmp\ 19137}#)
                                  (let ((#{tmp\ 19146}#
                                          ($sc-dispatch
                                            #{tmp\ 19126}#
                                            '(any . any))))
                                    (if (if #{tmp\ 19146}#
                                          (@apply
                                            (lambda (#{a\ 19149}# #{b\ 19150}#)
                                              (eq? (syntax->datum #{a\ 19149}#)
                                                   #:key))
                                            #{tmp\ 19146}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 19153}# #{b\ 19154}#)
                                          (#{key\ 19117}#
                                            #{b\ 19154}#
                                            (reverse #{rreq\ 19123}#)
                                            '()
                                            '()))
                                        #{tmp\ 19146}#)
                                      (let ((#{tmp\ 19155}#
                                              ($sc-dispatch
                                                #{tmp\ 19126}#
                                                '(any any))))
                                        (if (if #{tmp\ 19155}#
                                              (@apply
                                                (lambda (#{a\ 19158}#
                                                         #{b\ 19159}#)
                                                  (eq? (syntax->datum
                                                         #{a\ 19158}#)
                                                       #:rest))
                                                #{tmp\ 19155}#)
                                              #f)
                                          (@apply
                                            (lambda (#{a\ 19162}# #{b\ 19163}#)
                                              (#{rest\ 19119}#
                                                #{b\ 19163}#
                                                (reverse #{rreq\ 19123}#)
                                                '()
                                                '()))
                                            #{tmp\ 19155}#)
                                          (let ((#{tmp\ 19164}#
                                                  (list #{tmp\ 19126}#)))
                                            (if (if #{tmp\ 19164}#
                                                  (@apply
                                                    (lambda (#{r\ 19166}#)
                                                      (#{id?\ 17315}#
                                                        #{r\ 19166}#))
                                                    #{tmp\ 19164}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{r\ 19168}#)
                                                  (#{rest\ 19119}#
                                                    #{r\ 19168}#
                                                    (reverse #{rreq\ 19123}#)
                                                    '()
                                                    '()))
                                                #{tmp\ 19164}#)
                                              (let ((#{else\ 19170}#
                                                      #{tmp\ 19126}#))
                                                (syntax-violation
                                                  'lambda*
                                                  "invalid argument list"
                                                  #{orig-args\ 19110}#
                                                  #{args\ 19122}#)))))))))))))))))
                (#{opt\ 19115}#
                  (lambda (#{args\ 19171}# #{req\ 19172}# #{ropt\ 19173}#)
                    (let ((#{tmp\ 19177}# #{args\ 19171}#))
                      (let ((#{tmp\ 19178}#
                              ($sc-dispatch #{tmp\ 19177}# (quote ()))))
                        (if #{tmp\ 19178}#
                          (@apply
                            (lambda ()
                              (#{check\ 19121}#
                                #{req\ 19172}#
                                (reverse #{ropt\ 19173}#)
                                #f
                                '()))
                            #{tmp\ 19178}#)
                          (let ((#{tmp\ 19179}#
                                  ($sc-dispatch
                                    #{tmp\ 19177}#
                                    '(any . any))))
                            (if (if #{tmp\ 19179}#
                                  (@apply
                                    (lambda (#{a\ 19182}# #{b\ 19183}#)
                                      (#{id?\ 17315}# #{a\ 19182}#))
                                    #{tmp\ 19179}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 19186}# #{b\ 19187}#)
                                  (#{opt\ 19115}#
                                    #{b\ 19187}#
                                    #{req\ 19172}#
                                    (cons (cons #{a\ 19186}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i19184" "i19185"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req ropt)
                                                       #((top) (top) (top))
                                                       #("i19174"
                                                         "i19175"
                                                         "i19176"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i19120"
                                                        "i19118"
                                                        "i19116"
                                                        "i19114"
                                                        "i19112"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i19111"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-application
                                                         chi-expr
                                                         chi
                                                         chi-top
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i17429"
                                                        "i17427"
                                                        "i17425"
                                                        "i17423"
                                                        "i17421"
                                                        "i17419"
                                                        "i17417"
                                                        "i17415"
                                                        "i17413"
                                                        "i17411"
                                                        "i17409"
                                                        "i17407"
                                                        "i17405"
                                                        "i17403"
                                                        "i17401"
                                                        "i17399"
                                                        "i17397"
                                                        "i17395"
                                                        "i17393"
                                                        "i17391"
                                                        "i17389"
                                                        "i17387"
                                                        "i17385"
                                                        "i17383"
                                                        "i17381"
                                                        "i17379"
                                                        "i17377"
                                                        "i17375"
                                                        "i17373"
                                                        "i17371"
                                                        "i17369"
                                                        "i17367"
                                                        "i17365"
                                                        "i17363"
                                                        "i17361"
                                                        "i17359"
                                                        "i17358"
                                                        "i17357"
                                                        "i17355"
                                                        "i17354"
                                                        "i17353"
                                                        "i17352"
                                                        "i17351"
                                                        "i17349"
                                                        "i17347"
                                                        "i17345"
                                                        "i17343"
                                                        "i17341"
                                                        "i17339"
                                                        "i17337"
                                                        "i17335"
                                                        "i17332"
                                                        "i17330"
                                                        "i17329"
                                                        "i17328"
                                                        "i17327"
                                                        "i17326"
                                                        "i17325"
                                                        "i17323"
                                                        "i17321"
                                                        "i17319"
                                                        "i17317"
                                                        "i17316"
                                                        "i17314"
                                                        "i17312"
                                                        "i17310"
                                                        "i17308"
                                                        "i17306"
                                                        "i17304"
                                                        "i17302"
                                                        "i17301"
                                                        "i17299"
                                                        "i17297"
                                                        "i17296"
                                                        "i17295"
                                                        "i17293"
                                                        "i17292"
                                                        "i17290"
                                                        "i17288"
                                                        "i17286"
                                                        "i17284"
                                                        "i17282"
                                                        "i17280"
                                                        "i17278"
                                                        "i17276"
                                                        "i17274"
                                                        "i17272"
                                                        "i17270"
                                                        "i17268"
                                                        "i17266"
                                                        "i17264"
                                                        "i17262"
                                                        "i17260"
                                                        "i17258"
                                                        "i17256"
                                                        "i17254"
                                                        "i17252"
                                                        "i17250"
                                                        "i17248"
                                                        "i17246"
                                                        "i17244"
                                                        "i17242"
                                                        "i17240"
                                                        "i17238"
                                                        "i17236"
                                                        "i17234"
                                                        "i17232"
                                                        "i17230"
                                                        "i17228"
                                                        "i17227"
                                                        "i17225"
                                                        "i17223"
                                                        "i17221"
                                                        "i17219"
                                                        "i17217"
                                                        "i17215"
                                                        "i17213"
                                                        "i17211"
                                                        "i17209"
                                                        "i17206"
                                                        "i17204"
                                                        "i17202"
                                                        "i17200"
                                                        "i17198"
                                                        "i17196"
                                                        "i17194"
                                                        "i17192"
                                                        "i17190"
                                                        "i17188"
                                                        "i17186"
                                                        "i17184"
                                                        "i17182"
                                                        "i17180"
                                                        "i17178"
                                                        "i17176"
                                                        "i17174"
                                                        "i17172"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors
                                                         and-map*)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i16974"
                                                        "i16973"
                                                        "i16972"
                                                        "i16970")))
                                                    (hygiene guile))))
                                          #{ropt\ 19173}#)))
                                #{tmp\ 19179}#)
                              (let ((#{tmp\ 19188}#
                                      ($sc-dispatch
                                        #{tmp\ 19177}#
                                        '((any any) . any))))
                                (if (if #{tmp\ 19188}#
                                      (@apply
                                        (lambda (#{a\ 19192}#
                                                 #{init\ 19193}#
                                                 #{b\ 19194}#)
                                          (#{id?\ 17315}# #{a\ 19192}#))
                                        #{tmp\ 19188}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 19198}#
                                             #{init\ 19199}#
                                             #{b\ 19200}#)
                                      (#{opt\ 19115}#
                                        #{b\ 19200}#
                                        #{req\ 19172}#
                                        (cons (list #{a\ 19198}#
                                                    #{init\ 19199}#)
                                              #{ropt\ 19173}#)))
                                    #{tmp\ 19188}#)
                                  (let ((#{tmp\ 19201}#
                                          ($sc-dispatch
                                            #{tmp\ 19177}#
                                            '(any . any))))
                                    (if (if #{tmp\ 19201}#
                                          (@apply
                                            (lambda (#{a\ 19204}# #{b\ 19205}#)
                                              (eq? (syntax->datum #{a\ 19204}#)
                                                   #:key))
                                            #{tmp\ 19201}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 19208}# #{b\ 19209}#)
                                          (#{key\ 19117}#
                                            #{b\ 19209}#
                                            #{req\ 19172}#
                                            (reverse #{ropt\ 19173}#)
                                            '()))
                                        #{tmp\ 19201}#)
                                      (let ((#{tmp\ 19210}#
                                              ($sc-dispatch
                                                #{tmp\ 19177}#
                                                '(any any))))
                                        (if (if #{tmp\ 19210}#
                                              (@apply
                                                (lambda (#{a\ 19213}#
                                                         #{b\ 19214}#)
                                                  (eq? (syntax->datum
                                                         #{a\ 19213}#)
                                                       #:rest))
                                                #{tmp\ 19210}#)
                                              #f)
                                          (@apply
                                            (lambda (#{a\ 19217}# #{b\ 19218}#)
                                              (#{rest\ 19119}#
                                                #{b\ 19218}#
                                                #{req\ 19172}#
                                                (reverse #{ropt\ 19173}#)
                                                '()))
                                            #{tmp\ 19210}#)
                                          (let ((#{tmp\ 19219}#
                                                  (list #{tmp\ 19177}#)))
                                            (if (if #{tmp\ 19219}#
                                                  (@apply
                                                    (lambda (#{r\ 19221}#)
                                                      (#{id?\ 17315}#
                                                        #{r\ 19221}#))
                                                    #{tmp\ 19219}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{r\ 19223}#)
                                                  (#{rest\ 19119}#
                                                    #{r\ 19223}#
                                                    #{req\ 19172}#
                                                    (reverse #{ropt\ 19173}#)
                                                    '()))
                                                #{tmp\ 19219}#)
                                              (let ((#{else\ 19225}#
                                                      #{tmp\ 19177}#))
                                                (syntax-violation
                                                  'lambda*
                                                  "invalid optional argument list"
                                                  #{orig-args\ 19110}#
                                                  #{args\ 19171}#)))))))))))))))))
                (#{key\ 19117}#
                  (lambda (#{args\ 19226}#
                           #{req\ 19227}#
                           #{opt\ 19228}#
                           #{rkey\ 19229}#)
                    (let ((#{tmp\ 19234}# #{args\ 19226}#))
                      (let ((#{tmp\ 19235}#
                              ($sc-dispatch #{tmp\ 19234}# (quote ()))))
                        (if #{tmp\ 19235}#
                          (@apply
                            (lambda ()
                              (#{check\ 19121}#
                                #{req\ 19227}#
                                #{opt\ 19228}#
                                #f
                                (cons #f (reverse #{rkey\ 19229}#))))
                            #{tmp\ 19235}#)
                          (let ((#{tmp\ 19236}#
                                  ($sc-dispatch
                                    #{tmp\ 19234}#
                                    '(any . any))))
                            (if (if #{tmp\ 19236}#
                                  (@apply
                                    (lambda (#{a\ 19239}# #{b\ 19240}#)
                                      (#{id?\ 17315}# #{a\ 19239}#))
                                    #{tmp\ 19236}#)
                                  #f)
                              (@apply
                                (lambda (#{a\ 19243}# #{b\ 19244}#)
                                  (let ((#{tmp\ 19246}#
                                          (symbol->keyword
                                            (syntax->datum #{a\ 19243}#))))
                                    (let ((#{k\ 19248}# #{tmp\ 19246}#))
                                      (#{key\ 19117}#
                                        #{b\ 19244}#
                                        #{req\ 19227}#
                                        #{opt\ 19228}#
                                        (cons (cons #{k\ 19248}#
                                                    (cons #{a\ 19243}#
                                                          '(#(syntax-object
                                                              #f
                                                              ((top)
                                                               #(ribcage
                                                                 #(k)
                                                                 #((top))
                                                                 #("i19247"))
                                                               #(ribcage
                                                                 #(a b)
                                                                 #((top) (top))
                                                                 #("i19241"
                                                                   "i19242"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(args
                                                                   req
                                                                   opt
                                                                   rkey)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i19230"
                                                                   "i19231"
                                                                   "i19232"
                                                                   "i19233"))
                                                               #(ribcage
                                                                 (check rest
                                                                        key
                                                                        opt
                                                                        req)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i19120"
                                                                  "i19118"
                                                                  "i19116"
                                                                  "i19114"
                                                                  "i19112"))
                                                               #(ribcage
                                                                 #(orig-args)
                                                                 #((top))
                                                                 #("i19111"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   chi-lambda-case
                                                                   lambda*-formals
                                                                   chi-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   chi-void
                                                                   eval-local-transformer
                                                                   chi-local-syntax
                                                                   chi-body
                                                                   chi-macro
                                                                   chi-application
                                                                   chi-expr
                                                                   chi
                                                                   chi-top
                                                                   syntax-type
                                                                   chi-when-list
                                                                   chi-install-global
                                                                   chi-top-sequence
                                                                   chi-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i17429"
                                                                  "i17427"
                                                                  "i17425"
                                                                  "i17423"
                                                                  "i17421"
                                                                  "i17419"
                                                                  "i17417"
                                                                  "i17415"
                                                                  "i17413"
                                                                  "i17411"
                                                                  "i17409"
                                                                  "i17407"
                                                                  "i17405"
                                                                  "i17403"
                                                                  "i17401"
                                                                  "i17399"
                                                                  "i17397"
                                                                  "i17395"
                                                                  "i17393"
                                                                  "i17391"
                                                                  "i17389"
                                                                  "i17387"
                                                                  "i17385"
                                                                  "i17383"
                                                                  "i17381"
                                                                  "i17379"
                                                                  "i17377"
                                                                  "i17375"
                                                                  "i17373"
                                                                  "i17371"
                                                                  "i17369"
                                                                  "i17367"
                                                                  "i17365"
                                                                  "i17363"
                                                                  "i17361"
                                                                  "i17359"
                                                                  "i17358"
                                                                  "i17357"
                                                                  "i17355"
                                                                  "i17354"
                                                                  "i17353"
                                                                  "i17352"
                                                                  "i17351"
                                                                  "i17349"
                                                                  "i17347"
                                                                  "i17345"
                                                                  "i17343"
                                                                  "i17341"
                                                                  "i17339"
                                                                  "i17337"
                                                                  "i17335"
                                                                  "i17332"
                                                                  "i17330"
                                                                  "i17329"
                                                                  "i17328"
                                                                  "i17327"
                                                                  "i17326"
                                                                  "i17325"
                                                                  "i17323"
                                                                  "i17321"
                                                                  "i17319"
                                                                  "i17317"
                                                                  "i17316"
                                                                  "i17314"
                                                                  "i17312"
                                                                  "i17310"
                                                                  "i17308"
                                                                  "i17306"
                                                                  "i17304"
                                                                  "i17302"
                                                                  "i17301"
                                                                  "i17299"
                                                                  "i17297"
                                                                  "i17296"
                                                                  "i17295"
                                                                  "i17293"
                                                                  "i17292"
                                                                  "i17290"
                                                                  "i17288"
                                                                  "i17286"
                                                                  "i17284"
                                                                  "i17282"
                                                                  "i17280"
                                                                  "i17278"
                                                                  "i17276"
                                                                  "i17274"
                                                                  "i17272"
                                                                  "i17270"
                                                                  "i17268"
                                                                  "i17266"
                                                                  "i17264"
                                                                  "i17262"
                                                                  "i17260"
                                                                  "i17258"
                                                                  "i17256"
                                                                  "i17254"
                                                                  "i17252"
                                                                  "i17250"
                                                                  "i17248"
                                                                  "i17246"
                                                                  "i17244"
                                                                  "i17242"
                                                                  "i17240"
                                                                  "i17238"
                                                                  "i17236"
                                                                  "i17234"
                                                                  "i17232"
                                                                  "i17230"
                                                                  "i17228"
                                                                  "i17227"
                                                                  "i17225"
                                                                  "i17223"
                                                                  "i17221"
                                                                  "i17219"
                                                                  "i17217"
                                                                  "i17215"
                                                                  "i17213"
                                                                  "i17211"
                                                                  "i17209"
                                                                  "i17206"
                                                                  "i17204"
                                                                  "i17202"
                                                                  "i17200"
                                                                  "i17198"
                                                                  "i17196"
                                                                  "i17194"
                                                                  "i17192"
                                                                  "i17190"
                                                                  "i17188"
                                                                  "i17186"
                                                                  "i17184"
                                                                  "i17182"
                                                                  "i17180"
                                                                  "i17178"
                                                                  "i17176"
                                                                  "i17174"
                                                                  "i17172"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors
                                                                   and-map*)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i16974"
                                                                  "i16973"
                                                                  "i16972"
                                                                  "i16970")))
                                                              (hygiene
                                                                guile)))))
                                              #{rkey\ 19229}#)))))
                                #{tmp\ 19236}#)
                              (let ((#{tmp\ 19249}#
                                      ($sc-dispatch
                                        #{tmp\ 19234}#
                                        '((any any) . any))))
                                (if (if #{tmp\ 19249}#
                                      (@apply
                                        (lambda (#{a\ 19253}#
                                                 #{init\ 19254}#
                                                 #{b\ 19255}#)
                                          (#{id?\ 17315}# #{a\ 19253}#))
                                        #{tmp\ 19249}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a\ 19259}#
                                             #{init\ 19260}#
                                             #{b\ 19261}#)
                                      (let ((#{tmp\ 19263}#
                                              (symbol->keyword
                                                (syntax->datum #{a\ 19259}#))))
                                        (let ((#{k\ 19265}# #{tmp\ 19263}#))
                                          (#{key\ 19117}#
                                            #{b\ 19261}#
                                            #{req\ 19227}#
                                            #{opt\ 19228}#
                                            (cons (list #{k\ 19265}#
                                                        #{a\ 19259}#
                                                        #{init\ 19260}#)
                                                  #{rkey\ 19229}#)))))
                                    #{tmp\ 19249}#)
                                  (let ((#{tmp\ 19266}#
                                          ($sc-dispatch
                                            #{tmp\ 19234}#
                                            '((any any any) . any))))
                                    (if (if #{tmp\ 19266}#
                                          (@apply
                                            (lambda (#{a\ 19271}#
                                                     #{init\ 19272}#
                                                     #{k\ 19273}#
                                                     #{b\ 19274}#)
                                              (if (#{id?\ 17315}# #{a\ 19271}#)
                                                (keyword?
                                                  (syntax->datum #{k\ 19273}#))
                                                #f))
                                            #{tmp\ 19266}#)
                                          #f)
                                      (@apply
                                        (lambda (#{a\ 19281}#
                                                 #{init\ 19282}#
                                                 #{k\ 19283}#
                                                 #{b\ 19284}#)
                                          (#{key\ 19117}#
                                            #{b\ 19284}#
                                            #{req\ 19227}#
                                            #{opt\ 19228}#
                                            (cons (list #{k\ 19283}#
                                                        #{a\ 19281}#
                                                        #{init\ 19282}#)
                                                  #{rkey\ 19229}#)))
                                        #{tmp\ 19266}#)
                                      (let ((#{tmp\ 19285}#
                                              ($sc-dispatch
                                                #{tmp\ 19234}#
                                                '(any))))
                                        (if (if #{tmp\ 19285}#
                                              (@apply
                                                (lambda (#{aok\ 19287}#)
                                                  (eq? (syntax->datum
                                                         #{aok\ 19287}#)
                                                       #:allow-other-keys))
                                                #{tmp\ 19285}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok\ 19289}#)
                                              (#{check\ 19121}#
                                                #{req\ 19227}#
                                                #{opt\ 19228}#
                                                #f
                                                (cons #t
                                                      (reverse
                                                        #{rkey\ 19229}#))))
                                            #{tmp\ 19285}#)
                                          (let ((#{tmp\ 19290}#
                                                  ($sc-dispatch
                                                    #{tmp\ 19234}#
                                                    '(any any any))))
                                            (if (if #{tmp\ 19290}#
                                                  (@apply
                                                    (lambda (#{aok\ 19294}#
                                                             #{a\ 19295}#
                                                             #{b\ 19296}#)
                                                      (if (eq? (syntax->datum
                                                                 #{aok\ 19294}#)
                                                               #:allow-other-keys)
                                                        (eq? (syntax->datum
                                                               #{a\ 19295}#)
                                                             #:rest)
                                                        #f))
                                                    #{tmp\ 19290}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{aok\ 19302}#
                                                         #{a\ 19303}#
                                                         #{b\ 19304}#)
                                                  (#{rest\ 19119}#
                                                    #{b\ 19304}#
                                                    #{req\ 19227}#
                                                    #{opt\ 19228}#
                                                    (cons #t
                                                          (reverse
                                                            #{rkey\ 19229}#))))
                                                #{tmp\ 19290}#)
                                              (let ((#{tmp\ 19305}#
                                                      ($sc-dispatch
                                                        #{tmp\ 19234}#
                                                        '(any . any))))
                                                (if (if #{tmp\ 19305}#
                                                      (@apply
                                                        (lambda (#{aok\ 19308}#
                                                                 #{r\ 19309}#)
                                                          (if (eq? (syntax->datum
                                                                     #{aok\ 19308}#)
                                                                   #:allow-other-keys)
                                                            (#{id?\ 17315}#
                                                              #{r\ 19309}#)
                                                            #f))
                                                        #{tmp\ 19305}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{aok\ 19314}#
                                                             #{r\ 19315}#)
                                                      (#{rest\ 19119}#
                                                        #{r\ 19315}#
                                                        #{req\ 19227}#
                                                        #{opt\ 19228}#
                                                        (cons #t
                                                              (reverse
                                                                #{rkey\ 19229}#))))
                                                    #{tmp\ 19305}#)
                                                  (let ((#{tmp\ 19316}#
                                                          ($sc-dispatch
                                                            #{tmp\ 19234}#
                                                            '(any any))))
                                                    (if (if #{tmp\ 19316}#
                                                          (@apply
                                                            (lambda (#{a\ 19319}#
                                                                     #{b\ 19320}#)
                                                              (eq? (syntax->datum
                                                                     #{a\ 19319}#)
                                                                   #:rest))
                                                            #{tmp\ 19316}#)
                                                          #f)
                                                      (@apply
                                                        (lambda (#{a\ 19323}#
                                                                 #{b\ 19324}#)
                                                          (#{rest\ 19119}#
                                                            #{b\ 19324}#
                                                            #{req\ 19227}#
                                                            #{opt\ 19228}#
                                                            (cons #f
                                                                  (reverse
                                                                    #{rkey\ 19229}#))))
                                                        #{tmp\ 19316}#)
                                                      (let ((#{tmp\ 19325}#
                                                              (list #{tmp\ 19234}#)))
                                                        (if (if #{tmp\ 19325}#
                                                              (@apply
                                                                (lambda (#{r\ 19327}#)
                                                                  (#{id?\ 17315}#
                                                                    #{r\ 19327}#))
                                                                #{tmp\ 19325}#)
                                                              #f)
                                                          (@apply
                                                            (lambda (#{r\ 19329}#)
                                                              (#{rest\ 19119}#
                                                                #{r\ 19329}#
                                                                #{req\ 19227}#
                                                                #{opt\ 19228}#
                                                                (cons #f
                                                                      (reverse
                                                                        #{rkey\ 19229}#))))
                                                            #{tmp\ 19325}#)
                                                          (let ((#{else\ 19331}#
                                                                  #{tmp\ 19234}#))
                                                            (syntax-violation
                                                              'lambda*
                                                              "invalid keyword argument list"
                                                              #{orig-args\ 19110}#
                                                              #{args\ 19226}#)))))))))))))))))))))))
                (#{rest\ 19119}#
                  (lambda (#{args\ 19332}#
                           #{req\ 19333}#
                           #{opt\ 19334}#
                           #{kw\ 19335}#)
                    (let ((#{tmp\ 19340}# #{args\ 19332}#))
                      (let ((#{tmp\ 19341}# (list #{tmp\ 19340}#)))
                        (if (if #{tmp\ 19341}#
                              (@apply
                                (lambda (#{r\ 19343}#)
                                  (#{id?\ 17315}# #{r\ 19343}#))
                                #{tmp\ 19341}#)
                              #f)
                          (@apply
                            (lambda (#{r\ 19345}#)
                              (#{check\ 19121}#
                                #{req\ 19333}#
                                #{opt\ 19334}#
                                #{r\ 19345}#
                                #{kw\ 19335}#))
                            #{tmp\ 19341}#)
                          (let ((#{else\ 19347}# #{tmp\ 19340}#))
                            (syntax-violation
                              'lambda*
                              "invalid rest argument"
                              #{orig-args\ 19110}#
                              #{args\ 19332}#)))))))
                (#{check\ 19121}#
                  (lambda (#{req\ 19348}#
                           #{opt\ 19349}#
                           #{rest\ 19350}#
                           #{kw\ 19351}#)
                    (if (#{distinct-bound-ids?\ 17380}#
                          (append
                            #{req\ 19348}#
                            (map car #{opt\ 19349}#)
                            (if #{rest\ 19350}#
                              (list #{rest\ 19350}#)
                              '())
                            (if (pair? #{kw\ 19351}#)
                              (map cadr (cdr #{kw\ 19351}#))
                              '())))
                      (values
                        #{req\ 19348}#
                        #{opt\ 19349}#
                        #{rest\ 19350}#
                        #{kw\ 19351}#)
                      (syntax-violation
                        'lambda*
                        "duplicate identifier in argument list"
                        #{orig-args\ 19110}#)))))
               (begin
                 (#{req\ 19113}# #{orig-args\ 19110}# (quote ()))))))
         (#{chi-lambda-case\ 17424}#
           (lambda (#{e\ 19359}#
                    #{r\ 19360}#
                    #{w\ 19361}#
                    #{s\ 19362}#
                    #{mod\ 19363}#
                    #{get-formals\ 19364}#
                    #{clauses\ 19365}#)
             (letrec*
               ((#{expand-req\ 19374}#
                  (lambda (#{req\ 19381}#
                           #{opt\ 19382}#
                           #{rest\ 19383}#
                           #{kw\ 19384}#
                           #{body\ 19385}#)
                    (begin
                      (let ((#{vars\ 19393}#
                              (map #{gen-var\ 17428}# #{req\ 19381}#))
                            (#{labels\ 19394}#
                              (#{gen-labels\ 17333}# #{req\ 19381}#)))
                        (begin
                          (let ((#{r*\ 19397}#
                                  (#{extend-var-env\ 17305}#
                                    #{labels\ 19394}#
                                    #{vars\ 19393}#
                                    #{r\ 19360}#))
                                (#{w*\ 19398}#
                                  (#{make-binding-wrap\ 17362}#
                                    #{req\ 19381}#
                                    #{labels\ 19394}#
                                    #{w\ 19361}#)))
                            (#{expand-opt\ 19376}#
                              (map syntax->datum #{req\ 19381}#)
                              #{opt\ 19382}#
                              #{rest\ 19383}#
                              #{kw\ 19384}#
                              #{body\ 19385}#
                              (reverse #{vars\ 19393}#)
                              #{r*\ 19397}#
                              #{w*\ 19398}#
                              '()
                              '())))))))
                (#{expand-opt\ 19376}#
                  (lambda (#{req\ 19399}#
                           #{opt\ 19400}#
                           #{rest\ 19401}#
                           #{kw\ 19402}#
                           #{body\ 19403}#
                           #{vars\ 19404}#
                           #{r*\ 19405}#
                           #{w*\ 19406}#
                           #{out\ 19407}#
                           #{inits\ 19408}#)
                    (if (pair? #{opt\ 19400}#)
                      (let ((#{tmp\ 19421}# (car #{opt\ 19400}#)))
                        (let ((#{tmp\ 19422}#
                                ($sc-dispatch
                                  #{tmp\ 19421}#
                                  '(any any))))
                          (if #{tmp\ 19422}#
                            (@apply
                              (lambda (#{id\ 19425}# #{i\ 19426}#)
                                (begin
                                  (let ((#{v\ 19429}#
                                          (#{gen-var\ 17428}# #{id\ 19425}#)))
                                    (begin
                                      (let ((#{l\ 19431}#
                                              (#{gen-labels\ 17333}#
                                                (list #{v\ 19429}#))))
                                        (begin
                                          (let ((#{r**\ 19433}#
                                                  (#{extend-var-env\ 17305}#
                                                    #{l\ 19431}#
                                                    (list #{v\ 19429}#)
                                                    #{r*\ 19405}#)))
                                            (begin
                                              (let ((#{w**\ 19435}#
                                                      (#{make-binding-wrap\ 17362}#
                                                        (list #{id\ 19425}#)
                                                        #{l\ 19431}#
                                                        #{w*\ 19406}#)))
                                                (#{expand-opt\ 19376}#
                                                  #{req\ 19399}#
                                                  (cdr #{opt\ 19400}#)
                                                  #{rest\ 19401}#
                                                  #{kw\ 19402}#
                                                  #{body\ 19403}#
                                                  (cons #{v\ 19429}#
                                                        #{vars\ 19404}#)
                                                  #{r**\ 19433}#
                                                  #{w**\ 19435}#
                                                  (cons (syntax->datum
                                                          #{id\ 19425}#)
                                                        #{out\ 19407}#)
                                                  (cons (#{chi\ 17400}#
                                                          #{i\ 19426}#
                                                          #{r*\ 19405}#
                                                          #{w*\ 19406}#
                                                          #{mod\ 19363}#)
                                                        #{inits\ 19408}#)))))))))))
                              #{tmp\ 19422}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp\ 19421}#))))
                      (if #{rest\ 19401}#
                        (begin
                          (let ((#{v\ 19440}#
                                  (#{gen-var\ 17428}# #{rest\ 19401}#)))
                            (begin
                              (let ((#{l\ 19442}#
                                      (#{gen-labels\ 17333}#
                                        (list #{v\ 19440}#))))
                                (begin
                                  (let ((#{r*\ 19444}#
                                          (#{extend-var-env\ 17305}#
                                            #{l\ 19442}#
                                            (list #{v\ 19440}#)
                                            #{r*\ 19405}#)))
                                    (begin
                                      (let ((#{w*\ 19446}#
                                              (#{make-binding-wrap\ 17362}#
                                                (list #{rest\ 19401}#)
                                                #{l\ 19442}#
                                                #{w*\ 19406}#)))
                                        (#{expand-kw\ 19378}#
                                          #{req\ 19399}#
                                          (if (pair? #{out\ 19407}#)
                                            (reverse #{out\ 19407}#)
                                            #f)
                                          (syntax->datum #{rest\ 19401}#)
                                          (if (pair? #{kw\ 19402}#)
                                            (cdr #{kw\ 19402}#)
                                            #{kw\ 19402}#)
                                          #{body\ 19403}#
                                          (cons #{v\ 19440}# #{vars\ 19404}#)
                                          #{r*\ 19444}#
                                          #{w*\ 19446}#
                                          (if (pair? #{kw\ 19402}#)
                                            (car #{kw\ 19402}#)
                                            #f)
                                          '()
                                          #{inits\ 19408}#)))))))))
                        (#{expand-kw\ 19378}#
                          #{req\ 19399}#
                          (if (pair? #{out\ 19407}#)
                            (reverse #{out\ 19407}#)
                            #f)
                          #f
                          (if (pair? #{kw\ 19402}#)
                            (cdr #{kw\ 19402}#)
                            #{kw\ 19402}#)
                          #{body\ 19403}#
                          #{vars\ 19404}#
                          #{r*\ 19405}#
                          #{w*\ 19406}#
                          (if (pair? #{kw\ 19402}#) (car #{kw\ 19402}#) #f)
                          '()
                          #{inits\ 19408}#)))))
                (#{expand-kw\ 19378}#
                  (lambda (#{req\ 19448}#
                           #{opt\ 19449}#
                           #{rest\ 19450}#
                           #{kw\ 19451}#
                           #{body\ 19452}#
                           #{vars\ 19453}#
                           #{r*\ 19454}#
                           #{w*\ 19455}#
                           #{aok\ 19456}#
                           #{out\ 19457}#
                           #{inits\ 19458}#)
                    (if (pair? #{kw\ 19451}#)
                      (let ((#{tmp\ 19472}# (car #{kw\ 19451}#)))
                        (let ((#{tmp\ 19473}#
                                ($sc-dispatch
                                  #{tmp\ 19472}#
                                  '(any any any))))
                          (if #{tmp\ 19473}#
                            (@apply
                              (lambda (#{k\ 19477}# #{id\ 19478}# #{i\ 19479}#)
                                (begin
                                  (let ((#{v\ 19482}#
                                          (#{gen-var\ 17428}# #{id\ 19478}#)))
                                    (begin
                                      (let ((#{l\ 19484}#
                                              (#{gen-labels\ 17333}#
                                                (list #{v\ 19482}#))))
                                        (begin
                                          (let ((#{r**\ 19486}#
                                                  (#{extend-var-env\ 17305}#
                                                    #{l\ 19484}#
                                                    (list #{v\ 19482}#)
                                                    #{r*\ 19454}#)))
                                            (begin
                                              (let ((#{w**\ 19488}#
                                                      (#{make-binding-wrap\ 17362}#
                                                        (list #{id\ 19478}#)
                                                        #{l\ 19484}#
                                                        #{w*\ 19455}#)))
                                                (#{expand-kw\ 19378}#
                                                  #{req\ 19448}#
                                                  #{opt\ 19449}#
                                                  #{rest\ 19450}#
                                                  (cdr #{kw\ 19451}#)
                                                  #{body\ 19452}#
                                                  (cons #{v\ 19482}#
                                                        #{vars\ 19453}#)
                                                  #{r**\ 19486}#
                                                  #{w**\ 19488}#
                                                  #{aok\ 19456}#
                                                  (cons (list (syntax->datum
                                                                #{k\ 19477}#)
                                                              (syntax->datum
                                                                #{id\ 19478}#)
                                                              #{v\ 19482}#)
                                                        #{out\ 19457}#)
                                                  (cons (#{chi\ 17400}#
                                                          #{i\ 19479}#
                                                          #{r*\ 19454}#
                                                          #{w*\ 19455}#
                                                          #{mod\ 19363}#)
                                                        #{inits\ 19458}#)))))))))))
                              #{tmp\ 19473}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp\ 19472}#))))
                      (#{expand-body\ 19380}#
                        #{req\ 19448}#
                        #{opt\ 19449}#
                        #{rest\ 19450}#
                        (if (begin
                              (let ((#{t\ 19492}# #{aok\ 19456}#))
                                (if #{t\ 19492}#
                                  #{t\ 19492}#
                                  (pair? #{out\ 19457}#))))
                          (cons #{aok\ 19456}# (reverse #{out\ 19457}#))
                          #f)
                        #{body\ 19452}#
                        (reverse #{vars\ 19453}#)
                        #{r*\ 19454}#
                        #{w*\ 19455}#
                        (reverse #{inits\ 19458}#)
                        '()))))
                (#{expand-body\ 19380}#
                  (lambda (#{req\ 19494}#
                           #{opt\ 19495}#
                           #{rest\ 19496}#
                           #{kw\ 19497}#
                           #{body\ 19498}#
                           #{vars\ 19499}#
                           #{r*\ 19500}#
                           #{w*\ 19501}#
                           #{inits\ 19502}#
                           #{meta\ 19503}#)
                    (let ((#{tmp\ 19514}# #{body\ 19498}#))
                      (let ((#{tmp\ 19515}#
                              ($sc-dispatch
                                #{tmp\ 19514}#
                                '(any any . each-any))))
                        (if (if #{tmp\ 19515}#
                              (@apply
                                (lambda (#{docstring\ 19519}#
                                         #{e1\ 19520}#
                                         #{e2\ 19521}#)
                                  (string?
                                    (syntax->datum #{docstring\ 19519}#)))
                                #{tmp\ 19515}#)
                              #f)
                          (@apply
                            (lambda (#{docstring\ 19525}#
                                     #{e1\ 19526}#
                                     #{e2\ 19527}#)
                              (#{expand-body\ 19380}#
                                #{req\ 19494}#
                                #{opt\ 19495}#
                                #{rest\ 19496}#
                                #{kw\ 19497}#
                                (cons #{e1\ 19526}# #{e2\ 19527}#)
                                #{vars\ 19499}#
                                #{r*\ 19500}#
                                #{w*\ 19501}#
                                #{inits\ 19502}#
                                (append
                                  #{meta\ 19503}#
                                  (list (cons 'documentation
                                              (syntax->datum
                                                #{docstring\ 19525}#))))))
                            #{tmp\ 19515}#)
                          (let ((#{tmp\ 19530}#
                                  ($sc-dispatch
                                    #{tmp\ 19514}#
                                    '(#(vector #(each (any . any)))
                                      any
                                      .
                                      each-any))))
                            (if #{tmp\ 19530}#
                              (@apply
                                (lambda (#{k\ 19535}#
                                         #{v\ 19536}#
                                         #{e1\ 19537}#
                                         #{e2\ 19538}#)
                                  (#{expand-body\ 19380}#
                                    #{req\ 19494}#
                                    #{opt\ 19495}#
                                    #{rest\ 19496}#
                                    #{kw\ 19497}#
                                    (cons #{e1\ 19537}# #{e2\ 19538}#)
                                    #{vars\ 19499}#
                                    #{r*\ 19500}#
                                    #{w*\ 19501}#
                                    #{inits\ 19502}#
                                    (append
                                      #{meta\ 19503}#
                                      (syntax->datum
                                        (map cons
                                             #{k\ 19535}#
                                             #{v\ 19536}#)))))
                                #{tmp\ 19530}#)
                              (let ((#{tmp\ 19542}#
                                      ($sc-dispatch
                                        #{tmp\ 19514}#
                                        '(any . each-any))))
                                (if #{tmp\ 19542}#
                                  (@apply
                                    (lambda (#{e1\ 19545}# #{e2\ 19546}#)
                                      (values
                                        #{meta\ 19503}#
                                        #{req\ 19494}#
                                        #{opt\ 19495}#
                                        #{rest\ 19496}#
                                        #{kw\ 19497}#
                                        #{inits\ 19502}#
                                        #{vars\ 19499}#
                                        (#{chi-body\ 17408}#
                                          (cons #{e1\ 19545}# #{e2\ 19546}#)
                                          (#{source-wrap\ 17386}#
                                            #{e\ 19359}#
                                            #{w\ 19361}#
                                            #{s\ 19362}#
                                            #{mod\ 19363}#)
                                          #{r*\ 19500}#
                                          #{w*\ 19501}#
                                          #{mod\ 19363}#)))
                                    #{tmp\ 19542}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 19514}#)))))))))))
               (begin
                 (let ((#{tmp\ 19548}# #{clauses\ 19365}#))
                   (let ((#{tmp\ 19549}#
                           ($sc-dispatch #{tmp\ 19548}# (quote ()))))
                     (if #{tmp\ 19549}#
                       (@apply
                         (lambda () (values (quote ()) #f))
                         #{tmp\ 19549}#)
                       (let ((#{tmp\ 19550}#
                               ($sc-dispatch
                                 #{tmp\ 19548}#
                                 '((any any . each-any)
                                   .
                                   #(each (any any . each-any))))))
                         (if #{tmp\ 19550}#
                           (@apply
                             (lambda (#{args\ 19557}#
                                      #{e1\ 19558}#
                                      #{e2\ 19559}#
                                      #{args*\ 19560}#
                                      #{e1*\ 19561}#
                                      #{e2*\ 19562}#)
                               (call-with-values
                                 (lambda ()
                                   (#{get-formals\ 19364}# #{args\ 19557}#))
                                 (lambda (#{req\ 19563}#
                                          #{opt\ 19564}#
                                          #{rest\ 19565}#
                                          #{kw\ 19566}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{expand-req\ 19374}#
                                         #{req\ 19563}#
                                         #{opt\ 19564}#
                                         #{rest\ 19565}#
                                         #{kw\ 19566}#
                                         (cons #{e1\ 19558}# #{e2\ 19559}#)))
                                     (lambda (#{meta\ 19572}#
                                              #{req\ 19573}#
                                              #{opt\ 19574}#
                                              #{rest\ 19575}#
                                              #{kw\ 19576}#
                                              #{inits\ 19577}#
                                              #{vars\ 19578}#
                                              #{body\ 19579}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{chi-lambda-case\ 17424}#
                                             #{e\ 19359}#
                                             #{r\ 19360}#
                                             #{w\ 19361}#
                                             #{s\ 19362}#
                                             #{mod\ 19363}#
                                             #{get-formals\ 19364}#
                                             (map (lambda (#{tmp\ 19590}#
                                                           #{tmp\ 19589}#
                                                           #{tmp\ 19588}#)
                                                    (cons #{tmp\ 19588}#
                                                          (cons #{tmp\ 19589}#
                                                                #{tmp\ 19590}#)))
                                                  #{e2*\ 19562}#
                                                  #{e1*\ 19561}#
                                                  #{args*\ 19560}#)))
                                         (lambda (#{meta*\ 19592}#
                                                  #{else*\ 19593}#)
                                           (values
                                             (append
                                               #{meta\ 19572}#
                                               #{meta*\ 19592}#)
                                             (#{build-lambda-case\ 17261}#
                                               #{s\ 19362}#
                                               #{req\ 19573}#
                                               #{opt\ 19574}#
                                               #{rest\ 19575}#
                                               #{kw\ 19576}#
                                               #{inits\ 19577}#
                                               #{vars\ 19578}#
                                               #{body\ 19579}#
                                               #{else*\ 19593}#)))))))))
                             #{tmp\ 19550}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{tmp\ 19548}#))))))))))
         (#{strip\ 17426}#
           (lambda (#{x\ 19596}# #{w\ 19597}#)
             (if (memq 'top
                       (#{wrap-marks\ 17322}# #{w\ 19597}#))
               #{x\ 19596}#
               (letrec*
                 ((#{f\ 19603}#
                    (lambda (#{x\ 19604}#)
                      (if (#{syntax-object?\ 17279}# #{x\ 19604}#)
                        (#{strip\ 17426}#
                          (#{syntax-object-expression\ 17281}#
                            #{x\ 19604}#)
                          (#{syntax-object-wrap\ 17283}# #{x\ 19604}#))
                        (if (pair? #{x\ 19604}#)
                          (begin
                            (let ((#{a\ 19611}#
                                    (#{f\ 19603}# (car #{x\ 19604}#)))
                                  (#{d\ 19612}#
                                    (#{f\ 19603}# (cdr #{x\ 19604}#))))
                              (if (if (eq? #{a\ 19611}# (car #{x\ 19604}#))
                                    (eq? #{d\ 19612}# (cdr #{x\ 19604}#))
                                    #f)
                                #{x\ 19604}#
                                (cons #{a\ 19611}# #{d\ 19612}#))))
                          (if (vector? #{x\ 19604}#)
                            (begin
                              (let ((#{old\ 19618}#
                                      (vector->list #{x\ 19604}#)))
                                (begin
                                  (let ((#{new\ 19620}#
                                          (map #{f\ 19603}# #{old\ 19618}#)))
                                    (if (#{and-map*\ 16971}#
                                          eq?
                                          #{old\ 19618}#
                                          #{new\ 19620}#)
                                      #{x\ 19604}#
                                      (list->vector #{new\ 19620}#))))))
                            #{x\ 19604}#))))))
                 (begin (#{f\ 19603}# #{x\ 19596}#))))))
         (#{gen-var\ 17428}#
           (lambda (#{id\ 19622}#)
             (begin
               (let ((#{id\ 19625}#
                       (if (#{syntax-object?\ 17279}# #{id\ 19622}#)
                         (#{syntax-object-expression\ 17281}#
                           #{id\ 19622}#)
                         #{id\ 19622}#)))
                 (gensym
                   (string-append
                     (symbol->string #{id\ 19625}#)
                     " "))))))
         (#{lambda-var-list\ 17430}#
           (lambda (#{vars\ 19627}#)
             (letrec*
               ((#{lvl\ 19633}#
                  (lambda (#{vars\ 19634}# #{ls\ 19635}# #{w\ 19636}#)
                    (if (pair? #{vars\ 19634}#)
                      (#{lvl\ 19633}#
                        (cdr #{vars\ 19634}#)
                        (cons (#{wrap\ 17384}#
                                (car #{vars\ 19634}#)
                                #{w\ 19636}#
                                #f)
                              #{ls\ 19635}#)
                        #{w\ 19636}#)
                      (if (#{id?\ 17315}# #{vars\ 19634}#)
                        (cons (#{wrap\ 17384}# #{vars\ 19634}# #{w\ 19636}# #f)
                              #{ls\ 19635}#)
                        (if (null? #{vars\ 19634}#)
                          #{ls\ 19635}#
                          (if (#{syntax-object?\ 17279}# #{vars\ 19634}#)
                            (#{lvl\ 19633}#
                              (#{syntax-object-expression\ 17281}#
                                #{vars\ 19634}#)
                              #{ls\ 19635}#
                              (#{join-wraps\ 17366}#
                                #{w\ 19636}#
                                (#{syntax-object-wrap\ 17283}#
                                  #{vars\ 19634}#)))
                            (cons #{vars\ 19634}# #{ls\ 19635}#))))))))
               (begin
                 (#{lvl\ 19633}#
                   #{vars\ 19627}#
                   '()
                   '(())))))))
        (begin
          (set! #{make-primitive-ref\ 17177}#
            (lambda (#{src\ 17639}# #{name\ 17640}#)
              (make-struct/no-tail
                (vector-ref %expanded-vtables 2)
                #{src\ 17639}#
                #{name\ 17640}#)))
          (set! #{fx+\ 17216}# +)
          (set! #{fx-\ 17218}# -)
          (set! #{fx=\ 17220}# =)
          (set! #{fx<\ 17222}# <)
          (set! #{set-syntax-object-expression!\ 17287}#
            (lambda (#{x\ 18017}# #{update\ 18018}#)
              (vector-set! #{x\ 18017}# 1 #{update\ 18018}#)))
          (set! #{set-syntax-object-wrap!\ 17289}#
            (lambda (#{x\ 18021}# #{update\ 18022}#)
              (vector-set! #{x\ 18021}# 2 #{update\ 18022}#)))
          (set! #{set-syntax-object-module!\ 17291}#
            (lambda (#{x\ 18025}# #{update\ 18026}#)
              (vector-set! #{x\ 18025}# 3 #{update\ 18026}#)))
          (set! #{binding-type\ 17298}# car)
          (set! #{binding-value\ 17300}# cdr)
          (set! #{make-wrap\ 17320}# cons)
          (set! #{wrap-marks\ 17322}# car)
          (set! #{wrap-subst\ 17324}# cdr)
          (set! #{ribcage?\ 17338}#
            (lambda (#{x\ 18103}#)
              (if (vector? #{x\ 18103}#)
                (if (= (vector-length #{x\ 18103}#) 4)
                  (eq? (vector-ref #{x\ 18103}# 0) (quote ribcage))
                  #f)
                #f)))
          (begin
            (#{global-extend\ 17311}#
              'local-syntax
              'letrec-syntax
              #t)
            (#{global-extend\ 17311}#
              'local-syntax
              'let-syntax
              #f)
            (#{global-extend\ 17311}#
              'core
              'fluid-let-syntax
              (lambda (#{e\ 19647}#
                       #{r\ 19648}#
                       #{w\ 19649}#
                       #{s\ 19650}#
                       #{mod\ 19651}#)
                (let ((#{tmp\ 19657}# #{e\ 19647}#))
                  (let ((#{tmp\ 19658}#
                          ($sc-dispatch
                            #{tmp\ 19657}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 19658}#
                          (@apply
                            (lambda (#{var\ 19663}#
                                     #{val\ 19664}#
                                     #{e1\ 19665}#
                                     #{e2\ 19666}#)
                              (#{valid-bound-ids?\ 17378}# #{var\ 19663}#))
                            #{tmp\ 19658}#)
                          #f)
                      (@apply
                        (lambda (#{var\ 19672}#
                                 #{val\ 19673}#
                                 #{e1\ 19674}#
                                 #{e2\ 19675}#)
                          (begin
                            (let ((#{names\ 19677}#
                                    (map (lambda (#{x\ 19678}#)
                                           (#{id-var-name\ 17372}#
                                             #{x\ 19678}#
                                             #{w\ 19649}#))
                                         #{var\ 19672}#)))
                              (begin
                                (for-each
                                  (lambda (#{id\ 19681}# #{n\ 19682}#)
                                    (begin
                                      (let ((#{atom-key\ 19687}#
                                              (#{binding-type\ 17298}#
                                                (#{lookup\ 17309}#
                                                  #{n\ 19682}#
                                                  #{r\ 19648}#
                                                  #{mod\ 19651}#))))
                                        (if (eqv? #{atom-key\ 19687}#
                                                  'displaced-lexical)
                                          (syntax-violation
                                            'fluid-let-syntax
                                            "identifier out of context"
                                            #{e\ 19647}#
                                            (#{source-wrap\ 17386}#
                                              #{id\ 19681}#
                                              #{w\ 19649}#
                                              #{s\ 19650}#
                                              #{mod\ 19651}#))))))
                                  #{var\ 19672}#
                                  #{names\ 19677}#)
                                (#{chi-body\ 17408}#
                                  (cons #{e1\ 19674}# #{e2\ 19675}#)
                                  (#{source-wrap\ 17386}#
                                    #{e\ 19647}#
                                    #{w\ 19649}#
                                    #{s\ 19650}#
                                    #{mod\ 19651}#)
                                  (#{extend-env\ 17303}#
                                    #{names\ 19677}#
                                    (begin
                                      (let ((#{trans-r\ 19692}#
                                              (#{macros-only-env\ 17307}#
                                                #{r\ 19648}#)))
                                        (map (lambda (#{x\ 19693}#)
                                               (cons 'macro
                                                     (#{eval-local-transformer\ 17412}#
                                                       (#{chi\ 17400}#
                                                         #{x\ 19693}#
                                                         #{trans-r\ 19692}#
                                                         #{w\ 19649}#
                                                         #{mod\ 19651}#)
                                                       #{mod\ 19651}#)))
                                             #{val\ 19673}#)))
                                    #{r\ 19648}#)
                                  #{w\ 19649}#
                                  #{mod\ 19651}#)))))
                        #{tmp\ 19658}#)
                      (let ((#{_\ 19698}# #{tmp\ 19657}#))
                        (syntax-violation
                          'fluid-let-syntax
                          "bad syntax"
                          (#{source-wrap\ 17386}#
                            #{e\ 19647}#
                            #{w\ 19649}#
                            #{s\ 19650}#
                            #{mod\ 19651}#))))))))
            (#{global-extend\ 17311}#
              'core
              'quote
              (lambda (#{e\ 19699}#
                       #{r\ 19700}#
                       #{w\ 19701}#
                       #{s\ 19702}#
                       #{mod\ 19703}#)
                (let ((#{tmp\ 19709}# #{e\ 19699}#))
                  (let ((#{tmp\ 19710}#
                          ($sc-dispatch #{tmp\ 19709}# (quote (_ any)))))
                    (if #{tmp\ 19710}#
                      (@apply
                        (lambda (#{e\ 19712}#)
                          (#{build-data\ 17265}#
                            #{s\ 19702}#
                            (#{strip\ 17426}# #{e\ 19712}# #{w\ 19701}#)))
                        #{tmp\ 19710}#)
                      (let ((#{_\ 19714}# #{tmp\ 19709}#))
                        (syntax-violation
                          'quote
                          "bad syntax"
                          (#{source-wrap\ 17386}#
                            #{e\ 19699}#
                            #{w\ 19701}#
                            #{s\ 19702}#
                            #{mod\ 19703}#))))))))
            (#{global-extend\ 17311}#
              'core
              'syntax
              (letrec*
                ((#{gen-syntax\ 19716}#
                   (lambda (#{src\ 19731}#
                            #{e\ 19732}#
                            #{r\ 19733}#
                            #{maps\ 19734}#
                            #{ellipsis?\ 19735}#
                            #{mod\ 19736}#)
                     (if (#{id?\ 17315}# #{e\ 19732}#)
                       (begin
                         (let ((#{label\ 19744}#
                                 (#{id-var-name\ 17372}#
                                   #{e\ 19732}#
                                   '(()))))
                           (begin
                             (let ((#{b\ 19747}#
                                     (#{lookup\ 17309}#
                                       #{label\ 19744}#
                                       #{r\ 19733}#
                                       #{mod\ 19736}#)))
                               (if (eq? (#{binding-type\ 17298}# #{b\ 19747}#)
                                        'syntax)
                                 (call-with-values
                                   (lambda ()
                                     (begin
                                       (let ((#{var.lev\ 19749}#
                                               (#{binding-value\ 17300}#
                                                 #{b\ 19747}#)))
                                         (#{gen-ref\ 19718}#
                                           #{src\ 19731}#
                                           (car #{var.lev\ 19749}#)
                                           (cdr #{var.lev\ 19749}#)
                                           #{maps\ 19734}#))))
                                   (lambda (#{var\ 19750}# #{maps\ 19751}#)
                                     (values
                                       (list (quote ref) #{var\ 19750}#)
                                       #{maps\ 19751}#)))
                                 (if (#{ellipsis?\ 19735}# #{e\ 19732}#)
                                   (syntax-violation
                                     'syntax
                                     "misplaced ellipsis"
                                     #{src\ 19731}#)
                                   (values
                                     (list (quote quote) #{e\ 19732}#)
                                     #{maps\ 19734}#)))))))
                       (let ((#{tmp\ 19756}# #{e\ 19732}#))
                         (let ((#{tmp\ 19757}#
                                 ($sc-dispatch
                                   #{tmp\ 19756}#
                                   '(any any))))
                           (if (if #{tmp\ 19757}#
                                 (@apply
                                   (lambda (#{dots\ 19760}# #{e\ 19761}#)
                                     (#{ellipsis?\ 19735}# #{dots\ 19760}#))
                                   #{tmp\ 19757}#)
                                 #f)
                             (@apply
                               (lambda (#{dots\ 19764}# #{e\ 19765}#)
                                 (#{gen-syntax\ 19716}#
                                   #{src\ 19731}#
                                   #{e\ 19765}#
                                   #{r\ 19733}#
                                   #{maps\ 19734}#
                                   (lambda (#{x\ 19766}#) #f)
                                   #{mod\ 19736}#))
                               #{tmp\ 19757}#)
                             (let ((#{tmp\ 19768}#
                                     ($sc-dispatch
                                       #{tmp\ 19756}#
                                       '(any any . any))))
                               (if (if #{tmp\ 19768}#
                                     (@apply
                                       (lambda (#{x\ 19772}#
                                                #{dots\ 19773}#
                                                #{y\ 19774}#)
                                         (#{ellipsis?\ 19735}#
                                           #{dots\ 19773}#))
                                       #{tmp\ 19768}#)
                                     #f)
                                 (@apply
                                   (lambda (#{x\ 19778}#
                                            #{dots\ 19779}#
                                            #{y\ 19780}#)
                                     (letrec*
                                       ((#{f\ 19784}#
                                          (lambda (#{y\ 19785}# #{k\ 19786}#)
                                            (let ((#{tmp\ 19793}#
                                                    #{y\ 19785}#))
                                              (let ((#{tmp\ 19794}#
                                                      ($sc-dispatch
                                                        #{tmp\ 19793}#
                                                        '(any . any))))
                                                (if (if #{tmp\ 19794}#
                                                      (@apply
                                                        (lambda (#{dots\ 19797}#
                                                                 #{y\ 19798}#)
                                                          (#{ellipsis?\ 19735}#
                                                            #{dots\ 19797}#))
                                                        #{tmp\ 19794}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{dots\ 19801}#
                                                             #{y\ 19802}#)
                                                      (#{f\ 19784}#
                                                        #{y\ 19802}#
                                                        (lambda (#{maps\ 19803}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{k\ 19786}#
                                                                (cons '()
                                                                      #{maps\ 19803}#)))
                                                            (lambda (#{x\ 19805}#
                                                                     #{maps\ 19806}#)
                                                              (if (null? (car #{maps\ 19806}#))
                                                                (syntax-violation
                                                                  'syntax
                                                                  "extra ellipsis"
                                                                  #{src\ 19731}#)
                                                                (values
                                                                  (#{gen-mappend\ 19720}#
                                                                    #{x\ 19805}#
                                                                    (car #{maps\ 19806}#))
                                                                  (cdr #{maps\ 19806}#))))))))
                                                    #{tmp\ 19794}#)
                                                  (let ((#{_\ 19810}#
                                                          #{tmp\ 19793}#))
                                                    (call-with-values
                                                      (lambda ()
                                                        (#{gen-syntax\ 19716}#
                                                          #{src\ 19731}#
                                                          #{y\ 19785}#
                                                          #{r\ 19733}#
                                                          #{maps\ 19734}#
                                                          #{ellipsis?\ 19735}#
                                                          #{mod\ 19736}#))
                                                      (lambda (#{y\ 19811}#
                                                               #{maps\ 19812}#)
                                                        (call-with-values
                                                          (lambda ()
                                                            (#{k\ 19786}#
                                                              #{maps\ 19812}#))
                                                          (lambda (#{x\ 19815}#
                                                                   #{maps\ 19816}#)
                                                            (values
                                                              (#{gen-append\ 19726}#
                                                                #{x\ 19815}#
                                                                #{y\ 19811}#)
                                                              #{maps\ 19816}#))))))))))))
                                       (begin
                                         (#{f\ 19784}#
                                           #{y\ 19780}#
                                           (lambda (#{maps\ 19787}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 19716}#
                                                   #{src\ 19731}#
                                                   #{x\ 19778}#
                                                   #{r\ 19733}#
                                                   (cons '()
                                                         #{maps\ 19787}#)
                                                   #{ellipsis?\ 19735}#
                                                   #{mod\ 19736}#))
                                               (lambda (#{x\ 19789}#
                                                        #{maps\ 19790}#)
                                                 (if (null? (car #{maps\ 19790}#))
                                                   (syntax-violation
                                                     'syntax
                                                     "extra ellipsis"
                                                     #{src\ 19731}#)
                                                   (values
                                                     (#{gen-map\ 19722}#
                                                       #{x\ 19789}#
                                                       (car #{maps\ 19790}#))
                                                     (cdr #{maps\ 19790}#))))))))))
                                   #{tmp\ 19768}#)
                                 (let ((#{tmp\ 19819}#
                                         ($sc-dispatch
                                           #{tmp\ 19756}#
                                           '(any . any))))
                                   (if #{tmp\ 19819}#
                                     (@apply
                                       (lambda (#{x\ 19822}# #{y\ 19823}#)
                                         (call-with-values
                                           (lambda ()
                                             (#{gen-syntax\ 19716}#
                                               #{src\ 19731}#
                                               #{x\ 19822}#
                                               #{r\ 19733}#
                                               #{maps\ 19734}#
                                               #{ellipsis?\ 19735}#
                                               #{mod\ 19736}#))
                                           (lambda (#{x\ 19824}#
                                                    #{maps\ 19825}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 19716}#
                                                   #{src\ 19731}#
                                                   #{y\ 19823}#
                                                   #{r\ 19733}#
                                                   #{maps\ 19825}#
                                                   #{ellipsis?\ 19735}#
                                                   #{mod\ 19736}#))
                                               (lambda (#{y\ 19828}#
                                                        #{maps\ 19829}#)
                                                 (values
                                                   (#{gen-cons\ 19724}#
                                                     #{x\ 19824}#
                                                     #{y\ 19828}#)
                                                   #{maps\ 19829}#))))))
                                       #{tmp\ 19819}#)
                                     (let ((#{tmp\ 19832}#
                                             ($sc-dispatch
                                               #{tmp\ 19756}#
                                               '#(vector (any . each-any)))))
                                       (if #{tmp\ 19832}#
                                         (@apply
                                           (lambda (#{e1\ 19835}#
                                                    #{e2\ 19836}#)
                                             (call-with-values
                                               (lambda ()
                                                 (#{gen-syntax\ 19716}#
                                                   #{src\ 19731}#
                                                   (cons #{e1\ 19835}#
                                                         #{e2\ 19836}#)
                                                   #{r\ 19733}#
                                                   #{maps\ 19734}#
                                                   #{ellipsis?\ 19735}#
                                                   #{mod\ 19736}#))
                                               (lambda (#{e\ 19838}#
                                                        #{maps\ 19839}#)
                                                 (values
                                                   (#{gen-vector\ 19728}#
                                                     #{e\ 19838}#)
                                                   #{maps\ 19839}#))))
                                           #{tmp\ 19832}#)
                                         (let ((#{_\ 19843}# #{tmp\ 19756}#))
                                           (values
                                             (list (quote quote) #{e\ 19732}#)
                                             #{maps\ 19734}#))))))))))))))
                 (#{gen-ref\ 19718}#
                   (lambda (#{src\ 19845}#
                            #{var\ 19846}#
                            #{level\ 19847}#
                            #{maps\ 19848}#)
                     (if (#{fx=\ 17220}# #{level\ 19847}# 0)
                       (values #{var\ 19846}# #{maps\ 19848}#)
                       (if (null? #{maps\ 19848}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 19845}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 19718}#
                               #{src\ 19845}#
                               #{var\ 19846}#
                               (#{fx-\ 17218}# #{level\ 19847}# 1)
                               (cdr #{maps\ 19848}#)))
                           (lambda (#{outer-var\ 19853}# #{outer-maps\ 19854}#)
                             (begin
                               (let ((#{b\ 19858}#
                                       (assq #{outer-var\ 19853}#
                                             (car #{maps\ 19848}#))))
                                 (if #{b\ 19858}#
                                   (values (cdr #{b\ 19858}#) #{maps\ 19848}#)
                                   (begin
                                     (let ((#{inner-var\ 19860}#
                                             (#{gen-var\ 17428}# (quote tmp))))
                                       (values
                                         #{inner-var\ 19860}#
                                         (cons (cons (cons #{outer-var\ 19853}#
                                                           #{inner-var\ 19860}#)
                                                     (car #{maps\ 19848}#))
                                               #{outer-maps\ 19854}#)))))))))))))
                 (#{gen-mappend\ 19720}#
                   (lambda (#{e\ 19861}# #{map-env\ 19862}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 19722}#
                             #{e\ 19861}#
                             #{map-env\ 19862}#))))
                 (#{gen-map\ 19722}#
                   (lambda (#{e\ 19866}# #{map-env\ 19867}#)
                     (begin
                       (let ((#{formals\ 19872}# (map cdr #{map-env\ 19867}#))
                             (#{actuals\ 19873}#
                               (map (lambda (#{x\ 19874}#)
                                      (list (quote ref) (car #{x\ 19874}#)))
                                    #{map-env\ 19867}#)))
                         (if (eq? (car #{e\ 19866}#) (quote ref))
                           (car #{actuals\ 19873}#)
                           (if (and-map
                                 (lambda (#{x\ 19881}#)
                                   (if (eq? (car #{x\ 19881}#) (quote ref))
                                     (memq (car (cdr #{x\ 19881}#))
                                           #{formals\ 19872}#)
                                     #f))
                                 (cdr #{e\ 19866}#))
                             (cons 'map
                                   (cons (list 'primitive
                                               (car #{e\ 19866}#))
                                         (map (begin
                                                (let ((#{r\ 19887}#
                                                        (map cons
                                                             #{formals\ 19872}#
                                                             #{actuals\ 19873}#)))
                                                  (lambda (#{x\ 19888}#)
                                                    (cdr (assq (car (cdr #{x\ 19888}#))
                                                               #{r\ 19887}#)))))
                                              (cdr #{e\ 19866}#))))
                             (cons 'map
                                   (cons (list 'lambda
                                               #{formals\ 19872}#
                                               #{e\ 19866}#)
                                         #{actuals\ 19873}#))))))))
                 (#{gen-cons\ 19724}#
                   (lambda (#{x\ 19892}# #{y\ 19893}#)
                     (begin
                       (let ((#{atom-key\ 19898}# (car #{y\ 19893}#)))
                         (if (eqv? #{atom-key\ 19898}# (quote quote))
                           (if (eq? (car #{x\ 19892}#) (quote quote))
                             (list 'quote
                                   (cons (car (cdr #{x\ 19892}#))
                                         (car (cdr #{y\ 19893}#))))
                             (if (eq? (car (cdr #{y\ 19893}#)) (quote ()))
                               (list (quote list) #{x\ 19892}#)
                               (list (quote cons) #{x\ 19892}# #{y\ 19893}#)))
                           (if (eqv? #{atom-key\ 19898}# (quote list))
                             (cons 'list
                                   (cons #{x\ 19892}# (cdr #{y\ 19893}#)))
                             (list 'cons
                                   #{x\ 19892}#
                                   #{y\ 19893}#)))))))
                 (#{gen-append\ 19726}#
                   (lambda (#{x\ 19907}# #{y\ 19908}#)
                     (if (equal? #{y\ 19908}# (quote (quote ())))
                       #{x\ 19907}#
                       (list (quote append) #{x\ 19907}# #{y\ 19908}#))))
                 (#{gen-vector\ 19728}#
                   (lambda (#{x\ 19912}#)
                     (if (eq? (car #{x\ 19912}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 19912}#))
                       (if (eq? (car #{x\ 19912}#) (quote quote))
                         (list 'quote
                               (list->vector (car (cdr #{x\ 19912}#))))
                         (list (quote list->vector) #{x\ 19912}#)))))
                 (#{regen\ 19730}#
                   (lambda (#{x\ 19922}#)
                     (begin
                       (let ((#{atom-key\ 19926}# (car #{x\ 19922}#)))
                         (if (eqv? #{atom-key\ 19926}# (quote ref))
                           (#{build-lexical-reference\ 17245}#
                             'value
                             #f
                             (car (cdr #{x\ 19922}#))
                             (car (cdr #{x\ 19922}#)))
                           (if (eqv? #{atom-key\ 19926}# (quote primitive))
                             (#{build-primref\ 17263}#
                               #f
                               (car (cdr #{x\ 19922}#)))
                             (if (eqv? #{atom-key\ 19926}# (quote quote))
                               (#{build-data\ 17265}#
                                 #f
                                 (car (cdr #{x\ 19922}#)))
                               (if (eqv? #{atom-key\ 19926}# (quote lambda))
                                 (if (list? (car (cdr #{x\ 19922}#)))
                                   (#{build-simple-lambda\ 17257}#
                                     #f
                                     (car (cdr #{x\ 19922}#))
                                     #f
                                     (car (cdr #{x\ 19922}#))
                                     '()
                                     (#{regen\ 19730}#
                                       (car (cdr (cdr #{x\ 19922}#)))))
                                   (error "how did we get here" #{x\ 19922}#))
                                 (#{build-application\ 17239}#
                                   #f
                                   (#{build-primref\ 17263}#
                                     #f
                                     (car #{x\ 19922}#))
                                   (map #{regen\ 19730}#
                                        (cdr #{x\ 19922}#))))))))))))
                (begin
                  (lambda (#{e\ 19938}#
                           #{r\ 19939}#
                           #{w\ 19940}#
                           #{s\ 19941}#
                           #{mod\ 19942}#)
                    (begin
                      (let ((#{e\ 19949}#
                              (#{source-wrap\ 17386}#
                                #{e\ 19938}#
                                #{w\ 19940}#
                                #{s\ 19941}#
                                #{mod\ 19942}#)))
                        (let ((#{tmp\ 19950}# #{e\ 19949}#))
                          (let ((#{tmp\ 19951}#
                                  ($sc-dispatch
                                    #{tmp\ 19950}#
                                    '(_ any))))
                            (if #{tmp\ 19951}#
                              (@apply
                                (lambda (#{x\ 19953}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{gen-syntax\ 19716}#
                                        #{e\ 19949}#
                                        #{x\ 19953}#
                                        #{r\ 19939}#
                                        '()
                                        #{ellipsis?\ 17416}#
                                        #{mod\ 19942}#))
                                    (lambda (#{e\ 19954}# #{maps\ 19955}#)
                                      (#{regen\ 19730}# #{e\ 19954}#))))
                                #{tmp\ 19951}#)
                              (let ((#{_\ 19959}# #{tmp\ 19950}#))
                                (syntax-violation
                                  'syntax
                                  "bad `syntax' form"
                                  #{e\ 19949}#)))))))))))
            (#{global-extend\ 17311}#
              'core
              'lambda
              (lambda (#{e\ 19960}#
                       #{r\ 19961}#
                       #{w\ 19962}#
                       #{s\ 19963}#
                       #{mod\ 19964}#)
                (let ((#{tmp\ 19970}# #{e\ 19960}#))
                  (let ((#{tmp\ 19971}#
                          ($sc-dispatch
                            #{tmp\ 19970}#
                            '(_ any any . each-any))))
                    (if #{tmp\ 19971}#
                      (@apply
                        (lambda (#{args\ 19975}# #{e1\ 19976}# #{e2\ 19977}#)
                          (call-with-values
                            (lambda ()
                              (#{lambda-formals\ 17418}# #{args\ 19975}#))
                            (lambda (#{req\ 19978}#
                                     #{opt\ 19979}#
                                     #{rest\ 19980}#
                                     #{kw\ 19981}#)
                              (letrec*
                                ((#{lp\ 19989}#
                                   (lambda (#{body\ 19990}# #{meta\ 19991}#)
                                     (let ((#{tmp\ 19993}# #{body\ 19990}#))
                                       (let ((#{tmp\ 19994}#
                                               ($sc-dispatch
                                                 #{tmp\ 19993}#
                                                 '(any any . each-any))))
                                         (if (if #{tmp\ 19994}#
                                               (@apply
                                                 (lambda (#{docstring\ 19998}#
                                                          #{e1\ 19999}#
                                                          #{e2\ 20000}#)
                                                   (string?
                                                     (syntax->datum
                                                       #{docstring\ 19998}#)))
                                                 #{tmp\ 19994}#)
                                               #f)
                                           (@apply
                                             (lambda (#{docstring\ 20004}#
                                                      #{e1\ 20005}#
                                                      #{e2\ 20006}#)
                                               (#{lp\ 19989}#
                                                 (cons #{e1\ 20005}#
                                                       #{e2\ 20006}#)
                                                 (append
                                                   #{meta\ 19991}#
                                                   (list (cons 'documentation
                                                               (syntax->datum
                                                                 #{docstring\ 20004}#))))))
                                             #{tmp\ 19994}#)
                                           (let ((#{tmp\ 20009}#
                                                   ($sc-dispatch
                                                     #{tmp\ 19993}#
                                                     '(#(vector
                                                         #(each (any . any)))
                                                       any
                                                       .
                                                       each-any))))
                                             (if #{tmp\ 20009}#
                                               (@apply
                                                 (lambda (#{k\ 20014}#
                                                          #{v\ 20015}#
                                                          #{e1\ 20016}#
                                                          #{e2\ 20017}#)
                                                   (#{lp\ 19989}#
                                                     (cons #{e1\ 20016}#
                                                           #{e2\ 20017}#)
                                                     (append
                                                       #{meta\ 19991}#
                                                       (syntax->datum
                                                         (map cons
                                                              #{k\ 20014}#
                                                              #{v\ 20015}#)))))
                                                 #{tmp\ 20009}#)
                                               (let ((#{_\ 20022}#
                                                       #{tmp\ 19993}#))
                                                 (#{chi-simple-lambda\ 17420}#
                                                   #{e\ 19960}#
                                                   #{r\ 19961}#
                                                   #{w\ 19962}#
                                                   #{s\ 19963}#
                                                   #{mod\ 19964}#
                                                   #{req\ 19978}#
                                                   #{rest\ 19980}#
                                                   #{meta\ 19991}#
                                                   #{body\ 19990}#))))))))))
                                (begin
                                  (#{lp\ 19989}#
                                    (cons #{e1\ 19976}# #{e2\ 19977}#)
                                    '()))))))
                        #{tmp\ 19971}#)
                      (let ((#{_\ 20024}# #{tmp\ 19970}#))
                        (syntax-violation
                          'lambda
                          "bad lambda"
                          #{e\ 19960}#)))))))
            (#{global-extend\ 17311}#
              'core
              'lambda*
              (lambda (#{e\ 20025}#
                       #{r\ 20026}#
                       #{w\ 20027}#
                       #{s\ 20028}#
                       #{mod\ 20029}#)
                (let ((#{tmp\ 20035}# #{e\ 20025}#))
                  (let ((#{tmp\ 20036}#
                          ($sc-dispatch
                            #{tmp\ 20035}#
                            '(_ any any . each-any))))
                    (if #{tmp\ 20036}#
                      (@apply
                        (lambda (#{args\ 20040}# #{e1\ 20041}# #{e2\ 20042}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 17424}#
                                #{e\ 20025}#
                                #{r\ 20026}#
                                #{w\ 20027}#
                                #{s\ 20028}#
                                #{mod\ 20029}#
                                #{lambda*-formals\ 17422}#
                                (list (cons #{args\ 20040}#
                                            (cons #{e1\ 20041}#
                                                  #{e2\ 20042}#)))))
                            (lambda (#{meta\ 20044}# #{lcase\ 20045}#)
                              (#{build-case-lambda\ 17259}#
                                #{s\ 20028}#
                                #{meta\ 20044}#
                                #{lcase\ 20045}#))))
                        #{tmp\ 20036}#)
                      (let ((#{_\ 20049}# #{tmp\ 20035}#))
                        (syntax-violation
                          'lambda
                          "bad lambda*"
                          #{e\ 20025}#)))))))
            (#{global-extend\ 17311}#
              'core
              'case-lambda
              (lambda (#{e\ 20050}#
                       #{r\ 20051}#
                       #{w\ 20052}#
                       #{s\ 20053}#
                       #{mod\ 20054}#)
                (let ((#{tmp\ 20060}# #{e\ 20050}#))
                  (let ((#{tmp\ 20061}#
                          ($sc-dispatch
                            #{tmp\ 20060}#
                            '(_ (any any . each-any)
                                .
                                #(each (any any . each-any))))))
                    (if #{tmp\ 20061}#
                      (@apply
                        (lambda (#{args\ 20068}#
                                 #{e1\ 20069}#
                                 #{e2\ 20070}#
                                 #{args*\ 20071}#
                                 #{e1*\ 20072}#
                                 #{e2*\ 20073}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 17424}#
                                #{e\ 20050}#
                                #{r\ 20051}#
                                #{w\ 20052}#
                                #{s\ 20053}#
                                #{mod\ 20054}#
                                #{lambda-formals\ 17418}#
                                (cons (cons #{args\ 20068}#
                                            (cons #{e1\ 20069}# #{e2\ 20070}#))
                                      (map (lambda (#{tmp\ 20077}#
                                                    #{tmp\ 20076}#
                                                    #{tmp\ 20075}#)
                                             (cons #{tmp\ 20075}#
                                                   (cons #{tmp\ 20076}#
                                                         #{tmp\ 20077}#)))
                                           #{e2*\ 20073}#
                                           #{e1*\ 20072}#
                                           #{args*\ 20071}#))))
                            (lambda (#{meta\ 20079}# #{lcase\ 20080}#)
                              (#{build-case-lambda\ 17259}#
                                #{s\ 20053}#
                                #{meta\ 20079}#
                                #{lcase\ 20080}#))))
                        #{tmp\ 20061}#)
                      (let ((#{_\ 20084}# #{tmp\ 20060}#))
                        (syntax-violation
                          'case-lambda
                          "bad case-lambda"
                          #{e\ 20050}#)))))))
            (#{global-extend\ 17311}#
              'core
              'case-lambda*
              (lambda (#{e\ 20085}#
                       #{r\ 20086}#
                       #{w\ 20087}#
                       #{s\ 20088}#
                       #{mod\ 20089}#)
                (let ((#{tmp\ 20095}# #{e\ 20085}#))
                  (let ((#{tmp\ 20096}#
                          ($sc-dispatch
                            #{tmp\ 20095}#
                            '(_ (any any . each-any)
                                .
                                #(each (any any . each-any))))))
                    (if #{tmp\ 20096}#
                      (@apply
                        (lambda (#{args\ 20103}#
                                 #{e1\ 20104}#
                                 #{e2\ 20105}#
                                 #{args*\ 20106}#
                                 #{e1*\ 20107}#
                                 #{e2*\ 20108}#)
                          (call-with-values
                            (lambda ()
                              (#{chi-lambda-case\ 17424}#
                                #{e\ 20085}#
                                #{r\ 20086}#
                                #{w\ 20087}#
                                #{s\ 20088}#
                                #{mod\ 20089}#
                                #{lambda*-formals\ 17422}#
                                (cons (cons #{args\ 20103}#
                                            (cons #{e1\ 20104}# #{e2\ 20105}#))
                                      (map (lambda (#{tmp\ 20112}#
                                                    #{tmp\ 20111}#
                                                    #{tmp\ 20110}#)
                                             (cons #{tmp\ 20110}#
                                                   (cons #{tmp\ 20111}#
                                                         #{tmp\ 20112}#)))
                                           #{e2*\ 20108}#
                                           #{e1*\ 20107}#
                                           #{args*\ 20106}#))))
                            (lambda (#{meta\ 20114}# #{lcase\ 20115}#)
                              (#{build-case-lambda\ 17259}#
                                #{s\ 20088}#
                                #{meta\ 20114}#
                                #{lcase\ 20115}#))))
                        #{tmp\ 20096}#)
                      (let ((#{_\ 20119}# #{tmp\ 20095}#))
                        (syntax-violation
                          'case-lambda
                          "bad case-lambda*"
                          #{e\ 20085}#)))))))
            (#{global-extend\ 17311}#
              'core
              'let
              (letrec*
                ((#{chi-let\ 20121}#
                   (lambda (#{e\ 20122}#
                            #{r\ 20123}#
                            #{w\ 20124}#
                            #{s\ 20125}#
                            #{mod\ 20126}#
                            #{constructor\ 20127}#
                            #{ids\ 20128}#
                            #{vals\ 20129}#
                            #{exps\ 20130}#)
                     (if (not (#{valid-bound-ids?\ 17378}# #{ids\ 20128}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 20122}#)
                       (begin
                         (let ((#{labels\ 20142}#
                                 (#{gen-labels\ 17333}# #{ids\ 20128}#))
                               (#{new-vars\ 20143}#
                                 (map #{gen-var\ 17428}# #{ids\ 20128}#)))
                           (begin
                             (let ((#{nw\ 20146}#
                                     (#{make-binding-wrap\ 17362}#
                                       #{ids\ 20128}#
                                       #{labels\ 20142}#
                                       #{w\ 20124}#))
                                   (#{nr\ 20147}#
                                     (#{extend-var-env\ 17305}#
                                       #{labels\ 20142}#
                                       #{new-vars\ 20143}#
                                       #{r\ 20123}#)))
                               (#{constructor\ 20127}#
                                 #{s\ 20125}#
                                 (map syntax->datum #{ids\ 20128}#)
                                 #{new-vars\ 20143}#
                                 (map (lambda (#{x\ 20148}#)
                                        (#{chi\ 17400}#
                                          #{x\ 20148}#
                                          #{r\ 20123}#
                                          #{w\ 20124}#
                                          #{mod\ 20126}#))
                                      #{vals\ 20129}#)
                                 (#{chi-body\ 17408}#
                                   #{exps\ 20130}#
                                   (#{source-wrap\ 17386}#
                                     #{e\ 20122}#
                                     #{nw\ 20146}#
                                     #{s\ 20125}#
                                     #{mod\ 20126}#)
                                   #{nr\ 20147}#
                                   #{nw\ 20146}#
                                   #{mod\ 20126}#))))))))))
                (begin
                  (lambda (#{e\ 20150}#
                           #{r\ 20151}#
                           #{w\ 20152}#
                           #{s\ 20153}#
                           #{mod\ 20154}#)
                    (let ((#{tmp\ 20160}# #{e\ 20150}#))
                      (let ((#{tmp\ 20161}#
                              ($sc-dispatch
                                #{tmp\ 20160}#
                                '(_ #(each (any any)) any . each-any))))
                        (if (if #{tmp\ 20161}#
                              (@apply
                                (lambda (#{id\ 20166}#
                                         #{val\ 20167}#
                                         #{e1\ 20168}#
                                         #{e2\ 20169}#)
                                  (and-map #{id?\ 17315}# #{id\ 20166}#))
                                #{tmp\ 20161}#)
                              #f)
                          (@apply
                            (lambda (#{id\ 20175}#
                                     #{val\ 20176}#
                                     #{e1\ 20177}#
                                     #{e2\ 20178}#)
                              (#{chi-let\ 20121}#
                                #{e\ 20150}#
                                #{r\ 20151}#
                                #{w\ 20152}#
                                #{s\ 20153}#
                                #{mod\ 20154}#
                                #{build-let\ 17269}#
                                #{id\ 20175}#
                                #{val\ 20176}#
                                (cons #{e1\ 20177}# #{e2\ 20178}#)))
                            #{tmp\ 20161}#)
                          (let ((#{tmp\ 20182}#
                                  ($sc-dispatch
                                    #{tmp\ 20160}#
                                    '(_ any
                                        #(each (any any))
                                        any
                                        .
                                        each-any))))
                            (if (if #{tmp\ 20182}#
                                  (@apply
                                    (lambda (#{f\ 20188}#
                                             #{id\ 20189}#
                                             #{val\ 20190}#
                                             #{e1\ 20191}#
                                             #{e2\ 20192}#)
                                      (if (#{id?\ 17315}# #{f\ 20188}#)
                                        (and-map #{id?\ 17315}# #{id\ 20189}#)
                                        #f))
                                    #{tmp\ 20182}#)
                                  #f)
                              (@apply
                                (lambda (#{f\ 20201}#
                                         #{id\ 20202}#
                                         #{val\ 20203}#
                                         #{e1\ 20204}#
                                         #{e2\ 20205}#)
                                  (#{chi-let\ 20121}#
                                    #{e\ 20150}#
                                    #{r\ 20151}#
                                    #{w\ 20152}#
                                    #{s\ 20153}#
                                    #{mod\ 20154}#
                                    #{build-named-let\ 17271}#
                                    (cons #{f\ 20201}# #{id\ 20202}#)
                                    #{val\ 20203}#
                                    (cons #{e1\ 20204}# #{e2\ 20205}#)))
                                #{tmp\ 20182}#)
                              (let ((#{_\ 20210}# #{tmp\ 20160}#))
                                (syntax-violation
                                  'let
                                  "bad let"
                                  (#{source-wrap\ 17386}#
                                    #{e\ 20150}#
                                    #{w\ 20152}#
                                    #{s\ 20153}#
                                    #{mod\ 20154}#))))))))))))
            (#{global-extend\ 17311}#
              'core
              'letrec
              (lambda (#{e\ 20211}#
                       #{r\ 20212}#
                       #{w\ 20213}#
                       #{s\ 20214}#
                       #{mod\ 20215}#)
                (let ((#{tmp\ 20221}# #{e\ 20211}#))
                  (let ((#{tmp\ 20222}#
                          ($sc-dispatch
                            #{tmp\ 20221}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 20222}#
                          (@apply
                            (lambda (#{id\ 20227}#
                                     #{val\ 20228}#
                                     #{e1\ 20229}#
                                     #{e2\ 20230}#)
                              (and-map #{id?\ 17315}# #{id\ 20227}#))
                            #{tmp\ 20222}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 20236}#
                                 #{val\ 20237}#
                                 #{e1\ 20238}#
                                 #{e2\ 20239}#)
                          (begin
                            (let ((#{ids\ 20241}# #{id\ 20236}#))
                              (if (not (#{valid-bound-ids?\ 17378}#
                                         #{ids\ 20241}#))
                                (syntax-violation
                                  'letrec
                                  "duplicate bound variable"
                                  #{e\ 20211}#)
                                (begin
                                  (let ((#{labels\ 20245}#
                                          (#{gen-labels\ 17333}#
                                            #{ids\ 20241}#))
                                        (#{new-vars\ 20246}#
                                          (map #{gen-var\ 17428}#
                                               #{ids\ 20241}#)))
                                    (begin
                                      (let ((#{w\ 20249}#
                                              (#{make-binding-wrap\ 17362}#
                                                #{ids\ 20241}#
                                                #{labels\ 20245}#
                                                #{w\ 20213}#))
                                            (#{r\ 20250}#
                                              (#{extend-var-env\ 17305}#
                                                #{labels\ 20245}#
                                                #{new-vars\ 20246}#
                                                #{r\ 20212}#)))
                                        (#{build-letrec\ 17273}#
                                          #{s\ 20214}#
                                          #f
                                          (map syntax->datum #{ids\ 20241}#)
                                          #{new-vars\ 20246}#
                                          (map (lambda (#{x\ 20251}#)
                                                 (#{chi\ 17400}#
                                                   #{x\ 20251}#
                                                   #{r\ 20250}#
                                                   #{w\ 20249}#
                                                   #{mod\ 20215}#))
                                               #{val\ 20237}#)
                                          (#{chi-body\ 17408}#
                                            (cons #{e1\ 20238}# #{e2\ 20239}#)
                                            (#{source-wrap\ 17386}#
                                              #{e\ 20211}#
                                              #{w\ 20249}#
                                              #{s\ 20214}#
                                              #{mod\ 20215}#)
                                            #{r\ 20250}#
                                            #{w\ 20249}#
                                            #{mod\ 20215}#))))))))))
                        #{tmp\ 20222}#)
                      (let ((#{_\ 20256}# #{tmp\ 20221}#))
                        (syntax-violation
                          'letrec
                          "bad letrec"
                          (#{source-wrap\ 17386}#
                            #{e\ 20211}#
                            #{w\ 20213}#
                            #{s\ 20214}#
                            #{mod\ 20215}#))))))))
            (#{global-extend\ 17311}#
              'core
              'letrec*
              (lambda (#{e\ 20257}#
                       #{r\ 20258}#
                       #{w\ 20259}#
                       #{s\ 20260}#
                       #{mod\ 20261}#)
                (let ((#{tmp\ 20267}# #{e\ 20257}#))
                  (let ((#{tmp\ 20268}#
                          ($sc-dispatch
                            #{tmp\ 20267}#
                            '(_ #(each (any any)) any . each-any))))
                    (if (if #{tmp\ 20268}#
                          (@apply
                            (lambda (#{id\ 20273}#
                                     #{val\ 20274}#
                                     #{e1\ 20275}#
                                     #{e2\ 20276}#)
                              (and-map #{id?\ 17315}# #{id\ 20273}#))
                            #{tmp\ 20268}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 20282}#
                                 #{val\ 20283}#
                                 #{e1\ 20284}#
                                 #{e2\ 20285}#)
                          (begin
                            (let ((#{ids\ 20287}# #{id\ 20282}#))
                              (if (not (#{valid-bound-ids?\ 17378}#
                                         #{ids\ 20287}#))
                                (syntax-violation
                                  'letrec*
                                  "duplicate bound variable"
                                  #{e\ 20257}#)
                                (begin
                                  (let ((#{labels\ 20291}#
                                          (#{gen-labels\ 17333}#
                                            #{ids\ 20287}#))
                                        (#{new-vars\ 20292}#
                                          (map #{gen-var\ 17428}#
                                               #{ids\ 20287}#)))
                                    (begin
                                      (let ((#{w\ 20295}#
                                              (#{make-binding-wrap\ 17362}#
                                                #{ids\ 20287}#
                                                #{labels\ 20291}#
                                                #{w\ 20259}#))
                                            (#{r\ 20296}#
                                              (#{extend-var-env\ 17305}#
                                                #{labels\ 20291}#
                                                #{new-vars\ 20292}#
                                                #{r\ 20258}#)))
                                        (#{build-letrec\ 17273}#
                                          #{s\ 20260}#
                                          #t
                                          (map syntax->datum #{ids\ 20287}#)
                                          #{new-vars\ 20292}#
                                          (map (lambda (#{x\ 20297}#)
                                                 (#{chi\ 17400}#
                                                   #{x\ 20297}#
                                                   #{r\ 20296}#
                                                   #{w\ 20295}#
                                                   #{mod\ 20261}#))
                                               #{val\ 20283}#)
                                          (#{chi-body\ 17408}#
                                            (cons #{e1\ 20284}# #{e2\ 20285}#)
                                            (#{source-wrap\ 17386}#
                                              #{e\ 20257}#
                                              #{w\ 20295}#
                                              #{s\ 20260}#
                                              #{mod\ 20261}#)
                                            #{r\ 20296}#
                                            #{w\ 20295}#
                                            #{mod\ 20261}#))))))))))
                        #{tmp\ 20268}#)
                      (let ((#{_\ 20302}# #{tmp\ 20267}#))
                        (syntax-violation
                          'letrec*
                          "bad letrec*"
                          (#{source-wrap\ 17386}#
                            #{e\ 20257}#
                            #{w\ 20259}#
                            #{s\ 20260}#
                            #{mod\ 20261}#))))))))
            (#{global-extend\ 17311}#
              'core
              'set!
              (lambda (#{e\ 20303}#
                       #{r\ 20304}#
                       #{w\ 20305}#
                       #{s\ 20306}#
                       #{mod\ 20307}#)
                (let ((#{tmp\ 20313}# #{e\ 20303}#))
                  (let ((#{tmp\ 20314}#
                          ($sc-dispatch #{tmp\ 20313}# (quote (_ any any)))))
                    (if (if #{tmp\ 20314}#
                          (@apply
                            (lambda (#{id\ 20317}# #{val\ 20318}#)
                              (#{id?\ 17315}# #{id\ 20317}#))
                            #{tmp\ 20314}#)
                          #f)
                      (@apply
                        (lambda (#{id\ 20321}# #{val\ 20322}#)
                          (begin
                            (let ((#{n\ 20324}#
                                    (#{id-var-name\ 17372}#
                                      #{id\ 20321}#
                                      #{w\ 20305}#)))
                              (begin
                                (let ((#{b\ 20326}#
                                        (#{lookup\ 17309}#
                                          #{n\ 20324}#
                                          #{r\ 20304}#
                                          #{mod\ 20307}#)))
                                  (begin
                                    (let ((#{atom-key\ 20329}#
                                            (#{binding-type\ 17298}#
                                              #{b\ 20326}#)))
                                      (if (eqv? #{atom-key\ 20329}#
                                                'lexical)
                                        (#{build-lexical-assignment\ 17247}#
                                          #{s\ 20306}#
                                          (syntax->datum #{id\ 20321}#)
                                          (#{binding-value\ 17300}#
                                            #{b\ 20326}#)
                                          (#{chi\ 17400}#
                                            #{val\ 20322}#
                                            #{r\ 20304}#
                                            #{w\ 20305}#
                                            #{mod\ 20307}#))
                                        (if (eqv? #{atom-key\ 20329}#
                                                  'global)
                                          (#{build-global-assignment\ 17253}#
                                            #{s\ 20306}#
                                            #{n\ 20324}#
                                            (#{chi\ 17400}#
                                              #{val\ 20322}#
                                              #{r\ 20304}#
                                              #{w\ 20305}#
                                              #{mod\ 20307}#)
                                            #{mod\ 20307}#)
                                          (if (eqv? #{atom-key\ 20329}#
                                                    'macro)
                                            (begin
                                              (let ((#{p\ 20334}#
                                                      (#{binding-value\ 17300}#
                                                        #{b\ 20326}#)))
                                                (if (procedure-property
                                                      #{p\ 20334}#
                                                      'variable-transformer)
                                                  (#{chi\ 17400}#
                                                    (#{chi-macro\ 17406}#
                                                      #{p\ 20334}#
                                                      #{e\ 20303}#
                                                      #{r\ 20304}#
                                                      #{w\ 20305}#
                                                      #{s\ 20306}#
                                                      #f
                                                      #{mod\ 20307}#)
                                                    #{r\ 20304}#
                                                    #{w\ 20305}#
                                                    #{mod\ 20307}#)
                                                  (syntax-violation
                                                    'set!
                                                    "not a variable transformer"
                                                    (#{wrap\ 17384}#
                                                      #{e\ 20303}#
                                                      #{w\ 20305}#
                                                      #{mod\ 20307}#)
                                                    (#{wrap\ 17384}#
                                                      #{id\ 20321}#
                                                      #{w\ 20305}#
                                                      #{mod\ 20307}#)))))
                                            (if (eqv? #{atom-key\ 20329}#
                                                      'displaced-lexical)
                                              (syntax-violation
                                                'set!
                                                "identifier out of context"
                                                (#{wrap\ 17384}#
                                                  #{id\ 20321}#
                                                  #{w\ 20305}#
                                                  #{mod\ 20307}#))
                                              (syntax-violation
                                                'set!
                                                "bad set!"
                                                (#{source-wrap\ 17386}#
                                                  #{e\ 20303}#
                                                  #{w\ 20305}#
                                                  #{s\ 20306}#
                                                  #{mod\ 20307}#)))))))))))))
                        #{tmp\ 20314}#)
                      (let ((#{tmp\ 20337}#
                              ($sc-dispatch
                                #{tmp\ 20313}#
                                '(_ (any . each-any) any))))
                        (if #{tmp\ 20337}#
                          (@apply
                            (lambda (#{head\ 20341}#
                                     #{tail\ 20342}#
                                     #{val\ 20343}#)
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type\ 17396}#
                                    #{head\ 20341}#
                                    #{r\ 20304}#
                                    '(())
                                    #f
                                    #f
                                    #{mod\ 20307}#
                                    #t))
                                (lambda (#{type\ 20346}#
                                         #{value\ 20347}#
                                         #{ee\ 20348}#
                                         #{ww\ 20349}#
                                         #{ss\ 20350}#
                                         #{modmod\ 20351}#)
                                  (if (eqv? #{type\ 20346}# (quote module-ref))
                                    (begin
                                      (let ((#{val\ 20360}#
                                              (#{chi\ 17400}#
                                                #{val\ 20343}#
                                                #{r\ 20304}#
                                                #{w\ 20305}#
                                                #{mod\ 20307}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 20347}#
                                              (cons #{head\ 20341}#
                                                    #{tail\ 20342}#)
                                              #{r\ 20304}#
                                              #{w\ 20305}#))
                                          (lambda (#{e\ 20362}#
                                                   #{r\ 20363}#
                                                   #{w\ 20364}#
                                                   #{s*\ 20365}#
                                                   #{mod\ 20366}#)
                                            (let ((#{tmp\ 20372}#
                                                    #{e\ 20362}#))
                                              (let ((#{tmp\ 20373}#
                                                      (list #{tmp\ 20372}#)))
                                                (if (if #{tmp\ 20373}#
                                                      (@apply
                                                        (lambda (#{e\ 20375}#)
                                                          (#{id?\ 17315}#
                                                            #{e\ 20375}#))
                                                        #{tmp\ 20373}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{e\ 20377}#)
                                                      (#{build-global-assignment\ 17253}#
                                                        #{s\ 20306}#
                                                        (syntax->datum
                                                          #{e\ 20377}#)
                                                        #{val\ 20360}#
                                                        #{mod\ 20366}#))
                                                    #{tmp\ 20373}#)
                                                  (syntax-violation
                                                    #f
                                                    "source expression failed to match any pattern"
                                                    #{tmp\ 20372}#))))))))
                                    (#{build-application\ 17239}#
                                      #{s\ 20306}#
                                      (#{chi\ 17400}#
                                        (list '#(syntax-object
                                                 setter
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(type
                                                      value
                                                      ee
                                                      ww
                                                      ss
                                                      modmod)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i20352"
                                                      "i20353"
                                                      "i20354"
                                                      "i20355"
                                                      "i20356"
                                                      "i20357"))
                                                  #(ribcage
                                                    #(head tail val)
                                                    #((top) (top) (top))
                                                    #("i20338"
                                                      "i20339"
                                                      "i20340"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e r w s mod)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i20308"
                                                      "i20309"
                                                      "i20310"
                                                      "i20311"
                                                      "i20312"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i17429"
                                                     "i17427"
                                                     "i17425"
                                                     "i17423"
                                                     "i17421"
                                                     "i17419"
                                                     "i17417"
                                                     "i17415"
                                                     "i17413"
                                                     "i17411"
                                                     "i17409"
                                                     "i17407"
                                                     "i17405"
                                                     "i17403"
                                                     "i17401"
                                                     "i17399"
                                                     "i17397"
                                                     "i17395"
                                                     "i17393"
                                                     "i17391"
                                                     "i17389"
                                                     "i17387"
                                                     "i17385"
                                                     "i17383"
                                                     "i17381"
                                                     "i17379"
                                                     "i17377"
                                                     "i17375"
                                                     "i17373"
                                                     "i17371"
                                                     "i17369"
                                                     "i17367"
                                                     "i17365"
                                                     "i17363"
                                                     "i17361"
                                                     "i17359"
                                                     "i17358"
                                                     "i17357"
                                                     "i17355"
                                                     "i17354"
                                                     "i17353"
                                                     "i17352"
                                                     "i17351"
                                                     "i17349"
                                                     "i17347"
                                                     "i17345"
                                                     "i17343"
                                                     "i17341"
                                                     "i17339"
                                                     "i17337"
                                                     "i17335"
                                                     "i17332"
                                                     "i17330"
                                                     "i17329"
                                                     "i17328"
                                                     "i17327"
                                                     "i17326"
                                                     "i17325"
                                                     "i17323"
                                                     "i17321"
                                                     "i17319"
                                                     "i17317"
                                                     "i17316"
                                                     "i17314"
                                                     "i17312"
                                                     "i17310"
                                                     "i17308"
                                                     "i17306"
                                                     "i17304"
                                                     "i17302"
                                                     "i17301"
                                                     "i17299"
                                                     "i17297"
                                                     "i17296"
                                                     "i17295"
                                                     "i17293"
                                                     "i17292"
                                                     "i17290"
                                                     "i17288"
                                                     "i17286"
                                                     "i17284"
                                                     "i17282"
                                                     "i17280"
                                                     "i17278"
                                                     "i17276"
                                                     "i17274"
                                                     "i17272"
                                                     "i17270"
                                                     "i17268"
                                                     "i17266"
                                                     "i17264"
                                                     "i17262"
                                                     "i17260"
                                                     "i17258"
                                                     "i17256"
                                                     "i17254"
                                                     "i17252"
                                                     "i17250"
                                                     "i17248"
                                                     "i17246"
                                                     "i17244"
                                                     "i17242"
                                                     "i17240"
                                                     "i17238"
                                                     "i17236"
                                                     "i17234"
                                                     "i17232"
                                                     "i17230"
                                                     "i17228"
                                                     "i17227"
                                                     "i17225"
                                                     "i17223"
                                                     "i17221"
                                                     "i17219"
                                                     "i17217"
                                                     "i17215"
                                                     "i17213"
                                                     "i17211"
                                                     "i17209"
                                                     "i17206"
                                                     "i17204"
                                                     "i17202"
                                                     "i17200"
                                                     "i17198"
                                                     "i17196"
                                                     "i17194"
                                                     "i17192"
                                                     "i17190"
                                                     "i17188"
                                                     "i17186"
                                                     "i17184"
                                                     "i17182"
                                                     "i17180"
                                                     "i17178"
                                                     "i17176"
                                                     "i17174"
                                                     "i17172"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top) (top))
                                                    ("i16974"
                                                     "i16973"
                                                     "i16972"
                                                     "i16970")))
                                                 (hygiene guile))
                                              #{head\ 20341}#)
                                        #{r\ 20304}#
                                        #{w\ 20305}#
                                        #{mod\ 20307}#)
                                      (map (lambda (#{e\ 20379}#)
                                             (#{chi\ 17400}#
                                               #{e\ 20379}#
                                               #{r\ 20304}#
                                               #{w\ 20305}#
                                               #{mod\ 20307}#))
                                           (append
                                             #{tail\ 20342}#
                                             (list #{val\ 20343}#))))))))
                            #{tmp\ 20337}#)
                          (let ((#{_\ 20383}# #{tmp\ 20313}#))
                            (syntax-violation
                              'set!
                              "bad set!"
                              (#{source-wrap\ 17386}#
                                #{e\ 20303}#
                                #{w\ 20305}#
                                #{s\ 20306}#
                                #{mod\ 20307}#))))))))))
            (#{global-extend\ 17311}#
              'module-ref
              '@
              (lambda (#{e\ 20384}# #{r\ 20385}# #{w\ 20386}#)
                (let ((#{tmp\ 20390}# #{e\ 20384}#))
                  (let ((#{tmp\ 20391}#
                          ($sc-dispatch
                            #{tmp\ 20390}#
                            '(_ each-any any))))
                    (if (if #{tmp\ 20391}#
                          (@apply
                            (lambda (#{mod\ 20394}# #{id\ 20395}#)
                              (if (and-map #{id?\ 17315}# #{mod\ 20394}#)
                                (#{id?\ 17315}# #{id\ 20395}#)
                                #f))
                            #{tmp\ 20391}#)
                          #f)
                      (@apply
                        (lambda (#{mod\ 20401}# #{id\ 20402}#)
                          (values
                            (syntax->datum #{id\ 20402}#)
                            #{r\ 20385}#
                            #{w\ 20386}#
                            #f
                            (syntax->datum
                              (cons '#(syntax-object
                                       public
                                       ((top)
                                        #(ribcage
                                          #(mod id)
                                          #((top) (top))
                                          #("i20399" "i20400"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("i20387" "i20388" "i20389"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-application
                                            chi-expr
                                            chi
                                            chi-top
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i17429"
                                           "i17427"
                                           "i17425"
                                           "i17423"
                                           "i17421"
                                           "i17419"
                                           "i17417"
                                           "i17415"
                                           "i17413"
                                           "i17411"
                                           "i17409"
                                           "i17407"
                                           "i17405"
                                           "i17403"
                                           "i17401"
                                           "i17399"
                                           "i17397"
                                           "i17395"
                                           "i17393"
                                           "i17391"
                                           "i17389"
                                           "i17387"
                                           "i17385"
                                           "i17383"
                                           "i17381"
                                           "i17379"
                                           "i17377"
                                           "i17375"
                                           "i17373"
                                           "i17371"
                                           "i17369"
                                           "i17367"
                                           "i17365"
                                           "i17363"
                                           "i17361"
                                           "i17359"
                                           "i17358"
                                           "i17357"
                                           "i17355"
                                           "i17354"
                                           "i17353"
                                           "i17352"
                                           "i17351"
                                           "i17349"
                                           "i17347"
                                           "i17345"
                                           "i17343"
                                           "i17341"
                                           "i17339"
                                           "i17337"
                                           "i17335"
                                           "i17332"
                                           "i17330"
                                           "i17329"
                                           "i17328"
                                           "i17327"
                                           "i17326"
                                           "i17325"
                                           "i17323"
                                           "i17321"
                                           "i17319"
                                           "i17317"
                                           "i17316"
                                           "i17314"
                                           "i17312"
                                           "i17310"
                                           "i17308"
                                           "i17306"
                                           "i17304"
                                           "i17302"
                                           "i17301"
                                           "i17299"
                                           "i17297"
                                           "i17296"
                                           "i17295"
                                           "i17293"
                                           "i17292"
                                           "i17290"
                                           "i17288"
                                           "i17286"
                                           "i17284"
                                           "i17282"
                                           "i17280"
                                           "i17278"
                                           "i17276"
                                           "i17274"
                                           "i17272"
                                           "i17270"
                                           "i17268"
                                           "i17266"
                                           "i17264"
                                           "i17262"
                                           "i17260"
                                           "i17258"
                                           "i17256"
                                           "i17254"
                                           "i17252"
                                           "i17250"
                                           "i17248"
                                           "i17246"
                                           "i17244"
                                           "i17242"
                                           "i17240"
                                           "i17238"
                                           "i17236"
                                           "i17234"
                                           "i17232"
                                           "i17230"
                                           "i17228"
                                           "i17227"
                                           "i17225"
                                           "i17223"
                                           "i17221"
                                           "i17219"
                                           "i17217"
                                           "i17215"
                                           "i17213"
                                           "i17211"
                                           "i17209"
                                           "i17206"
                                           "i17204"
                                           "i17202"
                                           "i17200"
                                           "i17198"
                                           "i17196"
                                           "i17194"
                                           "i17192"
                                           "i17190"
                                           "i17188"
                                           "i17186"
                                           "i17184"
                                           "i17182"
                                           "i17180"
                                           "i17178"
                                           "i17176"
                                           "i17174"
                                           "i17172"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors
                                            and-map*)
                                          ((top) (top) (top) (top))
                                          ("i16974"
                                           "i16973"
                                           "i16972"
                                           "i16970")))
                                       (hygiene guile))
                                    #{mod\ 20401}#))))
                        #{tmp\ 20391}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 20390}#))))))
            (#{global-extend\ 17311}#
              'module-ref
              '@@
              (lambda (#{e\ 20404}# #{r\ 20405}# #{w\ 20406}#)
                (letrec*
                  ((#{remodulate\ 20411}#
                     (lambda (#{x\ 20412}# #{mod\ 20413}#)
                       (if (pair? #{x\ 20412}#)
                         (cons (#{remodulate\ 20411}#
                                 (car #{x\ 20412}#)
                                 #{mod\ 20413}#)
                               (#{remodulate\ 20411}#
                                 (cdr #{x\ 20412}#)
                                 #{mod\ 20413}#))
                         (if (#{syntax-object?\ 17279}# #{x\ 20412}#)
                           (#{make-syntax-object\ 17277}#
                             (#{remodulate\ 20411}#
                               (#{syntax-object-expression\ 17281}#
                                 #{x\ 20412}#)
                               #{mod\ 20413}#)
                             (#{syntax-object-wrap\ 17283}# #{x\ 20412}#)
                             #{mod\ 20413}#)
                           (if (vector? #{x\ 20412}#)
                             (begin
                               (let ((#{n\ 20424}#
                                       (vector-length #{x\ 20412}#)))
                                 (begin
                                   (let ((#{v\ 20426}#
                                           (make-vector #{n\ 20424}#)))
                                     (letrec*
                                       ((#{loop\ 20429}#
                                          (lambda (#{i\ 20430}#)
                                            (if (#{fx=\ 17220}#
                                                  #{i\ 20430}#
                                                  #{n\ 20424}#)
                                              (begin (if #f #f) #{v\ 20426}#)
                                              (begin
                                                (vector-set!
                                                  #{v\ 20426}#
                                                  #{i\ 20430}#
                                                  (#{remodulate\ 20411}#
                                                    (vector-ref
                                                      #{x\ 20412}#
                                                      #{i\ 20430}#)
                                                    #{mod\ 20413}#))
                                                (#{loop\ 20429}#
                                                  (#{fx+\ 17216}#
                                                    #{i\ 20430}#
                                                    1)))))))
                                       (begin (#{loop\ 20429}# 0)))))))
                             #{x\ 20412}#))))))
                  (begin
                    (let ((#{tmp\ 20434}# #{e\ 20404}#))
                      (let ((#{tmp\ 20435}#
                              ($sc-dispatch
                                #{tmp\ 20434}#
                                '(_ each-any any))))
                        (if (if #{tmp\ 20435}#
                              (@apply
                                (lambda (#{mod\ 20438}# #{exp\ 20439}#)
                                  (and-map #{id?\ 17315}# #{mod\ 20438}#))
                                #{tmp\ 20435}#)
                              #f)
                          (@apply
                            (lambda (#{mod\ 20443}# #{exp\ 20444}#)
                              (begin
                                (let ((#{mod\ 20446}#
                                        (syntax->datum
                                          (cons '#(syntax-object
                                                   private
                                                   ((top)
                                                    #(ribcage
                                                      #(mod exp)
                                                      #((top) (top))
                                                      #("i20441" "i20442"))
                                                    #(ribcage
                                                      (remodulate)
                                                      ((top))
                                                      ("i20410"))
                                                    #(ribcage
                                                      #(e r w)
                                                      #((top) (top) (top))
                                                      #("i20407"
                                                        "i20408"
                                                        "i20409"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i17429"
                                                       "i17427"
                                                       "i17425"
                                                       "i17423"
                                                       "i17421"
                                                       "i17419"
                                                       "i17417"
                                                       "i17415"
                                                       "i17413"
                                                       "i17411"
                                                       "i17409"
                                                       "i17407"
                                                       "i17405"
                                                       "i17403"
                                                       "i17401"
                                                       "i17399"
                                                       "i17397"
                                                       "i17395"
                                                       "i17393"
                                                       "i17391"
                                                       "i17389"
                                                       "i17387"
                                                       "i17385"
                                                       "i17383"
                                                       "i17381"
                                                       "i17379"
                                                       "i17377"
                                                       "i17375"
                                                       "i17373"
                                                       "i17371"
                                                       "i17369"
                                                       "i17367"
                                                       "i17365"
                                                       "i17363"
                                                       "i17361"
                                                       "i17359"
                                                       "i17358"
                                                       "i17357"
                                                       "i17355"
                                                       "i17354"
                                                       "i17353"
                                                       "i17352"
                                                       "i17351"
                                                       "i17349"
                                                       "i17347"
                                                       "i17345"
                                                       "i17343"
                                                       "i17341"
                                                       "i17339"
                                                       "i17337"
                                                       "i17335"
                                                       "i17332"
                                                       "i17330"
                                                       "i17329"
                                                       "i17328"
                                                       "i17327"
                                                       "i17326"
                                                       "i17325"
                                                       "i17323"
                                                       "i17321"
                                                       "i17319"
                                                       "i17317"
                                                       "i17316"
                                                       "i17314"
                                                       "i17312"
                                                       "i17310"
                                                       "i17308"
                                                       "i17306"
                                                       "i17304"
                                                       "i17302"
                                                       "i17301"
                                                       "i17299"
                                                       "i17297"
                                                       "i17296"
                                                       "i17295"
                                                       "i17293"
                                                       "i17292"
                                                       "i17290"
                                                       "i17288"
                                                       "i17286"
                                                       "i17284"
                                                       "i17282"
                                                       "i17280"
                                                       "i17278"
                                                       "i17276"
                                                       "i17274"
                                                       "i17272"
                                                       "i17270"
                                                       "i17268"
                                                       "i17266"
                                                       "i17264"
                                                       "i17262"
                                                       "i17260"
                                                       "i17258"
                                                       "i17256"
                                                       "i17254"
                                                       "i17252"
                                                       "i17250"
                                                       "i17248"
                                                       "i17246"
                                                       "i17244"
                                                       "i17242"
                                                       "i17240"
                                                       "i17238"
                                                       "i17236"
                                                       "i17234"
                                                       "i17232"
                                                       "i17230"
                                                       "i17228"
                                                       "i17227"
                                                       "i17225"
                                                       "i17223"
                                                       "i17221"
                                                       "i17219"
                                                       "i17217"
                                                       "i17215"
                                                       "i17213"
                                                       "i17211"
                                                       "i17209"
                                                       "i17206"
                                                       "i17204"
                                                       "i17202"
                                                       "i17200"
                                                       "i17198"
                                                       "i17196"
                                                       "i17194"
                                                       "i17192"
                                                       "i17190"
                                                       "i17188"
                                                       "i17186"
                                                       "i17184"
                                                       "i17182"
                                                       "i17180"
                                                       "i17178"
                                                       "i17176"
                                                       "i17174"
                                                       "i17172"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top) (top))
                                                      ("i16974"
                                                       "i16973"
                                                       "i16972"
                                                       "i16970")))
                                                   (hygiene guile))
                                                #{mod\ 20443}#))))
                                  (values
                                    (#{remodulate\ 20411}#
                                      #{exp\ 20444}#
                                      #{mod\ 20446}#)
                                    #{r\ 20405}#
                                    #{w\ 20406}#
                                    (#{source-annotation\ 17294}#
                                      #{exp\ 20444}#)
                                    #{mod\ 20446}#))))
                            #{tmp\ 20435}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 20434}#))))))))
            (#{global-extend\ 17311}#
              'core
              'if
              (lambda (#{e\ 20448}#
                       #{r\ 20449}#
                       #{w\ 20450}#
                       #{s\ 20451}#
                       #{mod\ 20452}#)
                (let ((#{tmp\ 20458}# #{e\ 20448}#))
                  (let ((#{tmp\ 20459}#
                          ($sc-dispatch #{tmp\ 20458}# (quote (_ any any)))))
                    (if #{tmp\ 20459}#
                      (@apply
                        (lambda (#{test\ 20462}# #{then\ 20463}#)
                          (#{build-conditional\ 17241}#
                            #{s\ 20451}#
                            (#{chi\ 17400}#
                              #{test\ 20462}#
                              #{r\ 20449}#
                              #{w\ 20450}#
                              #{mod\ 20452}#)
                            (#{chi\ 17400}#
                              #{then\ 20463}#
                              #{r\ 20449}#
                              #{w\ 20450}#
                              #{mod\ 20452}#)
                            (#{build-void\ 17237}# #f)))
                        #{tmp\ 20459}#)
                      (let ((#{tmp\ 20465}#
                              ($sc-dispatch
                                #{tmp\ 20458}#
                                '(_ any any any))))
                        (if #{tmp\ 20465}#
                          (@apply
                            (lambda (#{test\ 20469}#
                                     #{then\ 20470}#
                                     #{else\ 20471}#)
                              (#{build-conditional\ 17241}#
                                #{s\ 20451}#
                                (#{chi\ 17400}#
                                  #{test\ 20469}#
                                  #{r\ 20449}#
                                  #{w\ 20450}#
                                  #{mod\ 20452}#)
                                (#{chi\ 17400}#
                                  #{then\ 20470}#
                                  #{r\ 20449}#
                                  #{w\ 20450}#
                                  #{mod\ 20452}#)
                                (#{chi\ 17400}#
                                  #{else\ 20471}#
                                  #{r\ 20449}#
                                  #{w\ 20450}#
                                  #{mod\ 20452}#)))
                            #{tmp\ 20465}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{tmp\ 20458}#))))))))
            (#{global-extend\ 17311}#
              'core
              'with-fluids
              (lambda (#{e\ 20472}#
                       #{r\ 20473}#
                       #{w\ 20474}#
                       #{s\ 20475}#
                       #{mod\ 20476}#)
                (let ((#{tmp\ 20482}# #{e\ 20472}#))
                  (let ((#{tmp\ 20483}#
                          ($sc-dispatch
                            #{tmp\ 20482}#
                            '(_ #(each (any any)) any . each-any))))
                    (if #{tmp\ 20483}#
                      (@apply
                        (lambda (#{fluid\ 20488}#
                                 #{val\ 20489}#
                                 #{b\ 20490}#
                                 #{b*\ 20491}#)
                          (#{build-dynlet\ 17243}#
                            #{s\ 20475}#
                            (map (lambda (#{x\ 20492}#)
                                   (#{chi\ 17400}#
                                     #{x\ 20492}#
                                     #{r\ 20473}#
                                     #{w\ 20474}#
                                     #{mod\ 20476}#))
                                 #{fluid\ 20488}#)
                            (map (lambda (#{x\ 20495}#)
                                   (#{chi\ 17400}#
                                     #{x\ 20495}#
                                     #{r\ 20473}#
                                     #{w\ 20474}#
                                     #{mod\ 20476}#))
                                 #{val\ 20489}#)
                            (#{chi-body\ 17408}#
                              (cons #{b\ 20490}# #{b*\ 20491}#)
                              (#{source-wrap\ 17386}#
                                #{e\ 20472}#
                                #{w\ 20474}#
                                #{s\ 20475}#
                                #{mod\ 20476}#)
                              #{r\ 20473}#
                              #{w\ 20474}#
                              #{mod\ 20476}#)))
                        #{tmp\ 20483}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 20482}#))))))
            (#{global-extend\ 17311}#
              'begin
              'begin
              '())
            (#{global-extend\ 17311}#
              'define
              'define
              '())
            (#{global-extend\ 17311}#
              'define-syntax
              'define-syntax
              '())
            (#{global-extend\ 17311}#
              'eval-when
              'eval-when
              '())
            (#{global-extend\ 17311}#
              'core
              'syntax-case
              (letrec*
                ((#{convert-pattern\ 20500}#
                   (lambda (#{pattern\ 20507}# #{keys\ 20508}#)
                     (letrec*
                       ((#{cvt*\ 20512}#
                          (lambda (#{p*\ 20515}# #{n\ 20516}# #{ids\ 20517}#)
                            (if (null? #{p*\ 20515}#)
                              (values (quote ()) #{ids\ 20517}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt*\ 20512}#
                                    (cdr #{p*\ 20515}#)
                                    #{n\ 20516}#
                                    #{ids\ 20517}#))
                                (lambda (#{y\ 20521}# #{ids\ 20522}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt\ 20514}#
                                        (car #{p*\ 20515}#)
                                        #{n\ 20516}#
                                        #{ids\ 20522}#))
                                    (lambda (#{x\ 20525}# #{ids\ 20526}#)
                                      (values
                                        (cons #{x\ 20525}# #{y\ 20521}#)
                                        #{ids\ 20526}#))))))))
                        (#{cvt\ 20514}#
                          (lambda (#{p\ 20529}# #{n\ 20530}# #{ids\ 20531}#)
                            (if (#{id?\ 17315}# #{p\ 20529}#)
                              (if (#{bound-id-member?\ 17382}#
                                    #{p\ 20529}#
                                    #{keys\ 20508}#)
                                (values
                                  (vector (quote free-id) #{p\ 20529}#)
                                  #{ids\ 20531}#)
                                (if (#{free-id=?\ 17374}#
                                      #{p\ 20529}#
                                      '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p n ids)
                                            #((top) (top) (top))
                                            #("i20532" "i20533" "i20534"))
                                          #(ribcage
                                            (cvt cvt*)
                                            ((top) (top))
                                            ("i20513" "i20511"))
                                          #(ribcage
                                            #(pattern keys)
                                            #((top) (top))
                                            #("i20509" "i20510"))
                                          #(ribcage
                                            (gen-syntax-case
                                              gen-clause
                                              build-dispatch-call
                                              convert-pattern)
                                            ((top) (top) (top) (top))
                                            ("i20505"
                                             "i20503"
                                             "i20501"
                                             "i20499"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-application
                                              chi-expr
                                              chi
                                              chi-top
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-application
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-sequence
                                              make-application
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i17429"
                                             "i17427"
                                             "i17425"
                                             "i17423"
                                             "i17421"
                                             "i17419"
                                             "i17417"
                                             "i17415"
                                             "i17413"
                                             "i17411"
                                             "i17409"
                                             "i17407"
                                             "i17405"
                                             "i17403"
                                             "i17401"
                                             "i17399"
                                             "i17397"
                                             "i17395"
                                             "i17393"
                                             "i17391"
                                             "i17389"
                                             "i17387"
                                             "i17385"
                                             "i17383"
                                             "i17381"
                                             "i17379"
                                             "i17377"
                                             "i17375"
                                             "i17373"
                                             "i17371"
                                             "i17369"
                                             "i17367"
                                             "i17365"
                                             "i17363"
                                             "i17361"
                                             "i17359"
                                             "i17358"
                                             "i17357"
                                             "i17355"
                                             "i17354"
                                             "i17353"
                                             "i17352"
                                             "i17351"
                                             "i17349"
                                             "i17347"
                                             "i17345"
                                             "i17343"
                                             "i17341"
                                             "i17339"
                                             "i17337"
                                             "i17335"
                                             "i17332"
                                             "i17330"
                                             "i17329"
                                             "i17328"
                                             "i17327"
                                             "i17326"
                                             "i17325"
                                             "i17323"
                                             "i17321"
                                             "i17319"
                                             "i17317"
                                             "i17316"
                                             "i17314"
                                             "i17312"
                                             "i17310"
                                             "i17308"
                                             "i17306"
                                             "i17304"
                                             "i17302"
                                             "i17301"
                                             "i17299"
                                             "i17297"
                                             "i17296"
                                             "i17295"
                                             "i17293"
                                             "i17292"
                                             "i17290"
                                             "i17288"
                                             "i17286"
                                             "i17284"
                                             "i17282"
                                             "i17280"
                                             "i17278"
                                             "i17276"
                                             "i17274"
                                             "i17272"
                                             "i17270"
                                             "i17268"
                                             "i17266"
                                             "i17264"
                                             "i17262"
                                             "i17260"
                                             "i17258"
                                             "i17256"
                                             "i17254"
                                             "i17252"
                                             "i17250"
                                             "i17248"
                                             "i17246"
                                             "i17244"
                                             "i17242"
                                             "i17240"
                                             "i17238"
                                             "i17236"
                                             "i17234"
                                             "i17232"
                                             "i17230"
                                             "i17228"
                                             "i17227"
                                             "i17225"
                                             "i17223"
                                             "i17221"
                                             "i17219"
                                             "i17217"
                                             "i17215"
                                             "i17213"
                                             "i17211"
                                             "i17209"
                                             "i17206"
                                             "i17204"
                                             "i17202"
                                             "i17200"
                                             "i17198"
                                             "i17196"
                                             "i17194"
                                             "i17192"
                                             "i17190"
                                             "i17188"
                                             "i17186"
                                             "i17184"
                                             "i17182"
                                             "i17180"
                                             "i17178"
                                             "i17176"
                                             "i17174"
                                             "i17172"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors
                                              and-map*)
                                            ((top) (top) (top) (top))
                                            ("i16974"
                                             "i16973"
                                             "i16972"
                                             "i16970")))
                                         (hygiene guile)))
                                  (values (quote _) #{ids\ 20531}#)
                                  (values
                                    'any
                                    (cons (cons #{p\ 20529}# #{n\ 20530}#)
                                          #{ids\ 20531}#))))
                              (let ((#{tmp\ 20540}# #{p\ 20529}#))
                                (let ((#{tmp\ 20541}#
                                        ($sc-dispatch
                                          #{tmp\ 20540}#
                                          '(any any))))
                                  (if (if #{tmp\ 20541}#
                                        (@apply
                                          (lambda (#{x\ 20544}#
                                                   #{dots\ 20545}#)
                                            (#{ellipsis?\ 17416}#
                                              #{dots\ 20545}#))
                                          #{tmp\ 20541}#)
                                        #f)
                                    (@apply
                                      (lambda (#{x\ 20548}# #{dots\ 20549}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 20514}#
                                              #{x\ 20548}#
                                              (#{fx+\ 17216}# #{n\ 20530}# 1)
                                              #{ids\ 20531}#))
                                          (lambda (#{p\ 20550}# #{ids\ 20551}#)
                                            (values
                                              (if (eq? #{p\ 20550}#
                                                       'any)
                                                'each-any
                                                (vector
                                                  'each
                                                  #{p\ 20550}#))
                                              #{ids\ 20551}#))))
                                      #{tmp\ 20541}#)
                                    (let ((#{tmp\ 20554}#
                                            ($sc-dispatch
                                              #{tmp\ 20540}#
                                              '(any any . each-any))))
                                      (if (if #{tmp\ 20554}#
                                            (@apply
                                              (lambda (#{x\ 20558}#
                                                       #{dots\ 20559}#
                                                       #{ys\ 20560}#)
                                                (#{ellipsis?\ 17416}#
                                                  #{dots\ 20559}#))
                                              #{tmp\ 20554}#)
                                            #f)
                                        (@apply
                                          (lambda (#{x\ 20564}#
                                                   #{dots\ 20565}#
                                                   #{ys\ 20566}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt*\ 20512}#
                                                  #{ys\ 20566}#
                                                  #{n\ 20530}#
                                                  #{ids\ 20531}#))
                                              (lambda (#{ys\ 20568}#
                                                       #{ids\ 20569}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt\ 20514}#
                                                      #{x\ 20564}#
                                                      (1+ #{n\ 20530}#)
                                                      #{ids\ 20569}#))
                                                  (lambda (#{x\ 20572}#
                                                           #{ids\ 20573}#)
                                                    (values
                                                      (list->vector
                                                        (cons 'each+
                                                              (cons #{x\ 20572}#
                                                                    (cons (reverse
                                                                            #{ys\ 20568}#)
                                                                          '(())))))
                                                      #{ids\ 20573}#))))))
                                          #{tmp\ 20554}#)
                                        (let ((#{tmp\ 20577}#
                                                ($sc-dispatch
                                                  #{tmp\ 20540}#
                                                  '(any . any))))
                                          (if #{tmp\ 20577}#
                                            (@apply
                                              (lambda (#{x\ 20580}#
                                                       #{y\ 20581}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt\ 20514}#
                                                      #{y\ 20581}#
                                                      #{n\ 20530}#
                                                      #{ids\ 20531}#))
                                                  (lambda (#{y\ 20582}#
                                                           #{ids\ 20583}#)
                                                    (call-with-values
                                                      (lambda ()
                                                        (#{cvt\ 20514}#
                                                          #{x\ 20580}#
                                                          #{n\ 20530}#
                                                          #{ids\ 20583}#))
                                                      (lambda (#{x\ 20586}#
                                                               #{ids\ 20587}#)
                                                        (values
                                                          (cons #{x\ 20586}#
                                                                #{y\ 20582}#)
                                                          #{ids\ 20587}#))))))
                                              #{tmp\ 20577}#)
                                            (let ((#{tmp\ 20590}#
                                                    ($sc-dispatch
                                                      #{tmp\ 20540}#
                                                      '())))
                                              (if #{tmp\ 20590}#
                                                (@apply
                                                  (lambda ()
                                                    (values
                                                      '()
                                                      #{ids\ 20531}#))
                                                  #{tmp\ 20590}#)
                                                (let ((#{tmp\ 20591}#
                                                        ($sc-dispatch
                                                          #{tmp\ 20540}#
                                                          '#(vector
                                                             each-any))))
                                                  (if #{tmp\ 20591}#
                                                    (@apply
                                                      (lambda (#{x\ 20593}#)
                                                        (call-with-values
                                                          (lambda ()
                                                            (#{cvt\ 20514}#
                                                              #{x\ 20593}#
                                                              #{n\ 20530}#
                                                              #{ids\ 20531}#))
                                                          (lambda (#{p\ 20595}#
                                                                   #{ids\ 20596}#)
                                                            (values
                                                              (vector
                                                                'vector
                                                                #{p\ 20595}#)
                                                              #{ids\ 20596}#))))
                                                      #{tmp\ 20591}#)
                                                    (let ((#{x\ 20600}#
                                                            #{tmp\ 20540}#))
                                                      (values
                                                        (vector
                                                          'atom
                                                          (#{strip\ 17426}#
                                                            #{p\ 20529}#
                                                            '(())))
                                                        #{ids\ 20531}#)))))))))))))))))
                       (begin
                         (#{cvt\ 20514}# #{pattern\ 20507}# 0 (quote ()))))))
                 (#{build-dispatch-call\ 20502}#
                   (lambda (#{pvars\ 20602}#
                            #{exp\ 20603}#
                            #{y\ 20604}#
                            #{r\ 20605}#
                            #{mod\ 20606}#)
                     (begin
                       (map cdr #{pvars\ 20602}#)
                       (let ((#{ids\ 20614}# (map car #{pvars\ 20602}#)))
                         (begin
                           (let ((#{labels\ 20618}#
                                   (#{gen-labels\ 17333}# #{ids\ 20614}#))
                                 (#{new-vars\ 20619}#
                                   (map #{gen-var\ 17428}# #{ids\ 20614}#)))
                             (#{build-application\ 17239}#
                               #f
                               (#{build-primref\ 17263}# #f (quote apply))
                               (list (#{build-simple-lambda\ 17257}#
                                       #f
                                       (map syntax->datum #{ids\ 20614}#)
                                       #f
                                       #{new-vars\ 20619}#
                                       '()
                                       (#{chi\ 17400}#
                                         #{exp\ 20603}#
                                         (#{extend-env\ 17303}#
                                           #{labels\ 20618}#
                                           (map (lambda (#{var\ 20623}#
                                                         #{level\ 20624}#)
                                                  (cons 'syntax
                                                        (cons #{var\ 20623}#
                                                              #{level\ 20624}#)))
                                                #{new-vars\ 20619}#
                                                (map cdr #{pvars\ 20602}#))
                                           #{r\ 20605}#)
                                         (#{make-binding-wrap\ 17362}#
                                           #{ids\ 20614}#
                                           #{labels\ 20618}#
                                           '(()))
                                         #{mod\ 20606}#))
                                     #{y\ 20604}#))))))))
                 (#{gen-clause\ 20504}#
                   (lambda (#{x\ 20630}#
                            #{keys\ 20631}#
                            #{clauses\ 20632}#
                            #{r\ 20633}#
                            #{pat\ 20634}#
                            #{fender\ 20635}#
                            #{exp\ 20636}#
                            #{mod\ 20637}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 20500}#
                           #{pat\ 20634}#
                           #{keys\ 20631}#))
                       (lambda (#{p\ 20646}# #{pvars\ 20647}#)
                         (if (not (#{distinct-bound-ids?\ 17380}#
                                    (map car #{pvars\ 20647}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 20634}#)
                           (if (not (and-map
                                      (lambda (#{x\ 20654}#)
                                        (not (#{ellipsis?\ 17416}#
                                               (car #{x\ 20654}#))))
                                      #{pvars\ 20647}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 20634}#)
                             (begin
                               (let ((#{y\ 20658}#
                                       (#{gen-var\ 17428}# (quote tmp))))
                                 (#{build-application\ 17239}#
                                   #f
                                   (#{build-simple-lambda\ 17257}#
                                     #f
                                     (list (quote tmp))
                                     #f
                                     (list #{y\ 20658}#)
                                     '()
                                     (begin
                                       (let ((#{y\ 20662}#
                                               (#{build-lexical-reference\ 17245}#
                                                 'value
                                                 #f
                                                 'tmp
                                                 #{y\ 20658}#)))
                                         (#{build-conditional\ 17241}#
                                           #f
                                           (let ((#{tmp\ 20665}#
                                                   #{fender\ 20635}#))
                                             (let ((#{tmp\ 20666}#
                                                     ($sc-dispatch
                                                       #{tmp\ 20665}#
                                                       '#(atom #t))))
                                               (if #{tmp\ 20666}#
                                                 (@apply
                                                   (lambda () #{y\ 20662}#)
                                                   #{tmp\ 20666}#)
                                                 (let ((#{_\ 20668}#
                                                         #{tmp\ 20665}#))
                                                   (#{build-conditional\ 17241}#
                                                     #f
                                                     #{y\ 20662}#
                                                     (#{build-dispatch-call\ 20502}#
                                                       #{pvars\ 20647}#
                                                       #{fender\ 20635}#
                                                       #{y\ 20662}#
                                                       #{r\ 20633}#
                                                       #{mod\ 20637}#)
                                                     (#{build-data\ 17265}#
                                                       #f
                                                       #f))))))
                                           (#{build-dispatch-call\ 20502}#
                                             #{pvars\ 20647}#
                                             #{exp\ 20636}#
                                             #{y\ 20662}#
                                             #{r\ 20633}#
                                             #{mod\ 20637}#)
                                           (#{gen-syntax-case\ 20506}#
                                             #{x\ 20630}#
                                             #{keys\ 20631}#
                                             #{clauses\ 20632}#
                                             #{r\ 20633}#
                                             #{mod\ 20637}#)))))
                                   (list (if (eq? #{p\ 20646}# (quote any))
                                           (#{build-application\ 17239}#
                                             #f
                                             (#{build-primref\ 17263}#
                                               #f
                                               'list)
                                             (list #{x\ 20630}#))
                                           (#{build-application\ 17239}#
                                             #f
                                             (#{build-primref\ 17263}#
                                               #f
                                               '$sc-dispatch)
                                             (list #{x\ 20630}#
                                                   (#{build-data\ 17265}#
                                                     #f
                                                     #{p\ 20646}#))))))))))))))
                 (#{gen-syntax-case\ 20506}#
                   (lambda (#{x\ 20676}#
                            #{keys\ 20677}#
                            #{clauses\ 20678}#
                            #{r\ 20679}#
                            #{mod\ 20680}#)
                     (if (null? #{clauses\ 20678}#)
                       (#{build-application\ 17239}#
                         #f
                         (#{build-primref\ 17263}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 17265}# #f #f)
                               (#{build-data\ 17265}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 20676}#))
                       (let ((#{tmp\ 20690}# (car #{clauses\ 20678}#)))
                         (let ((#{tmp\ 20691}#
                                 ($sc-dispatch
                                   #{tmp\ 20690}#
                                   '(any any))))
                           (if #{tmp\ 20691}#
                             (@apply
                               (lambda (#{pat\ 20694}# #{exp\ 20695}#)
                                 (if (if (#{id?\ 17315}# #{pat\ 20694}#)
                                       (and-map
                                         (lambda (#{x\ 20698}#)
                                           (not (#{free-id=?\ 17374}#
                                                  #{pat\ 20694}#
                                                  #{x\ 20698}#)))
                                         (cons '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage
                                                     #(pat exp)
                                                     #((top) (top))
                                                     #("i20692" "i20693"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x keys clauses r mod)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i20681"
                                                       "i20682"
                                                       "i20683"
                                                       "i20684"
                                                       "i20685"))
                                                   #(ribcage
                                                     (gen-syntax-case
                                                       gen-clause
                                                       build-dispatch-call
                                                       convert-pattern)
                                                     ((top) (top) (top) (top))
                                                     ("i20505"
                                                      "i20503"
                                                      "i20501"
                                                      "i20499"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       chi-lambda-case
                                                       lambda*-formals
                                                       chi-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       chi-void
                                                       eval-local-transformer
                                                       chi-local-syntax
                                                       chi-body
                                                       chi-macro
                                                       chi-application
                                                       chi-expr
                                                       chi
                                                       chi-top
                                                       syntax-type
                                                       chi-when-list
                                                       chi-install-global
                                                       chi-top-sequence
                                                       chi-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i17429"
                                                      "i17427"
                                                      "i17425"
                                                      "i17423"
                                                      "i17421"
                                                      "i17419"
                                                      "i17417"
                                                      "i17415"
                                                      "i17413"
                                                      "i17411"
                                                      "i17409"
                                                      "i17407"
                                                      "i17405"
                                                      "i17403"
                                                      "i17401"
                                                      "i17399"
                                                      "i17397"
                                                      "i17395"
                                                      "i17393"
                                                      "i17391"
                                                      "i17389"
                                                      "i17387"
                                                      "i17385"
                                                      "i17383"
                                                      "i17381"
                                                      "i17379"
                                                      "i17377"
                                                      "i17375"
                                                      "i17373"
                                                      "i17371"
                                                      "i17369"
                                                      "i17367"
                                                      "i17365"
                                                      "i17363"
                                                      "i17361"
                                                      "i17359"
                                                      "i17358"
                                                      "i17357"
                                                      "i17355"
                                                      "i17354"
                                                      "i17353"
                                                      "i17352"
                                                      "i17351"
                                                      "i17349"
                                                      "i17347"
                                                      "i17345"
                                                      "i17343"
                                                      "i17341"
                                                      "i17339"
                                                      "i17337"
                                                      "i17335"
                                                      "i17332"
                                                      "i17330"
                                                      "i17329"
                                                      "i17328"
                                                      "i17327"
                                                      "i17326"
                                                      "i17325"
                                                      "i17323"
                                                      "i17321"
                                                      "i17319"
                                                      "i17317"
                                                      "i17316"
                                                      "i17314"
                                                      "i17312"
                                                      "i17310"
                                                      "i17308"
                                                      "i17306"
                                                      "i17304"
                                                      "i17302"
                                                      "i17301"
                                                      "i17299"
                                                      "i17297"
                                                      "i17296"
                                                      "i17295"
                                                      "i17293"
                                                      "i17292"
                                                      "i17290"
                                                      "i17288"
                                                      "i17286"
                                                      "i17284"
                                                      "i17282"
                                                      "i17280"
                                                      "i17278"
                                                      "i17276"
                                                      "i17274"
                                                      "i17272"
                                                      "i17270"
                                                      "i17268"
                                                      "i17266"
                                                      "i17264"
                                                      "i17262"
                                                      "i17260"
                                                      "i17258"
                                                      "i17256"
                                                      "i17254"
                                                      "i17252"
                                                      "i17250"
                                                      "i17248"
                                                      "i17246"
                                                      "i17244"
                                                      "i17242"
                                                      "i17240"
                                                      "i17238"
                                                      "i17236"
                                                      "i17234"
                                                      "i17232"
                                                      "i17230"
                                                      "i17228"
                                                      "i17227"
                                                      "i17225"
                                                      "i17223"
                                                      "i17221"
                                                      "i17219"
                                                      "i17217"
                                                      "i17215"
                                                      "i17213"
                                                      "i17211"
                                                      "i17209"
                                                      "i17206"
                                                      "i17204"
                                                      "i17202"
                                                      "i17200"
                                                      "i17198"
                                                      "i17196"
                                                      "i17194"
                                                      "i17192"
                                                      "i17190"
                                                      "i17188"
                                                      "i17186"
                                                      "i17184"
                                                      "i17182"
                                                      "i17180"
                                                      "i17178"
                                                      "i17176"
                                                      "i17174"
                                                      "i17172"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors
                                                       and-map*)
                                                     ((top) (top) (top) (top))
                                                     ("i16974"
                                                      "i16973"
                                                      "i16972"
                                                      "i16970")))
                                                  (hygiene guile))
                                               #{keys\ 20677}#))
                                       #f)
                                   (if (#{free-id=?\ 17374}#
                                         '#(syntax-object
                                            pad
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i20692" "i20693"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i20681"
                                                 "i20682"
                                                 "i20683"
                                                 "i20684"
                                                 "i20685"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i20505"
                                                "i20503"
                                                "i20501"
                                                "i20499"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 chi-top
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i17429"
                                                "i17427"
                                                "i17425"
                                                "i17423"
                                                "i17421"
                                                "i17419"
                                                "i17417"
                                                "i17415"
                                                "i17413"
                                                "i17411"
                                                "i17409"
                                                "i17407"
                                                "i17405"
                                                "i17403"
                                                "i17401"
                                                "i17399"
                                                "i17397"
                                                "i17395"
                                                "i17393"
                                                "i17391"
                                                "i17389"
                                                "i17387"
                                                "i17385"
                                                "i17383"
                                                "i17381"
                                                "i17379"
                                                "i17377"
                                                "i17375"
                                                "i17373"
                                                "i17371"
                                                "i17369"
                                                "i17367"
                                                "i17365"
                                                "i17363"
                                                "i17361"
                                                "i17359"
                                                "i17358"
                                                "i17357"
                                                "i17355"
                                                "i17354"
                                                "i17353"
                                                "i17352"
                                                "i17351"
                                                "i17349"
                                                "i17347"
                                                "i17345"
                                                "i17343"
                                                "i17341"
                                                "i17339"
                                                "i17337"
                                                "i17335"
                                                "i17332"
                                                "i17330"
                                                "i17329"
                                                "i17328"
                                                "i17327"
                                                "i17326"
                                                "i17325"
                                                "i17323"
                                                "i17321"
                                                "i17319"
                                                "i17317"
                                                "i17316"
                                                "i17314"
                                                "i17312"
                                                "i17310"
                                                "i17308"
                                                "i17306"
                                                "i17304"
                                                "i17302"
                                                "i17301"
                                                "i17299"
                                                "i17297"
                                                "i17296"
                                                "i17295"
                                                "i17293"
                                                "i17292"
                                                "i17290"
                                                "i17288"
                                                "i17286"
                                                "i17284"
                                                "i17282"
                                                "i17280"
                                                "i17278"
                                                "i17276"
                                                "i17274"
                                                "i17272"
                                                "i17270"
                                                "i17268"
                                                "i17266"
                                                "i17264"
                                                "i17262"
                                                "i17260"
                                                "i17258"
                                                "i17256"
                                                "i17254"
                                                "i17252"
                                                "i17250"
                                                "i17248"
                                                "i17246"
                                                "i17244"
                                                "i17242"
                                                "i17240"
                                                "i17238"
                                                "i17236"
                                                "i17234"
                                                "i17232"
                                                "i17230"
                                                "i17228"
                                                "i17227"
                                                "i17225"
                                                "i17223"
                                                "i17221"
                                                "i17219"
                                                "i17217"
                                                "i17215"
                                                "i17213"
                                                "i17211"
                                                "i17209"
                                                "i17206"
                                                "i17204"
                                                "i17202"
                                                "i17200"
                                                "i17198"
                                                "i17196"
                                                "i17194"
                                                "i17192"
                                                "i17190"
                                                "i17188"
                                                "i17186"
                                                "i17184"
                                                "i17182"
                                                "i17180"
                                                "i17178"
                                                "i17176"
                                                "i17174"
                                                "i17172"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors
                                                 and-map*)
                                               ((top) (top) (top) (top))
                                               ("i16974"
                                                "i16973"
                                                "i16972"
                                                "i16970")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i20692" "i20693"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i20681"
                                                 "i20682"
                                                 "i20683"
                                                 "i20684"
                                                 "i20685"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i20505"
                                                "i20503"
                                                "i20501"
                                                "i20499"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 chi-top
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i17429"
                                                "i17427"
                                                "i17425"
                                                "i17423"
                                                "i17421"
                                                "i17419"
                                                "i17417"
                                                "i17415"
                                                "i17413"
                                                "i17411"
                                                "i17409"
                                                "i17407"
                                                "i17405"
                                                "i17403"
                                                "i17401"
                                                "i17399"
                                                "i17397"
                                                "i17395"
                                                "i17393"
                                                "i17391"
                                                "i17389"
                                                "i17387"
                                                "i17385"
                                                "i17383"
                                                "i17381"
                                                "i17379"
                                                "i17377"
                                                "i17375"
                                                "i17373"
                                                "i17371"
                                                "i17369"
                                                "i17367"
                                                "i17365"
                                                "i17363"
                                                "i17361"
                                                "i17359"
                                                "i17358"
                                                "i17357"
                                                "i17355"
                                                "i17354"
                                                "i17353"
                                                "i17352"
                                                "i17351"
                                                "i17349"
                                                "i17347"
                                                "i17345"
                                                "i17343"
                                                "i17341"
                                                "i17339"
                                                "i17337"
                                                "i17335"
                                                "i17332"
                                                "i17330"
                                                "i17329"
                                                "i17328"
                                                "i17327"
                                                "i17326"
                                                "i17325"
                                                "i17323"
                                                "i17321"
                                                "i17319"
                                                "i17317"
                                                "i17316"
                                                "i17314"
                                                "i17312"
                                                "i17310"
                                                "i17308"
                                                "i17306"
                                                "i17304"
                                                "i17302"
                                                "i17301"
                                                "i17299"
                                                "i17297"
                                                "i17296"
                                                "i17295"
                                                "i17293"
                                                "i17292"
                                                "i17290"
                                                "i17288"
                                                "i17286"
                                                "i17284"
                                                "i17282"
                                                "i17280"
                                                "i17278"
                                                "i17276"
                                                "i17274"
                                                "i17272"
                                                "i17270"
                                                "i17268"
                                                "i17266"
                                                "i17264"
                                                "i17262"
                                                "i17260"
                                                "i17258"
                                                "i17256"
                                                "i17254"
                                                "i17252"
                                                "i17250"
                                                "i17248"
                                                "i17246"
                                                "i17244"
                                                "i17242"
                                                "i17240"
                                                "i17238"
                                                "i17236"
                                                "i17234"
                                                "i17232"
                                                "i17230"
                                                "i17228"
                                                "i17227"
                                                "i17225"
                                                "i17223"
                                                "i17221"
                                                "i17219"
                                                "i17217"
                                                "i17215"
                                                "i17213"
                                                "i17211"
                                                "i17209"
                                                "i17206"
                                                "i17204"
                                                "i17202"
                                                "i17200"
                                                "i17198"
                                                "i17196"
                                                "i17194"
                                                "i17192"
                                                "i17190"
                                                "i17188"
                                                "i17186"
                                                "i17184"
                                                "i17182"
                                                "i17180"
                                                "i17178"
                                                "i17176"
                                                "i17174"
                                                "i17172"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors
                                                 and-map*)
                                               ((top) (top) (top) (top))
                                               ("i16974"
                                                "i16973"
                                                "i16972"
                                                "i16970")))
                                            (hygiene guile)))
                                     (#{chi\ 17400}#
                                       #{exp\ 20695}#
                                       #{r\ 20679}#
                                       '(())
                                       #{mod\ 20680}#)
                                     (begin
                                       (let ((#{labels\ 20703}#
                                               (list (#{gen-label\ 17331}#)))
                                             (#{var\ 20704}#
                                               (#{gen-var\ 17428}#
                                                 #{pat\ 20694}#)))
                                         (#{build-application\ 17239}#
                                           #f
                                           (#{build-simple-lambda\ 17257}#
                                             #f
                                             (list (syntax->datum
                                                     #{pat\ 20694}#))
                                             #f
                                             (list #{var\ 20704}#)
                                             '()
                                             (#{chi\ 17400}#
                                               #{exp\ 20695}#
                                               (#{extend-env\ 17303}#
                                                 #{labels\ 20703}#
                                                 (list (cons 'syntax
                                                             (cons #{var\ 20704}#
                                                                   0)))
                                                 #{r\ 20679}#)
                                               (#{make-binding-wrap\ 17362}#
                                                 (list #{pat\ 20694}#)
                                                 #{labels\ 20703}#
                                                 '(()))
                                               #{mod\ 20680}#))
                                           (list #{x\ 20676}#)))))
                                   (#{gen-clause\ 20504}#
                                     #{x\ 20676}#
                                     #{keys\ 20677}#
                                     (cdr #{clauses\ 20678}#)
                                     #{r\ 20679}#
                                     #{pat\ 20694}#
                                     #t
                                     #{exp\ 20695}#
                                     #{mod\ 20680}#)))
                               #{tmp\ 20691}#)
                             (let ((#{tmp\ 20710}#
                                     ($sc-dispatch
                                       #{tmp\ 20690}#
                                       '(any any any))))
                               (if #{tmp\ 20710}#
                                 (@apply
                                   (lambda (#{pat\ 20714}#
                                            #{fender\ 20715}#
                                            #{exp\ 20716}#)
                                     (#{gen-clause\ 20504}#
                                       #{x\ 20676}#
                                       #{keys\ 20677}#
                                       (cdr #{clauses\ 20678}#)
                                       #{r\ 20679}#
                                       #{pat\ 20714}#
                                       #{fender\ 20715}#
                                       #{exp\ 20716}#
                                       #{mod\ 20680}#))
                                   #{tmp\ 20710}#)
                                 (let ((#{_\ 20718}# #{tmp\ 20690}#))
                                   (syntax-violation
                                     'syntax-case
                                     "invalid clause"
                                     (car #{clauses\ 20678}#))))))))))))
                (begin
                  (lambda (#{e\ 20719}#
                           #{r\ 20720}#
                           #{w\ 20721}#
                           #{s\ 20722}#
                           #{mod\ 20723}#)
                    (begin
                      (let ((#{e\ 20730}#
                              (#{source-wrap\ 17386}#
                                #{e\ 20719}#
                                #{w\ 20721}#
                                #{s\ 20722}#
                                #{mod\ 20723}#)))
                        (let ((#{tmp\ 20731}# #{e\ 20730}#))
                          (let ((#{tmp\ 20732}#
                                  ($sc-dispatch
                                    #{tmp\ 20731}#
                                    '(_ any each-any . each-any))))
                            (if #{tmp\ 20732}#
                              (@apply
                                (lambda (#{val\ 20736}#
                                         #{key\ 20737}#
                                         #{m\ 20738}#)
                                  (if (and-map
                                        (lambda (#{x\ 20739}#)
                                          (if (#{id?\ 17315}# #{x\ 20739}#)
                                            (not (#{ellipsis?\ 17416}#
                                                   #{x\ 20739}#))
                                            #f))
                                        #{key\ 20737}#)
                                    (begin
                                      (let ((#{x\ 20745}#
                                              (#{gen-var\ 17428}#
                                                'tmp)))
                                        (#{build-application\ 17239}#
                                          #{s\ 20722}#
                                          (#{build-simple-lambda\ 17257}#
                                            #f
                                            (list (quote tmp))
                                            #f
                                            (list #{x\ 20745}#)
                                            '()
                                            (#{gen-syntax-case\ 20506}#
                                              (#{build-lexical-reference\ 17245}#
                                                'value
                                                #f
                                                'tmp
                                                #{x\ 20745}#)
                                              #{key\ 20737}#
                                              #{m\ 20738}#
                                              #{r\ 20720}#
                                              #{mod\ 20723}#))
                                          (list (#{chi\ 17400}#
                                                  #{val\ 20736}#
                                                  #{r\ 20720}#
                                                  '(())
                                                  #{mod\ 20723}#)))))
                                    (syntax-violation
                                      'syntax-case
                                      "invalid literals list"
                                      #{e\ 20730}#)))
                                #{tmp\ 20732}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 20731}#))))))))))
            (set! macroexpand
              (lambda*
                (#{x\ 20751}#
                  #:optional
                  (#{m\ 20753}# (quote e))
                  (#{esew\ 20755}# (quote (eval))))
                (#{chi-top\ 17398}#
                  #{x\ 20751}#
                  '()
                  '((top))
                  #{m\ 20753}#
                  #{esew\ 20755}#
                  (cons 'hygiene
                        (module-name (current-module))))))
            (set! identifier?
              (lambda (#{x\ 20759}#)
                (#{nonsymbol-id?\ 17313}# #{x\ 20759}#)))
            (set! datum->syntax
              (lambda (#{id\ 20761}# #{datum\ 20762}#)
                (#{make-syntax-object\ 17277}#
                  #{datum\ 20762}#
                  (#{syntax-object-wrap\ 17283}# #{id\ 20761}#)
                  (#{syntax-object-module\ 17285}# #{id\ 20761}#))))
            (set! syntax->datum
              (lambda (#{x\ 20765}#)
                (#{strip\ 17426}# #{x\ 20765}# (quote (())))))
            (set! syntax-source
              (lambda (#{x\ 20768}#)
                (#{source-annotation\ 17294}# #{x\ 20768}#)))
            (set! generate-temporaries
              (lambda (#{ls\ 20770}#)
                (begin
                  (begin
                    (let ((#{x\ 20774}# #{ls\ 20770}#))
                      (if (not (list? #{x\ 20774}#))
                        (syntax-violation
                          'generate-temporaries
                          "invalid argument"
                          #{x\ 20774}#))))
                  (map (lambda (#{x\ 20775}#)
                         (#{wrap\ 17384}# (gensym) (quote ((top))) #f))
                       #{ls\ 20770}#))))
            (set! free-identifier=?
              (lambda (#{x\ 20779}# #{y\ 20780}#)
                (begin
                  (begin
                    (let ((#{x\ 20785}# #{x\ 20779}#))
                      (if (not (#{nonsymbol-id?\ 17313}# #{x\ 20785}#))
                        (syntax-violation
                          'free-identifier=?
                          "invalid argument"
                          #{x\ 20785}#))))
                  (begin
                    (let ((#{x\ 20788}# #{y\ 20780}#))
                      (if (not (#{nonsymbol-id?\ 17313}# #{x\ 20788}#))
                        (syntax-violation
                          'free-identifier=?
                          "invalid argument"
                          #{x\ 20788}#))))
                  (#{free-id=?\ 17374}# #{x\ 20779}# #{y\ 20780}#))))
            (set! bound-identifier=?
              (lambda (#{x\ 20789}# #{y\ 20790}#)
                (begin
                  (begin
                    (let ((#{x\ 20795}# #{x\ 20789}#))
                      (if (not (#{nonsymbol-id?\ 17313}# #{x\ 20795}#))
                        (syntax-violation
                          'bound-identifier=?
                          "invalid argument"
                          #{x\ 20795}#))))
                  (begin
                    (let ((#{x\ 20798}# #{y\ 20790}#))
                      (if (not (#{nonsymbol-id?\ 17313}# #{x\ 20798}#))
                        (syntax-violation
                          'bound-identifier=?
                          "invalid argument"
                          #{x\ 20798}#))))
                  (#{bound-id=?\ 17376}# #{x\ 20789}# #{y\ 20790}#))))
            (set! syntax-violation
              (lambda (#{who\ 20799}#
                       #{message\ 20800}#
                       #{form\ 20801}#
                       .
                       #{subform\ 20802}#)
                (begin
                  (begin
                    (let ((#{x\ 20809}# #{who\ 20799}#))
                      (if (not (let ((#{x\ 20810}# #{x\ 20809}#))
                                 (begin
                                   (let ((#{t\ 20814}# (not #{x\ 20810}#)))
                                     (if #{t\ 20814}#
                                       #{t\ 20814}#
                                       (begin
                                         (let ((#{t\ 20817}#
                                                 (string? #{x\ 20810}#)))
                                           (if #{t\ 20817}#
                                             #{t\ 20817}#
                                             (symbol? #{x\ 20810}#)))))))))
                        (syntax-violation
                          'syntax-violation
                          "invalid argument"
                          #{x\ 20809}#))))
                  (begin
                    (let ((#{x\ 20821}# #{message\ 20800}#))
                      (if (not (string? #{x\ 20821}#))
                        (syntax-violation
                          'syntax-violation
                          "invalid argument"
                          #{x\ 20821}#))))
                  (scm-error
                    'syntax-error
                    'macroexpand
                    (string-append
                      (if #{who\ 20799}# "~a: " "")
                      "~a "
                      (if (null? #{subform\ 20802}#)
                        "in ~a"
                        "in subform `~s' of `~s'"))
                    (begin
                      (let ((#{tail\ 20823}#
                              (cons #{message\ 20800}#
                                    (map (lambda (#{x\ 20824}#)
                                           (#{strip\ 17426}#
                                             #{x\ 20824}#
                                             '(())))
                                         (append
                                           #{subform\ 20802}#
                                           (list #{form\ 20801}#))))))
                        (if #{who\ 20799}#
                          (cons #{who\ 20799}# #{tail\ 20823}#)
                          #{tail\ 20823}#)))
                    #f))))
            (letrec*
              ((#{match-each\ 20828}#
                 (lambda (#{e\ 20841}#
                          #{p\ 20842}#
                          #{w\ 20843}#
                          #{mod\ 20844}#)
                   (if (pair? #{e\ 20841}#)
                     (begin
                       (let ((#{first\ 20852}#
                               (#{match\ 20840}#
                                 (car #{e\ 20841}#)
                                 #{p\ 20842}#
                                 #{w\ 20843}#
                                 '()
                                 #{mod\ 20844}#)))
                         (if #{first\ 20852}#
                           (begin
                             (let ((#{rest\ 20856}#
                                     (#{match-each\ 20828}#
                                       (cdr #{e\ 20841}#)
                                       #{p\ 20842}#
                                       #{w\ 20843}#
                                       #{mod\ 20844}#)))
                               (if #{rest\ 20856}#
                                 (cons #{first\ 20852}# #{rest\ 20856}#)
                                 #f)))
                           #f)))
                     (if (null? #{e\ 20841}#)
                       '()
                       (if (#{syntax-object?\ 17279}# #{e\ 20841}#)
                         (#{match-each\ 20828}#
                           (#{syntax-object-expression\ 17281}#
                             #{e\ 20841}#)
                           #{p\ 20842}#
                           (#{join-wraps\ 17366}#
                             #{w\ 20843}#
                             (#{syntax-object-wrap\ 17283}# #{e\ 20841}#))
                           (#{syntax-object-module\ 17285}# #{e\ 20841}#))
                         #f)))))
               (#{match-each+\ 20830}#
                 (lambda (#{e\ 20864}#
                          #{x-pat\ 20865}#
                          #{y-pat\ 20866}#
                          #{z-pat\ 20867}#
                          #{w\ 20868}#
                          #{r\ 20869}#
                          #{mod\ 20870}#)
                   (letrec*
                     ((#{f\ 20881}#
                        (lambda (#{e\ 20882}# #{w\ 20883}#)
                          (if (pair? #{e\ 20882}#)
                            (call-with-values
                              (lambda ()
                                (#{f\ 20881}# (cdr #{e\ 20882}#) #{w\ 20883}#))
                              (lambda (#{xr*\ 20886}#
                                       #{y-pat\ 20887}#
                                       #{r\ 20888}#)
                                (if #{r\ 20888}#
                                  (if (null? #{y-pat\ 20887}#)
                                    (begin
                                      (let ((#{xr\ 20893}#
                                              (#{match\ 20840}#
                                                (car #{e\ 20882}#)
                                                #{x-pat\ 20865}#
                                                #{w\ 20883}#
                                                '()
                                                #{mod\ 20870}#)))
                                        (if #{xr\ 20893}#
                                          (values
                                            (cons #{xr\ 20893}# #{xr*\ 20886}#)
                                            #{y-pat\ 20887}#
                                            #{r\ 20888}#)
                                          (values #f #f #f))))
                                    (values
                                      '()
                                      (cdr #{y-pat\ 20887}#)
                                      (#{match\ 20840}#
                                        (car #{e\ 20882}#)
                                        (car #{y-pat\ 20887}#)
                                        #{w\ 20883}#
                                        #{r\ 20888}#
                                        #{mod\ 20870}#)))
                                  (values #f #f #f))))
                            (if (#{syntax-object?\ 17279}# #{e\ 20882}#)
                              (#{f\ 20881}#
                                (#{syntax-object-expression\ 17281}#
                                  #{e\ 20882}#)
                                (#{join-wraps\ 17366}#
                                  #{w\ 20883}#
                                  #{e\ 20882}#))
                              (values
                                '()
                                #{y-pat\ 20866}#
                                (#{match\ 20840}#
                                  #{e\ 20882}#
                                  #{z-pat\ 20867}#
                                  #{w\ 20883}#
                                  #{r\ 20869}#
                                  #{mod\ 20870}#)))))))
                     (begin (#{f\ 20881}# #{e\ 20864}# #{w\ 20868}#)))))
               (#{match-each-any\ 20832}#
                 (lambda (#{e\ 20897}# #{w\ 20898}# #{mod\ 20899}#)
                   (if (pair? #{e\ 20897}#)
                     (begin
                       (let ((#{l\ 20906}#
                               (#{match-each-any\ 20832}#
                                 (cdr #{e\ 20897}#)
                                 #{w\ 20898}#
                                 #{mod\ 20899}#)))
                         (if #{l\ 20906}#
                           (cons (#{wrap\ 17384}#
                                   (car #{e\ 20897}#)
                                   #{w\ 20898}#
                                   #{mod\ 20899}#)
                                 #{l\ 20906}#)
                           #f)))
                     (if (null? #{e\ 20897}#)
                       '()
                       (if (#{syntax-object?\ 17279}# #{e\ 20897}#)
                         (#{match-each-any\ 20832}#
                           (#{syntax-object-expression\ 17281}#
                             #{e\ 20897}#)
                           (#{join-wraps\ 17366}#
                             #{w\ 20898}#
                             (#{syntax-object-wrap\ 17283}# #{e\ 20897}#))
                           #{mod\ 20899}#)
                         #f)))))
               (#{match-empty\ 20834}#
                 (lambda (#{p\ 20914}# #{r\ 20915}#)
                   (if (null? #{p\ 20914}#)
                     #{r\ 20915}#
                     (if (eq? #{p\ 20914}# (quote _))
                       #{r\ 20915}#
                       (if (eq? #{p\ 20914}# (quote any))
                         (cons (quote ()) #{r\ 20915}#)
                         (if (pair? #{p\ 20914}#)
                           (#{match-empty\ 20834}#
                             (car #{p\ 20914}#)
                             (#{match-empty\ 20834}#
                               (cdr #{p\ 20914}#)
                               #{r\ 20915}#))
                           (if (eq? #{p\ 20914}# (quote each-any))
                             (cons (quote ()) #{r\ 20915}#)
                             (begin
                               (let ((#{atom-key\ 20931}#
                                       (vector-ref #{p\ 20914}# 0)))
                                 (if (eqv? #{atom-key\ 20931}# (quote each))
                                   (#{match-empty\ 20834}#
                                     (vector-ref #{p\ 20914}# 1)
                                     #{r\ 20915}#)
                                   (if (eqv? #{atom-key\ 20931}# (quote each+))
                                     (#{match-empty\ 20834}#
                                       (vector-ref #{p\ 20914}# 1)
                                       (#{match-empty\ 20834}#
                                         (reverse (vector-ref #{p\ 20914}# 2))
                                         (#{match-empty\ 20834}#
                                           (vector-ref #{p\ 20914}# 3)
                                           #{r\ 20915}#)))
                                     (if (if (eqv? #{atom-key\ 20931}#
                                                   'free-id)
                                           #t
                                           (eqv? #{atom-key\ 20931}#
                                                 'atom))
                                       #{r\ 20915}#
                                       (if (eqv? #{atom-key\ 20931}#
                                                 'vector)
                                         (#{match-empty\ 20834}#
                                           (vector-ref #{p\ 20914}# 1)
                                           #{r\ 20915}#))))))))))))))
               (#{combine\ 20836}#
                 (lambda (#{r*\ 20936}# #{r\ 20937}#)
                   (if (null? (car #{r*\ 20936}#))
                     #{r\ 20937}#
                     (cons (map car #{r*\ 20936}#)
                           (#{combine\ 20836}#
                             (map cdr #{r*\ 20936}#)
                             #{r\ 20937}#)))))
               (#{match*\ 20838}#
                 (lambda (#{e\ 20940}#
                          #{p\ 20941}#
                          #{w\ 20942}#
                          #{r\ 20943}#
                          #{mod\ 20944}#)
                   (if (null? #{p\ 20941}#)
                     (if (null? #{e\ 20940}#) #{r\ 20943}# #f)
                     (if (pair? #{p\ 20941}#)
                       (if (pair? #{e\ 20940}#)
                         (#{match\ 20840}#
                           (car #{e\ 20940}#)
                           (car #{p\ 20941}#)
                           #{w\ 20942}#
                           (#{match\ 20840}#
                             (cdr #{e\ 20940}#)
                             (cdr #{p\ 20941}#)
                             #{w\ 20942}#
                             #{r\ 20943}#
                             #{mod\ 20944}#)
                           #{mod\ 20944}#)
                         #f)
                       (if (eq? #{p\ 20941}# (quote each-any))
                         (begin
                           (let ((#{l\ 20961}#
                                   (#{match-each-any\ 20832}#
                                     #{e\ 20940}#
                                     #{w\ 20942}#
                                     #{mod\ 20944}#)))
                             (if #{l\ 20961}#
                               (cons #{l\ 20961}# #{r\ 20943}#)
                               #f)))
                         (begin
                           (let ((#{atom-key\ 20967}#
                                   (vector-ref #{p\ 20941}# 0)))
                             (if (eqv? #{atom-key\ 20967}# (quote each))
                               (if (null? #{e\ 20940}#)
                                 (#{match-empty\ 20834}#
                                   (vector-ref #{p\ 20941}# 1)
                                   #{r\ 20943}#)
                                 (begin
                                   (let ((#{l\ 20970}#
                                           (#{match-each\ 20828}#
                                             #{e\ 20940}#
                                             (vector-ref #{p\ 20941}# 1)
                                             #{w\ 20942}#
                                             #{mod\ 20944}#)))
                                     (if #{l\ 20970}#
                                       (letrec*
                                         ((#{collect\ 20975}#
                                            (lambda (#{l\ 20976}#)
                                              (if (null? (car #{l\ 20976}#))
                                                #{r\ 20943}#
                                                (cons (map car #{l\ 20976}#)
                                                      (#{collect\ 20975}#
                                                        (map cdr
                                                             #{l\ 20976}#)))))))
                                         (begin
                                           (#{collect\ 20975}# #{l\ 20970}#)))
                                       #f))))
                               (if (eqv? #{atom-key\ 20967}# (quote each+))
                                 (call-with-values
                                   (lambda ()
                                     (#{match-each+\ 20830}#
                                       #{e\ 20940}#
                                       (vector-ref #{p\ 20941}# 1)
                                       (vector-ref #{p\ 20941}# 2)
                                       (vector-ref #{p\ 20941}# 3)
                                       #{w\ 20942}#
                                       #{r\ 20943}#
                                       #{mod\ 20944}#))
                                   (lambda (#{xr*\ 20978}#
                                            #{y-pat\ 20979}#
                                            #{r\ 20980}#)
                                     (if #{r\ 20980}#
                                       (if (null? #{y-pat\ 20979}#)
                                         (if (null? #{xr*\ 20978}#)
                                           (#{match-empty\ 20834}#
                                             (vector-ref #{p\ 20941}# 1)
                                             #{r\ 20980}#)
                                           (#{combine\ 20836}#
                                             #{xr*\ 20978}#
                                             #{r\ 20980}#))
                                         #f)
                                       #f)))
                                 (if (eqv? #{atom-key\ 20967}# (quote free-id))
                                   (if (#{id?\ 17315}# #{e\ 20940}#)
                                     (if (#{free-id=?\ 17374}#
                                           (#{wrap\ 17384}#
                                             #{e\ 20940}#
                                             #{w\ 20942}#
                                             #{mod\ 20944}#)
                                           (vector-ref #{p\ 20941}# 1))
                                       #{r\ 20943}#
                                       #f)
                                     #f)
                                   (if (eqv? #{atom-key\ 20967}# (quote atom))
                                     (if (equal?
                                           (vector-ref #{p\ 20941}# 1)
                                           (#{strip\ 17426}#
                                             #{e\ 20940}#
                                             #{w\ 20942}#))
                                       #{r\ 20943}#
                                       #f)
                                     (if (eqv? #{atom-key\ 20967}#
                                               'vector)
                                       (if (vector? #{e\ 20940}#)
                                         (#{match\ 20840}#
                                           (vector->list #{e\ 20940}#)
                                           (vector-ref #{p\ 20941}# 1)
                                           #{w\ 20942}#
                                           #{r\ 20943}#
                                           #{mod\ 20944}#)
                                         #f)))))))))))))
               (#{match\ 20840}#
                 (lambda (#{e\ 20997}#
                          #{p\ 20998}#
                          #{w\ 20999}#
                          #{r\ 21000}#
                          #{mod\ 21001}#)
                   (if (not #{r\ 21000}#)
                     #f
                     (if (eq? #{p\ 20998}# (quote _))
                       #{r\ 21000}#
                       (if (eq? #{p\ 20998}# (quote any))
                         (cons (#{wrap\ 17384}#
                                 #{e\ 20997}#
                                 #{w\ 20999}#
                                 #{mod\ 21001}#)
                               #{r\ 21000}#)
                         (if (#{syntax-object?\ 17279}# #{e\ 20997}#)
                           (#{match*\ 20838}#
                             (#{syntax-object-expression\ 17281}#
                               #{e\ 20997}#)
                             #{p\ 20998}#
                             (#{join-wraps\ 17366}#
                               #{w\ 20999}#
                               (#{syntax-object-wrap\ 17283}# #{e\ 20997}#))
                             #{r\ 21000}#
                             (#{syntax-object-module\ 17285}# #{e\ 20997}#))
                           (#{match*\ 20838}#
                             #{e\ 20997}#
                             #{p\ 20998}#
                             #{w\ 20999}#
                             #{r\ 21000}#
                             #{mod\ 21001}#))))))))
              (begin
                (set! $sc-dispatch
                  (lambda (#{e\ 21016}# #{p\ 21017}#)
                    (if (eq? #{p\ 21017}# (quote any))
                      (list #{e\ 21016}#)
                      (if (eq? #{p\ 21017}# (quote _))
                        '()
                        (if (#{syntax-object?\ 17279}# #{e\ 21016}#)
                          (#{match*\ 20838}#
                            (#{syntax-object-expression\ 17281}#
                              #{e\ 21016}#)
                            #{p\ 21017}#
                            (#{syntax-object-wrap\ 17283}# #{e\ 21016}#)
                            '()
                            (#{syntax-object-module\ 17285}# #{e\ 21016}#))
                          (#{match*\ 20838}#
                            #{e\ 21016}#
                            #{p\ 21017}#
                            '(())
                            '()
                            #f))))))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x\ 21028}#)
      (let ((#{tmp\ 21030}# #{x\ 21028}#))
        (let ((#{tmp\ 21031}#
                ($sc-dispatch
                  #{tmp\ 21030}#
                  '(_ () any . each-any))))
          (if #{tmp\ 21031}#
            (@apply
              (lambda (#{e1\ 21034}# #{e2\ 21035}#)
                (cons '#(syntax-object
                         begin
                         ((top)
                          #(ribcage
                            #(e1 e2)
                            #((top) (top))
                            #("i21032" "i21033"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i21029")))
                         (hygiene guile))
                      (cons #{e1\ 21034}# #{e2\ 21035}#)))
              #{tmp\ 21031}#)
            (let ((#{tmp\ 21037}#
                    ($sc-dispatch
                      #{tmp\ 21030}#
                      '(_ ((any any)) any . each-any))))
              (if #{tmp\ 21037}#
                (@apply
                  (lambda (#{out\ 21042}#
                           #{in\ 21043}#
                           #{e1\ 21044}#
                           #{e2\ 21045}#)
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(out in e1 e2)
                                #((top) (top) (top) (top))
                                #("i21038" "i21039" "i21040" "i21041"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i21029")))
                             (hygiene guile))
                          #{in\ 21043}#
                          '()
                          (list #{out\ 21042}#
                                (cons '#(syntax-object
                                         begin
                                         ((top)
                                          #(ribcage
                                            #(out in e1 e2)
                                            #((top) (top) (top) (top))
                                            #("i21038"
                                              "i21039"
                                              "i21040"
                                              "i21041"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i21029")))
                                         (hygiene guile))
                                      (cons #{e1\ 21044}# #{e2\ 21045}#)))))
                  #{tmp\ 21037}#)
                (let ((#{tmp\ 21047}#
                        ($sc-dispatch
                          #{tmp\ 21030}#
                          '(_ #(each (any any)) any . each-any))))
                  (if #{tmp\ 21047}#
                    (@apply
                      (lambda (#{out\ 21052}#
                               #{in\ 21053}#
                               #{e1\ 21054}#
                               #{e2\ 21055}#)
                        (list '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(out in e1 e2)
                                    #((top) (top) (top) (top))
                                    #("i21048" "i21049" "i21050" "i21051"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i21029")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       list
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i21048"
                                            "i21049"
                                            "i21050"
                                            "i21051"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i21029")))
                                       (hygiene guile))
                                    #{in\ 21053}#)
                              '()
                              (list #{out\ 21052}#
                                    (cons '#(syntax-object
                                             begin
                                             ((top)
                                              #(ribcage
                                                #(out in e1 e2)
                                                #((top) (top) (top) (top))
                                                #("i21048"
                                                  "i21049"
                                                  "i21050"
                                                  "i21051"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i21029")))
                                             (hygiene guile))
                                          (cons #{e1\ 21054}#
                                                #{e2\ 21055}#)))))
                      #{tmp\ 21047}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 21030}#)))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x\ 21059}#)
      (let ((#{tmp\ 21061}# #{x\ 21059}#))
        (let ((#{tmp\ 21062}#
                ($sc-dispatch
                  #{tmp\ 21061}#
                  '(_ each-any . #(each ((any . any) any))))))
          (if #{tmp\ 21062}#
            (@apply
              (lambda (#{k\ 21067}#
                       #{keyword\ 21068}#
                       #{pattern\ 21069}#
                       #{template\ 21070}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage
                            #(k keyword pattern template)
                            #((top) (top) (top) (top))
                            #("i21063" "i21064" "i21065" "i21066"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i21060")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i21063" "i21064" "i21065" "i21066"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i21060")))
                          (hygiene guile)))
                      (vector
                        '(#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i21063" "i21064" "i21065" "i21066"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i21060")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            syntax-rules
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i21063" "i21064" "i21065" "i21066"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i21060")))
                            (hygiene guile)))
                        (cons '#(syntax-object
                                 patterns
                                 ((top)
                                  #(ribcage
                                    #(k keyword pattern template)
                                    #((top) (top) (top) (top))
                                    #("i21063" "i21064" "i21065" "i21066"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i21060")))
                                 (hygiene guile))
                              #{pattern\ 21069}#))
                      (cons '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i21063" "i21064" "i21065" "i21066"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i21060")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     x
                                     ((top)
                                      #(ribcage
                                        #(k keyword pattern template)
                                        #((top) (top) (top) (top))
                                        #("i21063" "i21064" "i21065" "i21066"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i21060")))
                                     (hygiene guile))
                                  (cons #{k\ 21067}#
                                        (map (lambda (#{tmp\ 21074}#
                                                      #{tmp\ 21073}#)
                                               (list (cons '#(syntax-object
                                                              dummy
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21063"
                                                                   "i21064"
                                                                   "i21065"
                                                                   "i21066"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21060")))
                                                              (hygiene guile))
                                                           #{tmp\ 21073}#)
                                                     (list '#(syntax-object
                                                              syntax
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21063"
                                                                   "i21064"
                                                                   "i21065"
                                                                   "i21066"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21060")))
                                                              (hygiene guile))
                                                           #{tmp\ 21074}#)))
                                             #{template\ 21070}#
                                             #{pattern\ 21069}#))))))
              #{tmp\ 21062}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 21061}#)))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x\ 21075}#)
      (let ((#{tmp\ 21077}# #{x\ 21075}#))
        (let ((#{tmp\ 21078}#
                ($sc-dispatch
                  #{tmp\ 21077}#
                  '(any #(each (any any)) any . each-any))))
          (if (if #{tmp\ 21078}#
                (@apply
                  (lambda (#{let*\ 21084}#
                           #{x\ 21085}#
                           #{v\ 21086}#
                           #{e1\ 21087}#
                           #{e2\ 21088}#)
                    (and-map identifier? #{x\ 21085}#))
                  #{tmp\ 21078}#)
                #f)
            (@apply
              (lambda (#{let*\ 21095}#
                       #{x\ 21096}#
                       #{v\ 21097}#
                       #{e1\ 21098}#
                       #{e2\ 21099}#)
                (letrec*
                  ((#{f\ 21102}#
                     (lambda (#{bindings\ 21103}#)
                       (if (null? #{bindings\ 21103}#)
                         (cons '#(syntax-object
                                  let
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage
                                     #(f bindings)
                                     #((top) (top))
                                     #("i21100" "i21101"))
                                   #(ribcage
                                     #(let* x v e1 e2)
                                     #((top) (top) (top) (top) (top))
                                     #("i21090"
                                       "i21091"
                                       "i21092"
                                       "i21093"
                                       "i21094"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i21076")))
                                  (hygiene guile))
                               (cons '()
                                     (cons #{e1\ 21098}# #{e2\ 21099}#)))
                         (let ((#{tmp\ 21108}#
                                 (list (#{f\ 21102}# (cdr #{bindings\ 21103}#))
                                       (car #{bindings\ 21103}#))))
                           (let ((#{tmp\ 21109}#
                                   ($sc-dispatch
                                     #{tmp\ 21108}#
                                     '(any any))))
                             (if #{tmp\ 21109}#
                               (@apply
                                 (lambda (#{body\ 21112}# #{binding\ 21113}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body binding)
                                               #((top) (top))
                                               #("i21110" "i21111"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f bindings)
                                               #((top) (top))
                                               #("i21100" "i21101"))
                                             #(ribcage
                                               #(let* x v e1 e2)
                                               #((top) (top) (top) (top) (top))
                                               #("i21090"
                                                 "i21091"
                                                 "i21092"
                                                 "i21093"
                                                 "i21094"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i21076")))
                                            (hygiene guile))
                                         (list #{binding\ 21113}#)
                                         #{body\ 21112}#))
                                 #{tmp\ 21109}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 21108}#))))))))
                  (begin
                    (#{f\ 21102}#
                      (map list #{x\ 21096}# #{v\ 21097}#)))))
              #{tmp\ 21078}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 21077}#)))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x\ 21114}#)
      (let ((#{tmp\ 21116}# #{orig-x\ 21114}#))
        (let ((#{tmp\ 21117}#
                ($sc-dispatch
                  #{tmp\ 21116}#
                  '(_ #(each (any any . any))
                      (any . each-any)
                      .
                      each-any))))
          (if #{tmp\ 21117}#
            (@apply
              (lambda (#{var\ 21124}#
                       #{init\ 21125}#
                       #{step\ 21126}#
                       #{e0\ 21127}#
                       #{e1\ 21128}#
                       #{c\ 21129}#)
                (let ((#{tmp\ 21131}#
                        (map (lambda (#{v\ 21152}# #{s\ 21153}#)
                               (let ((#{tmp\ 21156}# #{s\ 21153}#))
                                 (let ((#{tmp\ 21157}#
                                         ($sc-dispatch
                                           #{tmp\ 21156}#
                                           '())))
                                   (if #{tmp\ 21157}#
                                     (@apply
                                       (lambda () #{v\ 21152}#)
                                       #{tmp\ 21157}#)
                                     (let ((#{tmp\ 21158}#
                                             ($sc-dispatch
                                               #{tmp\ 21156}#
                                               '(any))))
                                       (if #{tmp\ 21158}#
                                         (@apply
                                           (lambda (#{e\ 21160}#) #{e\ 21160}#)
                                           #{tmp\ 21158}#)
                                         (let ((#{_\ 21162}# #{tmp\ 21156}#))
                                           (syntax-violation
                                             'do
                                             "bad step expression"
                                             #{orig-x\ 21114}#
                                             #{s\ 21153}#))))))))
                             #{var\ 21124}#
                             #{step\ 21126}#)))
                  (let ((#{tmp\ 21132}#
                          ($sc-dispatch #{tmp\ 21131}# (quote each-any))))
                    (if #{tmp\ 21132}#
                      (@apply
                        (lambda (#{step\ 21134}#)
                          (let ((#{tmp\ 21135}# #{e1\ 21128}#))
                            (let ((#{tmp\ 21136}#
                                    ($sc-dispatch #{tmp\ 21135}# (quote ()))))
                              (if #{tmp\ 21136}#
                                (@apply
                                  (lambda ()
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i21133"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i21118"
                                                  "i21119"
                                                  "i21120"
                                                  "i21121"
                                                  "i21122"
                                                  "i21123"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i21115")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i21133"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i21118"
                                                  "i21119"
                                                  "i21120"
                                                  "i21121"
                                                  "i21122"
                                                  "i21123"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i21115")))
                                             (hygiene guile))
                                          (map list
                                               #{var\ 21124}#
                                               #{init\ 21125}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i21133"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i21118"
                                                        "i21119"
                                                        "i21120"
                                                        "i21121"
                                                        "i21122"
                                                        "i21123"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i21115")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         not
                                                         ((top)
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i21133"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i21118"
                                                              "i21119"
                                                              "i21120"
                                                              "i21121"
                                                              "i21122"
                                                              "i21123"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i21115")))
                                                         (hygiene guile))
                                                      #{e0\ 21127}#)
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i21133"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i21118"
                                                              "i21119"
                                                              "i21120"
                                                              "i21121"
                                                              "i21122"
                                                              "i21123"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i21115")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c\ 21129}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i21133"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i21118"
                                                                            "i21119"
                                                                            "i21120"
                                                                            "i21121"
                                                                            "i21122"
                                                                            "i21123"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i21115")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step\ 21134}#)))))))
                                  #{tmp\ 21136}#)
                                (let ((#{tmp\ 21141}#
                                        ($sc-dispatch
                                          #{tmp\ 21135}#
                                          '(any . each-any))))
                                  (if #{tmp\ 21141}#
                                    (@apply
                                      (lambda (#{e1\ 21144}# #{e2\ 21145}#)
                                        (list '#(syntax-object
                                                 let
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i21142" "i21143"))
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i21133"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i21118"
                                                      "i21119"
                                                      "i21120"
                                                      "i21121"
                                                      "i21122"
                                                      "i21123"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i21115")))
                                                 (hygiene guile))
                                              '#(syntax-object
                                                 doloop
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i21142" "i21143"))
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i21133"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i21118"
                                                      "i21119"
                                                      "i21120"
                                                      "i21121"
                                                      "i21122"
                                                      "i21123"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i21115")))
                                                 (hygiene guile))
                                              (map list
                                                   #{var\ 21124}#
                                                   #{init\ 21125}#)
                                              (list '#(syntax-object
                                                       if
                                                       ((top)
                                                        #(ribcage
                                                          #(e1 e2)
                                                          #((top) (top))
                                                          #("i21142" "i21143"))
                                                        #(ribcage
                                                          #(step)
                                                          #((top))
                                                          #("i21133"))
                                                        #(ribcage
                                                          #(var
                                                            init
                                                            step
                                                            e0
                                                            e1
                                                            c)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i21118"
                                                            "i21119"
                                                            "i21120"
                                                            "i21121"
                                                            "i21122"
                                                            "i21123"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(orig-x)
                                                          #((top))
                                                          #("i21115")))
                                                       (hygiene guile))
                                                    #{e0\ 21127}#
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i21142"
                                                                  "i21143"))
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i21133"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i21118"
                                                                  "i21119"
                                                                  "i21120"
                                                                  "i21121"
                                                                  "i21122"
                                                                  "i21123"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i21115")))
                                                             (hygiene guile))
                                                          (cons #{e1\ 21144}#
                                                                #{e2\ 21145}#))
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i21142"
                                                                  "i21143"))
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i21133"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i21118"
                                                                  "i21119"
                                                                  "i21120"
                                                                  "i21121"
                                                                  "i21122"
                                                                  "i21123"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i21115")))
                                                             (hygiene guile))
                                                          (append
                                                            #{c\ 21129}#
                                                            (list (cons '#(syntax-object
                                                                           doloop
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(e1
                                                                                e2)
                                                                              #((top)
                                                                                (top))
                                                                              #("i21142"
                                                                                "i21143"))
                                                                            #(ribcage
                                                                              #(step)
                                                                              #((top))
                                                                              #("i21133"))
                                                                            #(ribcage
                                                                              #(var
                                                                                init
                                                                                step
                                                                                e0
                                                                                e1
                                                                                c)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i21118"
                                                                                "i21119"
                                                                                "i21120"
                                                                                "i21121"
                                                                                "i21122"
                                                                                "i21123"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(orig-x)
                                                                              #((top))
                                                                              #("i21115")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{step\ 21134}#)))))))
                                      #{tmp\ 21141}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{tmp\ 21135}#)))))))
                        #{tmp\ 21132}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 21131}#)))))
              #{tmp\ 21117}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 21116}#)))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasicons\ 21169}#
         (lambda (#{x\ 21173}# #{y\ 21174}#)
           (let ((#{tmp\ 21178}# (list #{x\ 21173}# #{y\ 21174}#)))
             (let ((#{tmp\ 21179}#
                     ($sc-dispatch #{tmp\ 21178}# (quote (any any)))))
               (if #{tmp\ 21179}#
                 (@apply
                   (lambda (#{x\ 21182}# #{y\ 21183}#)
                     (let ((#{tmp\ 21184}# #{y\ 21183}#))
                       (let ((#{tmp\ 21185}#
                               ($sc-dispatch
                                 #{tmp\ 21184}#
                                 '(#(free-id
                                     #(syntax-object
                                       quote
                                       ((top)
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i21180" "i21181"))
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i21175" "i21176"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i21165"
                                            "i21166"
                                            "i21167"
                                            "i21168")))
                                       (hygiene guile)))
                                   any))))
                         (if #{tmp\ 21185}#
                           (@apply
                             (lambda (#{dy\ 21187}#)
                               (let ((#{tmp\ 21188}# #{x\ 21182}#))
                                 (let ((#{tmp\ 21189}#
                                         ($sc-dispatch
                                           #{tmp\ 21188}#
                                           '(#(free-id
                                               #(syntax-object
                                                 quote
                                                 ((top)
                                                  #(ribcage
                                                    #(dy)
                                                    #((top))
                                                    #("i21186"))
                                                  #(ribcage
                                                    #(x y)
                                                    #((top) (top))
                                                    #("i21180" "i21181"))
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x y)
                                                    #((top) (top))
                                                    #("i21175" "i21176"))
                                                  #(ribcage
                                                    #(quasicons
                                                      quasiappend
                                                      quasivector
                                                      quasi)
                                                    #((top) (top) (top) (top))
                                                    #("i21165"
                                                      "i21166"
                                                      "i21167"
                                                      "i21168")))
                                                 (hygiene guile)))
                                             any))))
                                   (if #{tmp\ 21189}#
                                     (@apply
                                       (lambda (#{dx\ 21191}#)
                                         (list '#(syntax-object
                                                  quote
                                                  ((top)
                                                   #(ribcage
                                                     #(dx)
                                                     #((top))
                                                     #("i21190"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i21186"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i21180" "i21181"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i21175" "i21176"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i21165"
                                                       "i21166"
                                                       "i21167"
                                                       "i21168")))
                                                  (hygiene guile))
                                               (cons #{dx\ 21191}#
                                                     #{dy\ 21187}#)))
                                       #{tmp\ 21189}#)
                                     (let ((#{_\ 21193}# #{tmp\ 21188}#))
                                       (if (null? #{dy\ 21187}#)
                                         (list '#(syntax-object
                                                  list
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i21192"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i21186"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i21180" "i21181"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i21175" "i21176"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i21165"
                                                       "i21166"
                                                       "i21167"
                                                       "i21168")))
                                                  (hygiene guile))
                                               #{x\ 21182}#)
                                         (list '#(syntax-object
                                                  cons
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i21192"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i21186"))
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i21180" "i21181"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i21175" "i21176"))
                                                   #(ribcage
                                                     #(quasicons
                                                       quasiappend
                                                       quasivector
                                                       quasi)
                                                     #((top) (top) (top) (top))
                                                     #("i21165"
                                                       "i21166"
                                                       "i21167"
                                                       "i21168")))
                                                  (hygiene guile))
                                               #{x\ 21182}#
                                               #{y\ 21183}#)))))))
                             #{tmp\ 21185}#)
                           (let ((#{tmp\ 21194}#
                                   ($sc-dispatch
                                     #{tmp\ 21184}#
                                     '(#(free-id
                                         #(syntax-object
                                           list
                                           ((top)
                                            #(ribcage
                                              #(x y)
                                              #((top) (top))
                                              #("i21180" "i21181"))
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x y)
                                              #((top) (top))
                                              #("i21175" "i21176"))
                                            #(ribcage
                                              #(quasicons
                                                quasiappend
                                                quasivector
                                                quasi)
                                              #((top) (top) (top) (top))
                                              #("i21165"
                                                "i21166"
                                                "i21167"
                                                "i21168")))
                                           (hygiene guile)))
                                       .
                                       any))))
                             (if #{tmp\ 21194}#
                               (@apply
                                 (lambda (#{stuff\ 21196}#)
                                   (cons '#(syntax-object
                                            list
                                            ((top)
                                             #(ribcage
                                               #(stuff)
                                               #((top))
                                               #("i21195"))
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i21180" "i21181"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i21175" "i21176"))
                                             #(ribcage
                                               #(quasicons
                                                 quasiappend
                                                 quasivector
                                                 quasi)
                                               #((top) (top) (top) (top))
                                               #("i21165"
                                                 "i21166"
                                                 "i21167"
                                                 "i21168")))
                                            (hygiene guile))
                                         (cons #{x\ 21182}# #{stuff\ 21196}#)))
                                 #{tmp\ 21194}#)
                               (let ((#{else\ 21198}# #{tmp\ 21184}#))
                                 (list '#(syntax-object
                                          cons
                                          ((top)
                                           #(ribcage
                                             #(else)
                                             #((top))
                                             #("i21197"))
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i21180" "i21181"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i21175" "i21176"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i21165"
                                               "i21166"
                                               "i21167"
                                               "i21168")))
                                          (hygiene guile))
                                       #{x\ 21182}#
                                       #{y\ 21183}#))))))))
                   #{tmp\ 21179}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp\ 21178}#))))))
       (#{quasiappend\ 21170}#
         (lambda (#{x\ 21199}# #{y\ 21200}#)
           (let ((#{tmp\ 21204}# (list #{x\ 21199}# #{y\ 21200}#)))
             (let ((#{tmp\ 21205}#
                     ($sc-dispatch #{tmp\ 21204}# (quote (any any)))))
               (if #{tmp\ 21205}#
                 (@apply
                   (lambda (#{x\ 21208}# #{y\ 21209}#)
                     (let ((#{tmp\ 21210}# #{y\ 21209}#))
                       (let ((#{tmp\ 21211}#
                               ($sc-dispatch
                                 #{tmp\ 21210}#
                                 '(#(free-id
                                     #(syntax-object
                                       quote
                                       ((top)
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i21206" "i21207"))
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x y)
                                          #((top) (top))
                                          #("i21201" "i21202"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i21165"
                                            "i21166"
                                            "i21167"
                                            "i21168")))
                                       (hygiene guile)))
                                   ()))))
                         (if #{tmp\ 21211}#
                           (@apply (lambda () #{x\ 21208}#) #{tmp\ 21211}#)
                           (let ((#{_\ 21213}# #{tmp\ 21210}#))
                             (list '#(syntax-object
                                      append
                                      ((top)
                                       #(ribcage #(_) #((top)) #("i21212"))
                                       #(ribcage
                                         #(x y)
                                         #((top) (top))
                                         #("i21206" "i21207"))
                                       #(ribcage () () ())
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(x y)
                                         #((top) (top))
                                         #("i21201" "i21202"))
                                       #(ribcage
                                         #(quasicons
                                           quasiappend
                                           quasivector
                                           quasi)
                                         #((top) (top) (top) (top))
                                         #("i21165"
                                           "i21166"
                                           "i21167"
                                           "i21168")))
                                      (hygiene guile))
                                   #{x\ 21208}#
                                   #{y\ 21209}#))))))
                   #{tmp\ 21205}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp\ 21204}#))))))
       (#{quasivector\ 21171}#
         (lambda (#{x\ 21214}#)
           (let ((#{tmp\ 21217}# #{x\ 21214}#))
             (let ((#{x\ 21219}# #{tmp\ 21217}#))
               (let ((#{tmp\ 21220}# #{x\ 21219}#))
                 (let ((#{tmp\ 21221}#
                         ($sc-dispatch
                           #{tmp\ 21220}#
                           '(#(free-id
                               #(syntax-object
                                 quote
                                 ((top)
                                  #(ribcage #(x) #((top)) #("i21218"))
                                  #(ribcage () () ())
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i21215"))
                                  #(ribcage
                                    #(quasicons quasiappend quasivector quasi)
                                    #((top) (top) (top) (top))
                                    #("i21165" "i21166" "i21167" "i21168")))
                                 (hygiene guile)))
                             each-any))))
                   (if #{tmp\ 21221}#
                     (@apply
                       (lambda (#{x\ 21223}#)
                         (list '#(syntax-object
                                  quote
                                  ((top)
                                   #(ribcage #(x) #((top)) #("i21222"))
                                   #(ribcage #(x) #((top)) #("i21218"))
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i21215"))
                                   #(ribcage
                                     #(quasicons quasiappend quasivector quasi)
                                     #((top) (top) (top) (top))
                                     #("i21165" "i21166" "i21167" "i21168")))
                                  (hygiene guile))
                               (list->vector #{x\ 21223}#)))
                       #{tmp\ 21221}#)
                     (let ((#{tmp\ 21225}#
                             ($sc-dispatch
                               #{tmp\ 21220}#
                               '(#(free-id
                                   #(syntax-object
                                     list
                                     ((top)
                                      #(ribcage #(x) #((top)) #("i21218"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i21215"))
                                      #(ribcage
                                        #(quasicons
                                          quasiappend
                                          quasivector
                                          quasi)
                                        #((top) (top) (top) (top))
                                        #("i21165"
                                          "i21166"
                                          "i21167"
                                          "i21168")))
                                     (hygiene guile)))
                                 .
                                 each-any))))
                       (if #{tmp\ 21225}#
                         (@apply
                           (lambda (#{x\ 21227}#)
                             (cons '#(syntax-object
                                      vector
                                      ((top)
                                       #(ribcage #(x) #((top)) #("i21226"))
                                       #(ribcage #(x) #((top)) #("i21218"))
                                       #(ribcage () () ())
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i21215"))
                                       #(ribcage
                                         #(quasicons
                                           quasiappend
                                           quasivector
                                           quasi)
                                         #((top) (top) (top) (top))
                                         #("i21165"
                                           "i21166"
                                           "i21167"
                                           "i21168")))
                                      (hygiene guile))
                                   #{x\ 21227}#))
                           #{tmp\ 21225}#)
                         (let ((#{_\ 21230}# #{tmp\ 21220}#))
                           (list '#(syntax-object
                                    list->vector
                                    ((top)
                                     #(ribcage #(_) #((top)) #("i21229"))
                                     #(ribcage #(x) #((top)) #("i21218"))
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i21215"))
                                     #(ribcage
                                       #(quasicons
                                         quasiappend
                                         quasivector
                                         quasi)
                                       #((top) (top) (top) (top))
                                       #("i21165" "i21166" "i21167" "i21168")))
                                    (hygiene guile))
                                 #{x\ 21219}#)))))))))))
       (#{quasi\ 21172}#
         (lambda (#{p\ 21231}# #{lev\ 21232}#)
           (let ((#{tmp\ 21235}# #{p\ 21231}#))
             (let ((#{tmp\ 21236}#
                     ($sc-dispatch
                       #{tmp\ 21235}#
                       '(#(free-id
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i21233" "i21234"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i21165" "i21166" "i21167" "i21168")))
                             (hygiene guile)))
                         any))))
               (if #{tmp\ 21236}#
                 (@apply
                   (lambda (#{p\ 21238}#)
                     (if (= #{lev\ 21232}# 0)
                       #{p\ 21238}#
                       (#{quasicons\ 21169}#
                         '(#(syntax-object
                             quote
                             ((top)
                              #(ribcage #(p) #((top)) #("i21237"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i21233" "i21234"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i21165" "i21166" "i21167" "i21168")))
                             (hygiene guile))
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i21237"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i21233" "i21234"))
                              #(ribcage
                                #(quasicons quasiappend quasivector quasi)
                                #((top) (top) (top) (top))
                                #("i21165" "i21166" "i21167" "i21168")))
                             (hygiene guile)))
                         (#{quasi\ 21172}#
                           (list #{p\ 21238}#)
                           (1- #{lev\ 21232}#)))))
                   #{tmp\ 21236}#)
                 (let ((#{tmp\ 21239}#
                         ($sc-dispatch
                           #{tmp\ 21235}#
                           '(#(free-id
                               #(syntax-object
                                 unquote
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p lev)
                                    #((top) (top))
                                    #("i21233" "i21234"))
                                  #(ribcage
                                    #(quasicons quasiappend quasivector quasi)
                                    #((top) (top) (top) (top))
                                    #("i21165" "i21166" "i21167" "i21168")))
                                 (hygiene guile)))
                             .
                             any))))
                   (if (if #{tmp\ 21239}#
                         (@apply
                           (lambda (#{args\ 21241}#) (= #{lev\ 21232}# 0))
                           #{tmp\ 21239}#)
                         #f)
                     (@apply
                       (lambda (#{args\ 21243}#)
                         (syntax-violation
                           'unquote
                           "unquote takes exactly one argument"
                           #{p\ 21231}#
                           (cons '#(syntax-object
                                    unquote
                                    ((top)
                                     #(ribcage #(args) #((top)) #("i21242"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i21233" "i21234"))
                                     #(ribcage
                                       #(quasicons
                                         quasiappend
                                         quasivector
                                         quasi)
                                       #((top) (top) (top) (top))
                                       #("i21165" "i21166" "i21167" "i21168")))
                                    (hygiene guile))
                                 #{args\ 21243}#)))
                       #{tmp\ 21239}#)
                     (let ((#{tmp\ 21244}#
                             ($sc-dispatch
                               #{tmp\ 21235}#
                               '((#(free-id
                                    #(syntax-object
                                      unquote-splicing
                                      ((top)
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(p lev)
                                         #((top) (top))
                                         #("i21233" "i21234"))
                                       #(ribcage
                                         #(quasicons
                                           quasiappend
                                           quasivector
                                           quasi)
                                         #((top) (top) (top) (top))
                                         #("i21165"
                                           "i21166"
                                           "i21167"
                                           "i21168")))
                                      (hygiene guile)))
                                  any)
                                 .
                                 any))))
                       (if #{tmp\ 21244}#
                         (@apply
                           (lambda (#{p\ 21247}# #{q\ 21248}#)
                             (if (= #{lev\ 21232}# 0)
                               (#{quasiappend\ 21170}#
                                 #{p\ 21247}#
                                 (#{quasi\ 21172}#
                                   #{q\ 21248}#
                                   #{lev\ 21232}#))
                               (#{quasicons\ 21169}#
                                 (#{quasicons\ 21169}#
                                   '(#(syntax-object
                                       quote
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i21245" "i21246"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i21233" "i21234"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i21165"
                                            "i21166"
                                            "i21167"
                                            "i21168")))
                                       (hygiene guile))
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i21245" "i21246"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i21233" "i21234"))
                                        #(ribcage
                                          #(quasicons
                                            quasiappend
                                            quasivector
                                            quasi)
                                          #((top) (top) (top) (top))
                                          #("i21165"
                                            "i21166"
                                            "i21167"
                                            "i21168")))
                                       (hygiene guile)))
                                   (#{quasi\ 21172}#
                                     (list #{p\ 21247}#)
                                     (1- #{lev\ 21232}#)))
                                 (#{quasi\ 21172}#
                                   #{q\ 21248}#
                                   #{lev\ 21232}#))))
                           #{tmp\ 21244}#)
                         (let ((#{tmp\ 21249}#
                                 ($sc-dispatch
                                   #{tmp\ 21235}#
                                   '((#(free-id
                                        #(syntax-object
                                          unquote-splicing
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p lev)
                                             #((top) (top))
                                             #("i21233" "i21234"))
                                           #(ribcage
                                             #(quasicons
                                               quasiappend
                                               quasivector
                                               quasi)
                                             #((top) (top) (top) (top))
                                             #("i21165"
                                               "i21166"
                                               "i21167"
                                               "i21168")))
                                          (hygiene guile)))
                                      .
                                      any)
                                     .
                                     any))))
                           (if (if #{tmp\ 21249}#
                                 (@apply
                                   (lambda (#{args\ 21252}# #{q\ 21253}#)
                                     (= #{lev\ 21232}# 0))
                                   #{tmp\ 21249}#)
                                 #f)
                             (@apply
                               (lambda (#{args\ 21256}# #{q\ 21257}#)
                                 (syntax-violation
                                   'unquote-splicing
                                   "unquote-splicing takes exactly one argument"
                                   #{p\ 21231}#
                                   (cons '#(syntax-object
                                            unquote-splicing
                                            ((top)
                                             #(ribcage
                                               #(args q)
                                               #((top) (top))
                                               #("i21254" "i21255"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p lev)
                                               #((top) (top))
                                               #("i21233" "i21234"))
                                             #(ribcage
                                               #(quasicons
                                                 quasiappend
                                                 quasivector
                                                 quasi)
                                               #((top) (top) (top) (top))
                                               #("i21165"
                                                 "i21166"
                                                 "i21167"
                                                 "i21168")))
                                            (hygiene guile))
                                         #{args\ 21256}#)))
                               #{tmp\ 21249}#)
                             (let ((#{tmp\ 21258}#
                                     ($sc-dispatch
                                       #{tmp\ 21235}#
                                       '(#(free-id
                                           #(syntax-object
                                             quasiquote
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i21233" "i21234"))
                                              #(ribcage
                                                #(quasicons
                                                  quasiappend
                                                  quasivector
                                                  quasi)
                                                #((top) (top) (top) (top))
                                                #("i21165"
                                                  "i21166"
                                                  "i21167"
                                                  "i21168")))
                                             (hygiene guile)))
                                         any))))
                               (if #{tmp\ 21258}#
                                 (@apply
                                   (lambda (#{p\ 21260}#)
                                     (#{quasicons\ 21169}#
                                       '(#(syntax-object
                                           quote
                                           ((top)
                                            #(ribcage
                                              #(p)
                                              #((top))
                                              #("i21259"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i21233" "i21234"))
                                            #(ribcage
                                              #(quasicons
                                                quasiappend
                                                quasivector
                                                quasi)
                                              #((top) (top) (top) (top))
                                              #("i21165"
                                                "i21166"
                                                "i21167"
                                                "i21168")))
                                           (hygiene guile))
                                         #(syntax-object
                                           quasiquote
                                           ((top)
                                            #(ribcage
                                              #(p)
                                              #((top))
                                              #("i21259"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i21233" "i21234"))
                                            #(ribcage
                                              #(quasicons
                                                quasiappend
                                                quasivector
                                                quasi)
                                              #((top) (top) (top) (top))
                                              #("i21165"
                                                "i21166"
                                                "i21167"
                                                "i21168")))
                                           (hygiene guile)))
                                       (#{quasi\ 21172}#
                                         (list #{p\ 21260}#)
                                         (1+ #{lev\ 21232}#))))
                                   #{tmp\ 21258}#)
                                 (let ((#{tmp\ 21261}#
                                         ($sc-dispatch
                                           #{tmp\ 21235}#
                                           '(any . any))))
                                   (if #{tmp\ 21261}#
                                     (@apply
                                       (lambda (#{p\ 21264}# #{q\ 21265}#)
                                         (#{quasicons\ 21169}#
                                           (#{quasi\ 21172}#
                                             #{p\ 21264}#
                                             #{lev\ 21232}#)
                                           (#{quasi\ 21172}#
                                             #{q\ 21265}#
                                             #{lev\ 21232}#)))
                                       #{tmp\ 21261}#)
                                     (let ((#{tmp\ 21266}#
                                             ($sc-dispatch
                                               #{tmp\ 21235}#
                                               '#(vector each-any))))
                                       (if #{tmp\ 21266}#
                                         (@apply
                                           (lambda (#{x\ 21268}#)
                                             (#{quasivector\ 21171}#
                                               (#{quasi\ 21172}#
                                                 #{x\ 21268}#
                                                 #{lev\ 21232}#)))
                                           #{tmp\ 21266}#)
                                         (let ((#{p\ 21271}# #{tmp\ 21235}#))
                                           (list '#(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(p)
                                                       #((top))
                                                       #("i21270"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(p lev)
                                                       #((top) (top))
                                                       #("i21233" "i21234"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i21165"
                                                         "i21166"
                                                         "i21167"
                                                         "i21168")))
                                                    (hygiene guile))
                                                 #{p\ 21271}#))))))))))))))))))))
      (begin
        (lambda (#{x\ 21272}#)
          (let ((#{tmp\ 21274}# #{x\ 21272}#))
            (let ((#{tmp\ 21275}#
                    ($sc-dispatch #{tmp\ 21274}# (quote (_ any)))))
              (if #{tmp\ 21275}#
                (@apply
                  (lambda (#{e\ 21277}#)
                    (#{quasi\ 21172}# #{e\ 21277}# 0))
                  #{tmp\ 21275}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 21274}#)))))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x\ 21278}#)
      (letrec*
        ((#{read-file\ 21281}#
           (lambda (#{fn\ 21282}# #{k\ 21283}#)
             (begin
               (let ((#{p\ 21287}# (open-input-file #{fn\ 21282}#)))
                 (letrec*
                   ((#{f\ 21291}#
                      (lambda (#{x\ 21292}# #{result\ 21293}#)
                        (if (eof-object? #{x\ 21292}#)
                          (begin
                            (close-input-port #{p\ 21287}#)
                            (reverse #{result\ 21293}#))
                          (#{f\ 21291}#
                            (read #{p\ 21287}#)
                            (cons (datum->syntax #{k\ 21283}# #{x\ 21292}#)
                                  #{result\ 21293}#))))))
                   (begin
                     (#{f\ 21291}# (read #{p\ 21287}#) (quote ())))))))))
        (begin
          (let ((#{tmp\ 21294}# #{x\ 21278}#))
            (let ((#{tmp\ 21295}#
                    ($sc-dispatch #{tmp\ 21294}# (quote (any any)))))
              (if #{tmp\ 21295}#
                (@apply
                  (lambda (#{k\ 21298}# #{filename\ 21299}#)
                    (begin
                      (let ((#{fn\ 21301}#
                              (syntax->datum #{filename\ 21299}#)))
                        (let ((#{tmp\ 21303}#
                                (#{read-file\ 21281}#
                                  #{fn\ 21301}#
                                  #{filename\ 21299}#)))
                          (let ((#{tmp\ 21304}#
                                  ($sc-dispatch
                                    #{tmp\ 21303}#
                                    'each-any)))
                            (if #{tmp\ 21304}#
                              (@apply
                                (lambda (#{exp\ 21306}#)
                                  (cons '#(syntax-object
                                           begin
                                           ((top)
                                            #(ribcage
                                              #(exp)
                                              #((top))
                                              #("i21305"))
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(fn)
                                              #((top))
                                              #("i21300"))
                                            #(ribcage
                                              #(k filename)
                                              #((top) (top))
                                              #("i21296" "i21297"))
                                            #(ribcage
                                              (read-file)
                                              ((top))
                                              ("i21280"))
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i21279")))
                                           (hygiene guile))
                                        #{exp\ 21306}#))
                                #{tmp\ 21304}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 21303}#)))))))
                  #{tmp\ 21295}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 21294}#)))))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x\ 21308}#)
      (let ((#{tmp\ 21310}# #{x\ 21308}#))
        (let ((#{tmp\ 21311}#
                ($sc-dispatch #{tmp\ 21310}# (quote (any any)))))
          (if #{tmp\ 21311}#
            (@apply
              (lambda (#{k\ 21314}# #{filename\ 21315}#)
                (begin
                  (let ((#{fn\ 21317}#
                          (syntax->datum #{filename\ 21315}#)))
                    (let ((#{tmp\ 21319}#
                            (datum->syntax
                              #{filename\ 21315}#
                              (begin
                                (let ((#{t\ 21324}#
                                        (%search-load-path #{fn\ 21317}#)))
                                  (if #{t\ 21324}#
                                    #{t\ 21324}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 21308}#
                                      #{filename\ 21315}#)))))))
                      (let ((#{fn\ 21321}# #{tmp\ 21319}#))
                        (list '#(syntax-object
                                 include
                                 ((top)
                                  #(ribcage #(fn) #((top)) #("i21320"))
                                  #(ribcage () () ())
                                  #(ribcage () () ())
                                  #(ribcage #(fn) #((top)) #("i21316"))
                                  #(ribcage
                                    #(k filename)
                                    #((top) (top))
                                    #("i21312" "i21313"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i21309")))
                                 (hygiene guile))
                              #{fn\ 21321}#))))))
              #{tmp\ 21311}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 21310}#)))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x\ 21326}#)
      (let ((#{tmp\ 21328}# #{x\ 21326}#))
        (let ((#{tmp\ 21329}#
                ($sc-dispatch #{tmp\ 21328}# (quote (_ any)))))
          (if #{tmp\ 21329}#
            (@apply
              (lambda (#{e\ 21331}#)
                (syntax-violation
                  'unquote
                  "expression not valid outside of quasiquote"
                  #{x\ 21326}#))
              #{tmp\ 21329}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 21328}#)))))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x\ 21332}#)
      (let ((#{tmp\ 21334}# #{x\ 21332}#))
        (let ((#{tmp\ 21335}#
                ($sc-dispatch #{tmp\ 21334}# (quote (_ any)))))
          (if #{tmp\ 21335}#
            (@apply
              (lambda (#{e\ 21337}#)
                (syntax-violation
                  'unquote-splicing
                  "expression not valid outside of quasiquote"
                  #{x\ 21332}#))
              #{tmp\ 21335}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 21334}#)))))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x\ 21338}#)
      (let ((#{tmp\ 21340}# #{x\ 21338}#))
        (let ((#{tmp\ 21341}#
                ($sc-dispatch
                  #{tmp\ 21340}#
                  '(_ any any . each-any))))
          (if #{tmp\ 21341}#
            (@apply
              (lambda (#{e\ 21345}# #{m1\ 21346}# #{m2\ 21347}#)
                (let ((#{tmp\ 21349}#
                        (letrec*
                          ((#{f\ 21355}#
                             (lambda (#{clause\ 21356}# #{clauses\ 21357}#)
                               (if (null? #{clauses\ 21357}#)
                                 (let ((#{tmp\ 21359}# #{clause\ 21356}#))
                                   (let ((#{tmp\ 21360}#
                                           ($sc-dispatch
                                             #{tmp\ 21359}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   else
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f clause clauses)
                                                      #((top) (top) (top))
                                                      #("i21352"
                                                        "i21353"
                                                        "i21354"))
                                                    #(ribcage
                                                      #(e m1 m2)
                                                      #((top) (top) (top))
                                                      #("i21342"
                                                        "i21343"
                                                        "i21344"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i21339")))
                                                   (hygiene guile)))
                                               any
                                               .
                                               each-any))))
                                     (if #{tmp\ 21360}#
                                       (@apply
                                         (lambda (#{e1\ 21363}# #{e2\ 21364}#)
                                           (cons '#(syntax-object
                                                    begin
                                                    ((top)
                                                     #(ribcage
                                                       #(e1 e2)
                                                       #((top) (top))
                                                       #("i21361" "i21362"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i21352"
                                                         "i21353"
                                                         "i21354"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i21342"
                                                         "i21343"
                                                         "i21344"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i21339")))
                                                    (hygiene guile))
                                                 (cons #{e1\ 21363}#
                                                       #{e2\ 21364}#)))
                                         #{tmp\ 21360}#)
                                       (let ((#{tmp\ 21366}#
                                               ($sc-dispatch
                                                 #{tmp\ 21359}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp\ 21366}#
                                           (@apply
                                             (lambda (#{k\ 21370}#
                                                      #{e1\ 21371}#
                                                      #{e2\ 21372}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i21367"
                                                             "i21368"
                                                             "i21369"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i21352"
                                                             "i21353"
                                                             "i21354"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i21342"
                                                             "i21343"
                                                             "i21344"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i21339")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21367"
                                                                   "i21368"
                                                                   "i21369"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21352"
                                                                   "i21353"
                                                                   "i21354"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21342"
                                                                   "i21343"
                                                                   "i21344"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21339")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21367"
                                                                   "i21368"
                                                                   "i21369"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21352"
                                                                   "i21353"
                                                                   "i21354"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21342"
                                                                   "i21343"
                                                                   "i21344"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21339")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i21367"
                                                                         "i21368"
                                                                         "i21369"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i21352"
                                                                         "i21353"
                                                                         "i21354"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i21342"
                                                                         "i21343"
                                                                         "i21344"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i21339")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k\ 21370}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21367"
                                                                   "i21368"
                                                                   "i21369"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21352"
                                                                   "i21353"
                                                                   "i21354"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21342"
                                                                   "i21343"
                                                                   "i21344"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21339")))
                                                              (hygiene guile))
                                                           (cons #{e1\ 21371}#
                                                                 #{e2\ 21372}#))))
                                             #{tmp\ 21366}#)
                                           (let ((#{_\ 21376}# #{tmp\ 21359}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x\ 21338}#
                                               #{clause\ 21356}#)))))))
                                 (let ((#{tmp\ 21378}#
                                         (#{f\ 21355}#
                                           (car #{clauses\ 21357}#)
                                           (cdr #{clauses\ 21357}#))))
                                   (let ((#{rest\ 21380}# #{tmp\ 21378}#))
                                     (let ((#{tmp\ 21381}# #{clause\ 21356}#))
                                       (let ((#{tmp\ 21382}#
                                               ($sc-dispatch
                                                 #{tmp\ 21381}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp\ 21382}#
                                           (@apply
                                             (lambda (#{k\ 21386}#
                                                      #{e1\ 21387}#
                                                      #{e2\ 21388}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i21383"
                                                             "i21384"
                                                             "i21385"))
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i21379"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i21352"
                                                             "i21353"
                                                             "i21354"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i21342"
                                                             "i21343"
                                                             "i21344"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i21339")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21383"
                                                                   "i21384"
                                                                   "i21385"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i21379"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21352"
                                                                   "i21353"
                                                                   "i21354"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21342"
                                                                   "i21343"
                                                                   "i21344"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21339")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21383"
                                                                   "i21384"
                                                                   "i21385"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i21379"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21352"
                                                                   "i21353"
                                                                   "i21354"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21342"
                                                                   "i21343"
                                                                   "i21344"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21339")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i21383"
                                                                         "i21384"
                                                                         "i21385"))
                                                                     #(ribcage
                                                                       #(rest)
                                                                       #((top))
                                                                       #("i21379"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i21352"
                                                                         "i21353"
                                                                         "i21354"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i21342"
                                                                         "i21343"
                                                                         "i21344"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i21339")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k\ 21386}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21383"
                                                                   "i21384"
                                                                   "i21385"))
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i21379"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21352"
                                                                   "i21353"
                                                                   "i21354"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i21342"
                                                                   "i21343"
                                                                   "i21344"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i21339")))
                                                              (hygiene guile))
                                                           (cons #{e1\ 21387}#
                                                                 #{e2\ 21388}#))
                                                     #{rest\ 21380}#))
                                             #{tmp\ 21382}#)
                                           (let ((#{_\ 21392}# #{tmp\ 21381}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x\ 21338}#
                                               #{clause\ 21356}#)))))))))))
                          (begin
                            (#{f\ 21355}# #{m1\ 21346}# #{m2\ 21347}#)))))
                  (let ((#{body\ 21351}# #{tmp\ 21349}#))
                    (list '#(syntax-object
                             let
                             ((top)
                              #(ribcage #(body) #((top)) #("i21350"))
                              #(ribcage
                                #(e m1 m2)
                                #((top) (top) (top))
                                #("i21342" "i21343" "i21344"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i21339")))
                             (hygiene guile))
                          (list (list '#(syntax-object
                                         t
                                         ((top)
                                          #(ribcage
                                            #(body)
                                            #((top))
                                            #("i21350"))
                                          #(ribcage
                                            #(e m1 m2)
                                            #((top) (top) (top))
                                            #("i21342" "i21343" "i21344"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i21339")))
                                         (hygiene guile))
                                      #{e\ 21345}#))
                          #{body\ 21351}#))))
              #{tmp\ 21341}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp\ 21340}#)))))))

(define make-variable-transformer
  (lambda (#{proc\ 21393}#)
    (if (procedure? #{proc\ 21393}#)
      (begin
        (letrec*
          ((#{trans\ 21396}#
             (lambda (#{x\ 21397}#)
               (#{proc\ 21393}# #{x\ 21397}#))))
          (begin
            (set-procedure-property!
              #{trans\ 21396}#
              'variable-transformer
              #t)
            #{trans\ 21396}#)))
      (error "variable transformer not a procedure"
             #{proc\ 21393}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x\ 21399}#)
      (let ((#{tmp\ 21401}# #{x\ 21399}#))
        (let ((#{tmp\ 21402}#
                ($sc-dispatch #{tmp\ 21401}# (quote (_ any)))))
          (if #{tmp\ 21402}#
            (@apply
              (lambda (#{e\ 21404}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage #(e) #((top)) #("i21403"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i21400")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage #(e) #((top)) #("i21403"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i21400")))
                          (hygiene guile)))
                      '#((#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage #(e) #((top)) #("i21403"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i21400")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            identifier-syntax
                            ((top)
                             #(ribcage #(e) #((top)) #("i21403"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i21400")))
                            (hygiene guile))))
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage #(e) #((top)) #("i21403"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i21400")))
                               (hygiene guile))
                            '#(syntax-object
                               x
                               ((top)
                                #(ribcage #(e) #((top)) #("i21403"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i21400")))
                               (hygiene guile))
                            '()
                            (list '#(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i21403"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i21400")))
                                     (hygiene guile))
                                  '(#(syntax-object
                                      identifier?
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i21403"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i21400")))
                                      (hygiene guile))
                                    (#(syntax-object
                                       syntax
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i21403"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i21400")))
                                       (hygiene guile))
                                     #(syntax-object
                                       id
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i21403"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i21400")))
                                       (hygiene guile))))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage
                                              #(e)
                                              #((top))
                                              #("i21403"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i21400")))
                                           (hygiene guile))
                                        #{e\ 21404}#))
                            (list '(#(syntax-object
                                      _
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i21403"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i21400")))
                                      (hygiene guile))
                                    #(syntax-object
                                      x
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i21403"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i21400")))
                                      (hygiene guile))
                                    #(syntax-object
                                      ...
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i21403"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i21400")))
                                      (hygiene guile)))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage
                                              #(e)
                                              #((top))
                                              #("i21403"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i21400")))
                                           (hygiene guile))
                                        (cons #{e\ 21404}#
                                              '(#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i21403"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i21400")))
                                                  (hygiene guile))
                                                #(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i21403"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i21400")))
                                                  (hygiene guile)))))))))
              #{tmp\ 21402}#)
            (let ((#{tmp\ 21405}#
                    ($sc-dispatch
                      #{tmp\ 21401}#
                      '(_ (any any)
                          ((#(free-id
                              #(syntax-object
                                set!
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i21400")))
                                (hygiene guile)))
                            any
                            any)
                           any)))))
              (if (if #{tmp\ 21405}#
                    (@apply
                      (lambda (#{id\ 21411}#
                               #{exp1\ 21412}#
                               #{var\ 21413}#
                               #{val\ 21414}#
                               #{exp2\ 21415}#)
                        (if (identifier? #{id\ 21411}#)
                          (identifier? #{var\ 21413}#)
                          #f))
                      #{tmp\ 21405}#)
                    #f)
                (@apply
                  (lambda (#{id\ 21423}#
                           #{exp1\ 21424}#
                           #{var\ 21425}#
                           #{val\ 21426}#
                           #{exp2\ 21427}#)
                    (list '#(syntax-object
                             make-variable-transformer
                             ((top)
                              #(ribcage
                                #(id exp1 var val exp2)
                                #((top) (top) (top) (top) (top))
                                #("i21418"
                                  "i21419"
                                  "i21420"
                                  "i21421"
                                  "i21422"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i21400")))
                             (hygiene guile))
                          (list '#(syntax-object
                                   lambda
                                   ((top)
                                    #(ribcage
                                      #(id exp1 var val exp2)
                                      #((top) (top) (top) (top) (top))
                                      #("i21418"
                                        "i21419"
                                        "i21420"
                                        "i21421"
                                        "i21422"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i21400")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    x
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i21418"
                                         "i21419"
                                         "i21420"
                                         "i21421"
                                         "i21422"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i21400")))
                                    (hygiene guile)))
                                '#((#(syntax-object
                                      macro-type
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i21418"
                                           "i21419"
                                           "i21420"
                                           "i21421"
                                           "i21422"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i21400")))
                                      (hygiene guile))
                                    .
                                    #(syntax-object
                                      variable-transformer
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i21418"
                                           "i21419"
                                           "i21420"
                                           "i21421"
                                           "i21422"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i21400")))
                                      (hygiene guile))))
                                (list '#(syntax-object
                                         syntax-case
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i21418"
                                              "i21419"
                                              "i21420"
                                              "i21421"
                                              "i21422"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i21400")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         x
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i21418"
                                              "i21419"
                                              "i21420"
                                              "i21421"
                                              "i21422"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i21400")))
                                         (hygiene guile))
                                      '(#(syntax-object
                                          set!
                                          ((top)
                                           #(ribcage
                                             #(id exp1 var val exp2)
                                             #((top) (top) (top) (top) (top))
                                             #("i21418"
                                               "i21419"
                                               "i21420"
                                               "i21421"
                                               "i21422"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i21400")))
                                          (hygiene guile)))
                                      (list (list '#(syntax-object
                                                     set!
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i21418"
                                                          "i21419"
                                                          "i21420"
                                                          "i21421"
                                                          "i21422"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i21400")))
                                                     (hygiene guile))
                                                  #{var\ 21425}#
                                                  #{val\ 21426}#)
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i21418"
                                                          "i21419"
                                                          "i21420"
                                                          "i21421"
                                                          "i21422"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i21400")))
                                                     (hygiene guile))
                                                  #{exp2\ 21427}#))
                                      (list (cons #{id\ 21423}#
                                                  '(#(syntax-object
                                                      x
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i21418"
                                                           "i21419"
                                                           "i21420"
                                                           "i21421"
                                                           "i21422"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i21400")))
                                                      (hygiene guile))
                                                    #(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i21418"
                                                           "i21419"
                                                           "i21420"
                                                           "i21421"
                                                           "i21422"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i21400")))
                                                      (hygiene guile))))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i21418"
                                                          "i21419"
                                                          "i21420"
                                                          "i21421"
                                                          "i21422"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i21400")))
                                                     (hygiene guile))
                                                  (cons #{exp1\ 21424}#
                                                        '(#(syntax-object
                                                            x
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i21418"
                                                                 "i21419"
                                                                 "i21420"
                                                                 "i21421"
                                                                 "i21422"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i21400")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            ...
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i21418"
                                                                 "i21419"
                                                                 "i21420"
                                                                 "i21421"
                                                                 "i21422"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i21400")))
                                                            (hygiene
                                                              guile))))))
                                      (list #{id\ 21423}#
                                            (list '#(syntax-object
                                                     identifier?
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i21418"
                                                          "i21419"
                                                          "i21420"
                                                          "i21421"
                                                          "i21422"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i21400")))
                                                     (hygiene guile))
                                                  (list '#(syntax-object
                                                           syntax
                                                           ((top)
                                                            #(ribcage
                                                              #(id
                                                                exp1
                                                                var
                                                                val
                                                                exp2)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i21418"
                                                                "i21419"
                                                                "i21420"
                                                                "i21421"
                                                                "i21422"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i21400")))
                                                           (hygiene guile))
                                                        #{id\ 21423}#))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i21418"
                                                          "i21419"
                                                          "i21420"
                                                          "i21421"
                                                          "i21422"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i21400")))
                                                     (hygiene guile))
                                                  #{exp1\ 21424}#))))))
                  #{tmp\ 21405}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 21401}#)))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x\ 21428}#)
      (let ((#{tmp\ 21430}# #{x\ 21428}#))
        (let ((#{tmp\ 21431}#
                ($sc-dispatch
                  #{tmp\ 21430}#
                  '(_ (any . any) any . each-any))))
          (if #{tmp\ 21431}#
            (@apply
              (lambda (#{id\ 21436}#
                       #{args\ 21437}#
                       #{b0\ 21438}#
                       #{b1\ 21439}#)
                (list '#(syntax-object
                         define
                         ((top)
                          #(ribcage
                            #(id args b0 b1)
                            #((top) (top) (top) (top))
                            #("i21432" "i21433" "i21434" "i21435"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i21429")))
                         (hygiene guile))
                      #{id\ 21436}#
                      (cons '#(syntax-object
                               lambda*
                               ((top)
                                #(ribcage
                                  #(id args b0 b1)
                                  #((top) (top) (top) (top))
                                  #("i21432" "i21433" "i21434" "i21435"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i21429")))
                               (hygiene guile))
                            (cons #{args\ 21437}#
                                  (cons #{b0\ 21438}# #{b1\ 21439}#)))))
              #{tmp\ 21431}#)
            (let ((#{tmp\ 21441}#
                    ($sc-dispatch #{tmp\ 21430}# (quote (_ any any)))))
              (if (if #{tmp\ 21441}#
                    (@apply
                      (lambda (#{id\ 21444}# #{val\ 21445}#)
                        (identifier?
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i21442" "i21443"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i21429")))
                             (hygiene guile))))
                      #{tmp\ 21441}#)
                    #f)
                (@apply
                  (lambda (#{id\ 21448}# #{val\ 21449}#)
                    (list '#(syntax-object
                             define
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i21446" "i21447"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i21429")))
                             (hygiene guile))
                          #{id\ 21448}#
                          #{val\ 21449}#))
                  #{tmp\ 21441}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp\ 21430}#)))))))))

